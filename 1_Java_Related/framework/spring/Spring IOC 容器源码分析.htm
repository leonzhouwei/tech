<!DOCTYPE html>
<!-- saved from url=(0036)https://javadoop.com/post/spring-ioc -->
<html class="cye-disabled cye-lm"><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
    
    <meta name="viewport" content="width=device-width,initial-scale=1.0">
    <title>Spring IOC 容器源码分析</title>
    <link rel="icon" href="https://assets.javadoop.com/imgs/20510079/default/favor.ico">
    <!-- <script src="https://cdnjs.cloudflare.com/ajax/libs/vConsole/3.3.0/vconsole.min.js"></script> -->
    <script src="./Spring IOC 容器源码分析_files/hm.js"></script><script src="./Spring IOC 容器源码分析_files/jquery.min.js"></script><style id="nightModeStyle">
html.cye-enabled.cye-nm:not(*:-webkit-full-screen) body,
 html.cye-enabled.cye-nm:not(*:-webkit-full-screen) #cye-workaround-body {-webkit-filter:contrast(91%) brightness(84%) invert(1);}</style><style id="cyebody">html.cye-enabled.cye-lm body{background-color:#cce8cf !important;border-color:rgb(51, 58, 51) !important;background-image:none !important;color:#000000  !important}</style><style id="cyediv">html.cye-enabled.cye-lm div{background-color:#cce8cf !important;border-color:rgb(51, 58, 51) !important;background-image:none !important;color:#000000  !important}</style><style id="cyetable">html.cye-enabled.cye-lm th{background-color:#cce8cf !important;border-color:rgb(51, 58, 51) !important;background-image:none !important;color:#000000  !important}html.cye-enabled.cye-lm td{background-color:#cce8cf !important;border-color:rgb(51, 58, 51) !important;background-image:none !important;color:#000000  !important}</style><style id="cyetextInput">html.cye-enabled.cye-lm input[type=text]{background-color:#cce8cf !important;border-color:rgb(51, 58, 51) !important;background-image:none !important;color:#000000  !important}html.cye-enabled.cye-lm textarea{background-color:#cce8cf !important;border-color:rgb(51, 58, 51) !important;background-image:none !important;color:#000000  !important}</style><style id="cyeselect">html.cye-enabled.cye-lm select{background-color:#cce8cf !important;border-color:rgb(51, 58, 51) !important;background-image:none !important;color:#000000  !important}</style><style id="cyeul">html.cye-enabled.cye-lm ul{background-color:#cce8cf !important;border-color:rgb(51, 58, 51) !important;background-image:none !important;color:#000000  !important}</style><style id="cyeChangeByClick">html.cye-enabled.cye-lm .cye-lm-tag,html.cye-enabled.cye-lm.cye-lm-tag{background-color:#cce8cf !important;border-color:rgb(51, 58, 51) !important;background-image:none !important;color:#000000  !important}</style>
    <script src="./Spring IOC 容器源码分析_files/react.production.min.js"></script>
    <script src="./Spring IOC 容器源码分析_files/react-dom.production.min.js"></script>
    <script src="./Spring IOC 容器源码分析_files/react-router-dom.min.js"></script>
    <script src="./Spring IOC 容器源码分析_files/js.cookie.min.js"></script>
<link href="./Spring IOC 容器源码分析_files/vendor.css" rel="stylesheet"><link href="./Spring IOC 容器源码分析_files/app.css" rel="stylesheet"><link rel="stylesheet" type="text/css" href="./Spring IOC 容器源码分析_files/post.css"><script charset="utf-8" src="./Spring IOC 容器源码分析_files/post.js"></script></head><div id="cyeBlackMaskLayer" style="background-color: rgb(19, 19, 19); position: fixed; width: 1980px; height: 1080px; z-index: -2147483648;"></div>

<body style="font-family: &quot;Helvetica Neue&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;">
    <div id="app"><section class="layout ant-layout" style="background-color: rgb(255, 255, 255);"><div><div style="display: none;"><div class="animationload"><div class="osahanloading"></div></div></div><div><i aria-label="icon: menu-unfold" id="toggleToc" class="anticon anticon-menu-unfold"><svg viewBox="64 64 896 896" class="" data-icon="menu-unfold" width="1em" height="1em" fill="currentColor" aria-hidden="true"><path d="M408 442h480c4.4 0 8-3.6 8-8v-56c0-4.4-3.6-8-8-8H408c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8zm-8 204c0 4.4 3.6 8 8 8h480c4.4 0 8-3.6 8-8v-56c0-4.4-3.6-8-8-8H408c-4.4 0-8 3.6-8 8v56zm504-486H120c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h784c4.4 0 8-3.6 8-8v-56c0-4.4-3.6-8-8-8zm0 632H120c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h784c4.4 0 8-3.6 8-8v-56c0-4.4-3.6-8-8-8zM142.4 642.1L298.7 519a8.84 8.84 0 0 0 0-13.9L142.4 381.9c-5.8-4.6-14.4-.5-14.4 6.9v246.3a8.9 8.9 0 0 0 14.4 7z"></path></svg></i><i aria-label="icon: setting" id="toggleSettings" class="anticon anticon-setting"><svg viewBox="64 64 896 896" class="" data-icon="setting" width="1em" height="1em" fill="currentColor" aria-hidden="true"><path d="M512.5 390.6c-29.9 0-57.9 11.6-79.1 32.8-21.1 21.2-32.8 49.2-32.8 79.1 0 29.9 11.7 57.9 32.8 79.1 21.2 21.1 49.2 32.8 79.1 32.8 29.9 0 57.9-11.7 79.1-32.8 21.1-21.2 32.8-49.2 32.8-79.1 0-29.9-11.7-57.9-32.8-79.1a110.96 110.96 0 0 0-79.1-32.8zm412.3 235.5l-65.4-55.9c3.1-19 4.7-38.4 4.7-57.7s-1.6-38.8-4.7-57.7l65.4-55.9a32.03 32.03 0 0 0 9.3-35.2l-.9-2.6a442.5 442.5 0 0 0-79.6-137.7l-1.8-2.1a32.12 32.12 0 0 0-35.1-9.5l-81.2 28.9c-30-24.6-63.4-44-99.6-57.5l-15.7-84.9a32.05 32.05 0 0 0-25.8-25.7l-2.7-.5c-52-9.4-106.8-9.4-158.8 0l-2.7.5a32.05 32.05 0 0 0-25.8 25.7l-15.8 85.3a353.44 353.44 0 0 0-98.9 57.3l-81.8-29.1a32 32 0 0 0-35.1 9.5l-1.8 2.1a445.93 445.93 0 0 0-79.6 137.7l-.9 2.6c-4.5 12.5-.8 26.5 9.3 35.2l66.2 56.5c-3.1 18.8-4.6 38-4.6 57 0 19.2 1.5 38.4 4.6 57l-66 56.5a32.03 32.03 0 0 0-9.3 35.2l.9 2.6c18.1 50.3 44.8 96.8 79.6 137.7l1.8 2.1a32.12 32.12 0 0 0 35.1 9.5l81.8-29.1c29.8 24.5 63 43.9 98.9 57.3l15.8 85.3a32.05 32.05 0 0 0 25.8 25.7l2.7.5a448.27 448.27 0 0 0 158.8 0l2.7-.5a32.05 32.05 0 0 0 25.8-25.7l15.7-84.9c36.2-13.6 69.6-32.9 99.6-57.5l81.2 28.9a32 32 0 0 0 35.1-9.5l1.8-2.1c34.8-41.1 61.5-87.4 79.6-137.7l.9-2.6c4.3-12.4.6-26.3-9.5-35zm-412.3 52.2c-97.1 0-175.8-78.7-175.8-175.8s78.7-175.8 175.8-175.8 175.8 78.7 175.8 175.8-78.7 175.8-175.8 175.8z"></path></svg></i><div id="toc" style="display: none;"></div><div id="settings-panel" style="display: none;"><div class="line"><a href="https://javadoop.com/" class="line-item" style="width: 50%; color: rgb(52, 169, 134);"><i aria-label="icon: home" class="anticon anticon-home"><svg viewBox="64 64 896 896" class="" data-icon="home" width="1em" height="1em" fill="currentColor" aria-hidden="true"><path d="M946.5 505L560.1 118.8l-25.9-25.9a31.5 31.5 0 0 0-44.4 0L77.5 505a63.9 63.9 0 0 0-18.8 46c.4 35.2 29.7 63.3 64.9 63.3h42.5V940h691.8V614.3h43.4c17.1 0 33.2-6.7 45.3-18.8a63.6 63.6 0 0 0 18.7-45.3c0-17-6.7-33.1-18.8-45.2zM568 868H456V664h112v204zm217.9-325.7V868H632V640c0-22.1-17.9-40-40-40H432c-22.1 0-40 17.9-40 40v228H238.1V542.3h-96l370-369.7 23.1 23.1L882 542.3h-96.1z"></path></svg></i> 首页</a><a href="https://javadoop.com/admin" class="line-item" style="width: 50%; color: rgb(52, 169, 134);"><i aria-label="icon: user" class="anticon anticon-user"><svg viewBox="64 64 896 896" class="" data-icon="user" width="1em" height="1em" fill="currentColor" aria-hidden="true"><path d="M858.5 763.6a374 374 0 0 0-80.6-119.5 375.63 375.63 0 0 0-119.5-80.6c-.4-.2-.8-.3-1.2-.5C719.5 518 760 444.7 760 362c0-137-111-248-248-248S264 225 264 362c0 82.7 40.5 156 102.8 201.1-.4.2-.8.3-1.2.5-44.8 18.9-85 46-119.5 80.6a375.63 375.63 0 0 0-80.6 119.5A371.7 371.7 0 0 0 136 901.8a8 8 0 0 0 8 8.2h60c4.4 0 7.9-3.5 8-7.8 2-77.2 33-149.5 87.8-204.3 56.7-56.7 132-87.9 212.2-87.9s155.5 31.2 212.2 87.9C779 752.7 810 825 812 902.2c.1 4.4 3.6 7.8 8 7.8h60a8 8 0 0 0 8-8.2c-1-47.8-10.9-94.3-29.5-138.2zM512 534c-45.9 0-89.1-17.9-121.6-50.4S340 407.9 340 362c0-45.9 17.9-89.1 50.4-121.6S466.1 190 512 190s89.1 17.9 121.6 50.4S684 316.1 684 362c0 45.9-17.9 89.1-50.4 121.6S557.9 534 512 534z"></path></svg></i> 我的</a></div><div class="line"><button class="line-item" style="width: 50%; font-size: 16px;">A-</button><button class="line-item" style="width: 50%; font-size: 16px;">A+</button></div><div class="line"><button class="line-item" style="width: 50%;">PingFang</button><button class="line-item active" style="width: 50%;">Helvetica</button></div><div class="line" style="border-bottom: 0px;"><button class="line-item" style="width: 50%;">Night</button><button class="line-item active" style="width: 50%;">Light</button></div></div></div><div></div><div id="themeWrapper" class="light"><div class="post-comment-wrapper"><div></div><div id="title"><a href="https://javadoop.com/" class="backward"> <i aria-label="icon: home" class="anticon anticon-home"><svg viewBox="64 64 896 896" class="" data-icon="home" width="1em" height="1em" fill="currentColor" aria-hidden="true"><path d="M946.5 505L534.6 93.4a31.93 31.93 0 0 0-45.2 0L77.5 505c-12 12-18.8 28.3-18.8 45.3 0 35.3 28.7 64 64 64h43.4V908c0 17.7 14.3 32 32 32H448V716h112v224h265.9c17.7 0 32-14.3 32-32V614.3h43.4c17 0 33.3-6.7 45.3-18.8 24.9-25 24.9-65.5-.1-90.5z"></path></svg></i> 回首页</a><div style="position: relative;"><h1>Spring IOC 容器源码分析</h1><i aria-label="icon: cloud-download" tabindex="-1" class="anticon anticon-cloud-download download-icon"><svg viewBox="64 64 896 896" class="" data-icon="cloud-download" width="1em" height="1em" fill="currentColor" aria-hidden="true"><path d="M624 706.3h-74.1V464c0-4.4-3.6-8-8-8h-60c-4.4 0-8 3.6-8 8v242.3H400c-6.7 0-10.4 7.7-6.3 12.9l112 141.7a8 8 0 0 0 12.6 0l112-141.7c4.1-5.2.4-12.9-6.3-12.9z"></path><path d="M811.4 366.7C765.6 245.9 648.9 160 512.2 160S258.8 245.8 213 366.6C127.3 389.1 64 467.2 64 560c0 110.5 89.5 200 199.9 200H304c4.4 0 8-3.6 8-8v-60c0-4.4-3.6-8-8-8h-40.1c-33.7 0-65.4-13.4-89-37.7-23.5-24.2-36-56.8-34.9-90.6.9-26.4 9.9-51.2 26.2-72.1 16.7-21.3 40.1-36.8 66.1-43.7l37.9-9.9 13.9-36.6c8.6-22.8 20.6-44.1 35.7-63.4a245.6 245.6 0 0 1 52.4-49.9c41.1-28.9 89.5-44.2 140-44.2s98.9 15.3 140 44.2c19.9 14 37.5 30.8 52.4 49.9 15.1 19.3 27.1 40.7 35.7 63.4l13.8 36.5 37.8 10C846.1 454.5 884 503.8 884 560c0 33.1-12.9 64.3-36.3 87.7a123.07 123.07 0 0 1-87.6 36.3H720c-4.4 0-8 3.6-8 8v60c0 4.4 3.6 8 8 8h40.1C870.5 760 960 670.5 960 560c0-92.7-63.1-170.7-148.6-193.3z"></path></svg></i></div><div class="time">创建时间: 2017-11-15 00:00:00</div></div><div id="content"><p>[TOC]</p>
<p>Spring 最重要的概念是 IOC 和 AOP，本篇文章其实就是要带领大家来分析下 Spring 的 IOC 容器。既然大家平时都要用到 Spring，怎么可以不好好了解 Spring 呢？阅读本文并不能让你成为 Spring 专家，不过一定有助于大家理解 Spring 的很多概念，帮助大家排查应用中和 Spring 相关的一些问题。</p>
<p>本文采用的源码版本是 4.3.11.RELEASE，算是 5.0.x 前比较新的版本了。为了降低难度，本文所说的所有的内容都是基于 xml 的配置的方式，实际使用已经很少人这么做了，至少不是纯 xml 配置，不过从理解源码的角度来看用这种方式来说无疑是最合适的。</p>
<p>阅读建议：读者至少需要知道怎么配置 Spring，了解 Spring 中的各种概念，少部分内容我还假设读者使用过 SpringMVC。本文要说的 IOC 总体来说有两处地方最重要，一个是创建 Bean 容器，一个是初始化 Bean，如果读者觉得一次性看完本文压力有点大，那么可以按这个思路分两次消化。读者不一定对 Spring 容器的源码感兴趣，也许附录部分介绍的知识对读者有些许作用。</p>
<p>希望通过本文可以让读者不惧怕阅读 Spring 源码，也希望大家能反馈表述错误或不合理的地方。</p>
<p><strong>目录</strong></p>
<!-- toc -->


<h2 id="引言">引言</h2>
<p>先看下最基本的启动 Spring 容器的例子：</p>
<pre><code class="language-java hljs"><span class="hljs-function"><span class="hljs-keyword"><span class="hljs-function"><span class="hljs-keyword">public</span></span></span><span class="hljs-function"> </span><span class="hljs-keyword"><span class="hljs-function"><span class="hljs-keyword">static</span></span></span><span class="hljs-function"> </span><span class="hljs-keyword"><span class="hljs-function"><span class="hljs-keyword">void</span></span></span><span class="hljs-function"> </span><span class="hljs-title"><span class="hljs-function"><span class="hljs-title">main</span></span></span><span class="hljs-params"><span class="hljs-function"><span class="hljs-params">(String[] args)</span></span></span><span class="hljs-function"> </span></span>{
    ApplicationContext context = <span class="hljs-keyword"><span class="hljs-keyword">new</span></span> ClassPathXmlApplicationContext(<span class="hljs-string"><span class="hljs-string">"classpath:applicationfile.xml"</span></span>);
}</code></pre>
<p>以上代码就可以利用配置文件来启动一个 Spring 容器了，请使用 maven 的小伙伴直接在 dependencies 中加上以下依赖即可，个人比较反对那些不知道要添加什么依赖，然后把 Spring 的所有相关的东西都加进来的方式。</p>
<pre><code class="language-java hljs">&lt;dependency&gt;
  &lt;groupId&gt;org.springframework&lt;/groupId&gt;
  &lt;artifactId&gt;spring-context&lt;/artifactId&gt;
  &lt;version&gt;<span class="hljs-number"><span class="hljs-number">4.3</span></span>.11.RELEASE&lt;/version&gt;
&lt;/dependency&gt;</code></pre>
<blockquote>
<p>spring-context 会自动将 spring-core、spring-beans、spring-aop、spring-expression 这几个基础 jar 包带进来。</p>
</blockquote>
<p>多说一句，很多开发者入门就直接接触的 SpringMVC，对 Spring 其实不是很了解，Spring 是渐进式的工具，并不具有很强的侵入性，它的模块也划分得很合理，即使你的应用不是 web 应用，或者之前完全没有使用到 Spring，而你就想用 Spring 的依赖注入这个功能，其实完全是可以的，它的引入不会对其他的组件产生冲突。</p>
<p>废话说完，我们继续。<code>ApplicationContext context = new ClassPathXmlApplicationContext(...)</code> 其实很好理解，从名字上就可以猜出一二，就是在 ClassPath 中寻找 xml 配置文件，根据 xml 文件内容来构建 ApplicationContext。当然，除了 ClassPathXmlApplicationContext 以外，我们也还有其他构建 ApplicationContext 的方案可供选择，我们先来看看大体的继承结构是怎么样的：</p>
<p><img src="./Spring IOC 容器源码分析_files/1.png" alt="1"></p>
<blockquote>
<p>读者可以大致看一下类名，源码分析的时候不至于找不着看哪个类，因为 Spring 为了适应各种使用场景，提供的各个接口都可能有很多的实现类。对于我们来说，就是揪着一个完整的分支看完。</p>
<p>当然，读本文的时候读者也不必太担心，每个代码块分析的时候，我都会告诉读者我们在说哪个类第几行。</p>
</blockquote>
<p>我们可以看到，ClassPathXmlApplicationContext 兜兜转转了好久才到 ApplicationContext 接口，同样的，我们也可以使用绿颜色的 <strong>FileSystemXmlApplicationContext</strong> 和 <strong>AnnotationConfigApplicationContext</strong> 这两个类。</p>
<p><strong>FileSystemXmlApplicationContext</strong> 的构造函数需要一个 xml 配置文件在系统中的路径，其他和 ClassPathXmlApplicationContext 基本上一样。</p>
<p><strong>AnnotationConfigApplicationContext</strong> 是基于注解来使用的，它不需要配置文件，采用 java 配置类和各种注解来配置，是比较简单的方式，也是大势所趋吧。</p>
<p>不过本文旨在帮助大家理解整个构建流程，所以决定使用 ClassPathXmlApplicationContext 进行分析。</p>
<p>我们先来一个简单的例子来看看怎么实例化 ApplicationContext。</p>
<p>首先，定义一个接口：</p>
<pre><code class="language-java hljs"><span class="hljs-keyword"><span class="hljs-keyword">public</span></span> <span class="hljs-class"><span class="hljs-keyword"><span class="hljs-class"><span class="hljs-keyword">interface</span></span></span><span class="hljs-class"> </span><span class="hljs-title"><span class="hljs-class"><span class="hljs-title">MessageService</span></span></span><span class="hljs-class"> </span></span>{
    <span class="hljs-function"><span class="hljs-function">String </span><span class="hljs-title"><span class="hljs-function"><span class="hljs-title">getMessage</span></span></span><span class="hljs-params"><span class="hljs-function"><span class="hljs-params">()</span></span></span></span>;
}</code></pre>
<p>定义接口实现类：</p>
<pre><code class="language-java hljs"><span class="hljs-keyword"><span class="hljs-keyword">public</span></span> <span class="hljs-class"><span class="hljs-keyword"><span class="hljs-class"><span class="hljs-keyword">class</span></span></span><span class="hljs-class"> </span><span class="hljs-title"><span class="hljs-class"><span class="hljs-title">MessageServiceImpl</span></span></span><span class="hljs-class"> </span><span class="hljs-keyword"><span class="hljs-class"><span class="hljs-keyword">implements</span></span></span><span class="hljs-class"> </span><span class="hljs-title"><span class="hljs-class"><span class="hljs-title">MessageService</span></span></span><span class="hljs-class"> </span></span>{

    <span class="hljs-function"><span class="hljs-keyword"><span class="hljs-function"><span class="hljs-keyword">public</span></span></span><span class="hljs-function"> String </span><span class="hljs-title"><span class="hljs-function"><span class="hljs-title">getMessage</span></span></span><span class="hljs-params"><span class="hljs-function"><span class="hljs-params">()</span></span></span><span class="hljs-function"> </span></span>{
        <span class="hljs-keyword"><span class="hljs-keyword">return</span></span> <span class="hljs-string"><span class="hljs-string">"hello world"</span></span>;
    }
}</code></pre>
<p>接下来，我们在 <strong>resources</strong> 目录新建一个配置文件，文件名随意，通常叫 application.xml 或 application-xxx.xml 就可以了：</p>
<pre><code class="language-xml hljs"><span class="hljs-meta"><span class="hljs-meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span>
<span class="hljs-tag"><span class="hljs-tag">&lt;</span><span class="hljs-name"><span class="hljs-tag"><span class="hljs-name">beans</span></span></span><span class="hljs-tag"> </span><span class="hljs-attr"><span class="hljs-tag"><span class="hljs-attr">xmlns:xsi</span></span></span><span class="hljs-tag">=</span><span class="hljs-string"><span class="hljs-tag"><span class="hljs-string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><span class="hljs-tag">
       </span><span class="hljs-attr"><span class="hljs-tag"><span class="hljs-attr">xmlns</span></span></span><span class="hljs-tag">=</span><span class="hljs-string"><span class="hljs-tag"><span class="hljs-string">"http://www.springframework.org/schema/beans"</span></span></span><span class="hljs-tag">
       </span><span class="hljs-attr"><span class="hljs-tag"><span class="hljs-attr">xsi:schemaLocation</span></span></span><span class="hljs-tag">=</span><span class="hljs-string"><span class="hljs-tag"><span class="hljs-string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"</span></span></span><span class="hljs-tag"> </span><span class="hljs-attr"><span class="hljs-tag"><span class="hljs-attr">default-autowire</span></span></span><span class="hljs-tag">=</span><span class="hljs-string"><span class="hljs-tag"><span class="hljs-string">"byName"</span></span></span><span class="hljs-tag">&gt;</span></span>

    <span class="hljs-tag"><span class="hljs-tag">&lt;</span><span class="hljs-name"><span class="hljs-tag"><span class="hljs-name">bean</span></span></span><span class="hljs-tag"> </span><span class="hljs-attr"><span class="hljs-tag"><span class="hljs-attr">id</span></span></span><span class="hljs-tag">=</span><span class="hljs-string"><span class="hljs-tag"><span class="hljs-string">"messageService"</span></span></span><span class="hljs-tag"> </span><span class="hljs-attr"><span class="hljs-tag"><span class="hljs-attr">class</span></span></span><span class="hljs-tag">=</span><span class="hljs-string"><span class="hljs-tag"><span class="hljs-string">"com.javadoop.example.MessageServiceImpl"</span></span></span><span class="hljs-tag">/&gt;</span></span>
<span class="hljs-tag"><span class="hljs-tag">&lt;/</span><span class="hljs-name"><span class="hljs-tag"><span class="hljs-name">beans</span></span></span><span class="hljs-tag">&gt;</span></span></code></pre>
<p>这样，我们就可以跑起来了：</p>
<pre><code class="language-java hljs"><span class="hljs-keyword"><span class="hljs-keyword">public</span></span> <span class="hljs-class"><span class="hljs-keyword"><span class="hljs-class"><span class="hljs-keyword">class</span></span></span><span class="hljs-class"> </span><span class="hljs-title"><span class="hljs-class"><span class="hljs-title">App</span></span></span><span class="hljs-class"> </span></span>{
    <span class="hljs-function"><span class="hljs-keyword"><span class="hljs-function"><span class="hljs-keyword">public</span></span></span><span class="hljs-function"> </span><span class="hljs-keyword"><span class="hljs-function"><span class="hljs-keyword">static</span></span></span><span class="hljs-function"> </span><span class="hljs-keyword"><span class="hljs-function"><span class="hljs-keyword">void</span></span></span><span class="hljs-function"> </span><span class="hljs-title"><span class="hljs-function"><span class="hljs-title">main</span></span></span><span class="hljs-params"><span class="hljs-function"><span class="hljs-params">(String[] args)</span></span></span><span class="hljs-function"> </span></span>{
        <span class="hljs-comment"><span class="hljs-comment">// 用我们的配置文件来启动一个 ApplicationContext</span></span>
        ApplicationContext context = <span class="hljs-keyword"><span class="hljs-keyword">new</span></span> ClassPathXmlApplicationContext(<span class="hljs-string"><span class="hljs-string">"classpath:application.xml"</span></span>);

        System.out.println(<span class="hljs-string"><span class="hljs-string">"context 启动成功"</span></span>);

        <span class="hljs-comment"><span class="hljs-comment">// 从 context 中取出我们的 Bean，而不是用 new MessageServiceImpl() 这种方式</span></span>
        MessageService messageService = context.getBean(MessageService.class);
        <span class="hljs-comment"><span class="hljs-comment">// 这句将输出: hello world</span></span>
        System.out.println(messageService.getMessage());
    }
}</code></pre>
<p>以上例子很简单，不过也够引出本文的主题了，就是怎么样通过配置文件来启动 Spring 的 ApplicationContext？也就是我们今天要分析的 IOC 的核心了。ApplicationContext 启动过程中，会负责创建实例 Bean，往各个 Bean 中注入依赖等。</p>
<h2 id="beanfactory-简介">BeanFactory 简介</h2>
<p>BeanFactory，从名字上也很好理解，生产 bean 的工厂，它负责生产和管理各个 bean 实例。</p>
<p>初学者可别以为我之前说那么多和 BeanFactory 无关，前面说的 ApplicationContext 其实就是一个 BeanFactory。我们来看下和 BeanFactory 接口相关的主要的继承结构：</p>
<p><img src="./Spring IOC 容器源码分析_files/2.png" alt="2"></p>
<p>我想，大家看完这个图以后，可能就不是很开心了。ApplicationContext 往下的继承结构前面一张图说过了，这里就不重复了。这张图呢，背下来肯定是不需要的，有几个重点和大家说明下就好。</p>
<ol>
<li>ApplicationContext 继承了 ListableBeanFactory，这个 Listable 的意思就是，通过这个接口，我们可以获取多个 Bean，大家看源码会发现，最顶层 BeanFactory 接口的方法都是获取单个 Bean 的。</li>
<li>ApplicationContext 继承了 HierarchicalBeanFactory，Hierarchical 单词本身已经能说明问题了，也就是说我们可以在应用中起多个 BeanFactory，然后可以将各个 BeanFactory 设置为父子关系。</li>
<li>AutowireCapableBeanFactory 这个名字中的 Autowire 大家都非常熟悉，它就是用来自动装配 Bean 用的，但是仔细看上图，ApplicationContext 并没有继承它，不过不用担心，不使用继承，不代表不可以使用组合，如果你看到 ApplicationContext 接口定义中的最后一个方法 getAutowireCapableBeanFactory() 就知道了。</li>
<li>ConfigurableListableBeanFactory 也是一个特殊的接口，看图，特殊之处在于它继承了第二层所有的三个接口，而 ApplicationContext 没有。这点之后会用到。</li>
<li>请先不用花时间在其他的接口和类上，先理解我说的这几点就可以了。</li>
</ol>
<p>然后，请读者打开编辑器，翻一下 BeanFactory、ListableBeanFactory、HierarchicalBeanFactory、AutowireCapableBeanFactory、ApplicationContext 这几个接口的代码，大概看一下各个接口中的方法，大家心里要有底，限于篇幅，我就不贴代码介绍了。</p>
<h2 id="启动过程分析">启动过程分析</h2>
<p>下面将会是冗长的代码分析，记住，一定要自己打开源码来看，不然纯看是很累的。</p>
<p>第一步，我们肯定要从 ClassPathXmlApplicationContext 的构造方法说起。</p>
<pre><code class="language-java hljs"><span class="hljs-keyword"><span class="hljs-keyword">public</span></span> <span class="hljs-class"><span class="hljs-keyword"><span class="hljs-class"><span class="hljs-keyword">class</span></span></span><span class="hljs-class"> </span><span class="hljs-title"><span class="hljs-class"><span class="hljs-title">ClassPathXmlApplicationContext</span></span></span><span class="hljs-class"> </span><span class="hljs-keyword"><span class="hljs-class"><span class="hljs-keyword">extends</span></span></span><span class="hljs-class"> </span><span class="hljs-title"><span class="hljs-class"><span class="hljs-title">AbstractXmlApplicationContext</span></span></span><span class="hljs-class"> </span></span>{
  <span class="hljs-keyword"><span class="hljs-keyword">private</span></span> Resource[] configResources;

  <span class="hljs-comment"><span class="hljs-comment">// 如果已经有 ApplicationContext 并需要配置成父子关系，那么调用这个构造方法</span></span>
  <span class="hljs-function"><span class="hljs-keyword"><span class="hljs-function"><span class="hljs-keyword">public</span></span></span><span class="hljs-function"> </span><span class="hljs-title"><span class="hljs-function"><span class="hljs-title">ClassPathXmlApplicationContext</span></span></span><span class="hljs-params"><span class="hljs-function"><span class="hljs-params">(ApplicationContext parent)</span></span></span><span class="hljs-function"> </span></span>{
    <span class="hljs-keyword"><span class="hljs-keyword">super</span></span>(parent);
  }
  ...
  <span class="hljs-function"><span class="hljs-keyword"><span class="hljs-function"><span class="hljs-keyword">public</span></span></span><span class="hljs-function"> </span><span class="hljs-title"><span class="hljs-function"><span class="hljs-title">ClassPathXmlApplicationContext</span></span></span><span class="hljs-params"><span class="hljs-function"><span class="hljs-params">(String[] configLocations, </span></span><span class="hljs-keyword"><span class="hljs-function"><span class="hljs-params"><span class="hljs-keyword">boolean</span></span></span></span><span class="hljs-function"><span class="hljs-params"> refresh, ApplicationContext parent)</span></span></span><span class="hljs-function">
      </span><span class="hljs-keyword"><span class="hljs-function"><span class="hljs-keyword">throws</span></span></span><span class="hljs-function"> BeansException </span></span>{

    <span class="hljs-keyword"><span class="hljs-keyword">super</span></span>(parent);
    <span class="hljs-comment"><span class="hljs-comment">// 根据提供的路径，处理成配置文件数组(以分号、逗号、空格、tab、换行符分割)</span></span>
    setConfigLocations(configLocations);
    <span class="hljs-keyword"><span class="hljs-keyword">if</span></span> (refresh) {
      refresh(); <span class="hljs-comment"><span class="hljs-comment">// 核心方法</span></span>
    }
  }
    ...
}</code></pre>
<p>接下来，就是 refresh()，这里简单说下为什么是 refresh()，而不是 init() 这种名字的方法。因为 ApplicationContext 建立起来以后，其实我们是可以通过调用 refresh() 这个方法重建的，refresh() 会将原来的 ApplicationContext 销毁，然后再重新执行一次初始化操作。</p>
<p>往下看，refresh() 方法里面调用了那么多方法，就知道肯定不简单了，请读者先看个大概，细节之后会详细说。</p>
<pre><code class="language-java hljs"><span class="hljs-meta"><span class="hljs-meta">@Override</span></span>
<span class="hljs-function"><span class="hljs-keyword"><span class="hljs-function"><span class="hljs-keyword">public</span></span></span><span class="hljs-function"> </span><span class="hljs-keyword"><span class="hljs-function"><span class="hljs-keyword">void</span></span></span><span class="hljs-function"> </span><span class="hljs-title"><span class="hljs-function"><span class="hljs-title">refresh</span></span></span><span class="hljs-params"><span class="hljs-function"><span class="hljs-params">()</span></span></span><span class="hljs-function"> </span><span class="hljs-keyword"><span class="hljs-function"><span class="hljs-keyword">throws</span></span></span><span class="hljs-function"> BeansException, IllegalStateException </span></span>{
   <span class="hljs-comment"><span class="hljs-comment">// 来个锁，不然 refresh() 还没结束，你又来个启动或销毁容器的操作，那不就乱套了嘛</span></span>
   <span class="hljs-keyword"><span class="hljs-keyword">synchronized</span></span> (<span class="hljs-keyword"><span class="hljs-keyword">this</span></span>.startupShutdownMonitor) {

      <span class="hljs-comment"><span class="hljs-comment">// 准备工作，记录下容器的启动时间、标记“已启动”状态、处理配置文件中的占位符</span></span>
      prepareRefresh();

      <span class="hljs-comment"><span class="hljs-comment">// 这步比较关键，这步完成后，配置文件就会解析成一个个 Bean 定义，注册到 BeanFactory 中，</span></span>
      <span class="hljs-comment"><span class="hljs-comment">// 当然，这里说的 Bean 还没有初始化，只是配置信息都提取出来了，</span></span>
      <span class="hljs-comment"><span class="hljs-comment">// 注册也只是将这些信息都保存到了注册中心(说到底核心是一个 beanName-&gt; beanDefinition 的 map)</span></span>
      ConfigurableListableBeanFactory beanFactory = obtainFreshBeanFactory();

      <span class="hljs-comment"><span class="hljs-comment">// 设置 BeanFactory 的类加载器，添加几个 BeanPostProcessor，手动注册几个特殊的 bean</span></span>
      <span class="hljs-comment"><span class="hljs-comment">// 这块待会会展开说</span></span>
      prepareBeanFactory(beanFactory);

      <span class="hljs-keyword"><span class="hljs-keyword">try</span></span> {
         <span class="hljs-comment"><span class="hljs-comment">// 【这里需要知道 BeanFactoryPostProcessor 这个知识点，Bean 如果实现了此接口，</span></span>
         <span class="hljs-comment"><span class="hljs-comment">// 那么在容器初始化以后，Spring 会负责调用里面的 postProcessBeanFactory 方法。】</span></span>

         <span class="hljs-comment"><span class="hljs-comment">// 这里是提供给子类的扩展点，到这里的时候，所有的 Bean 都加载、注册完成了，但是都还没有初始化</span></span>
         <span class="hljs-comment"><span class="hljs-comment">// 具体的子类可以在这步的时候添加一些特殊的 BeanFactoryPostProcessor 的实现类或做点什么事</span></span>
         postProcessBeanFactory(beanFactory);
         <span class="hljs-comment"><span class="hljs-comment">// 调用 BeanFactoryPostProcessor 各个实现类的 postProcessBeanFactory(factory) 方法</span></span>
         invokeBeanFactoryPostProcessors(beanFactory);

         <span class="hljs-comment"><span class="hljs-comment">// 注册 BeanPostProcessor 的实现类，注意看和 BeanFactoryPostProcessor 的区别</span></span>
         <span class="hljs-comment"><span class="hljs-comment">// 此接口两个方法: postProcessBeforeInitialization 和 postProcessAfterInitialization</span></span>
         <span class="hljs-comment"><span class="hljs-comment">// 两个方法分别在 Bean 初始化之前和初始化之后得到执行。注意，到这里 Bean 还没初始化</span></span>
         registerBeanPostProcessors(beanFactory);

         <span class="hljs-comment"><span class="hljs-comment">// 初始化当前 ApplicationContext 的 MessageSource，国际化这里就不展开说了，不然没完没了了</span></span>
         initMessageSource();

         <span class="hljs-comment"><span class="hljs-comment">// 初始化当前 ApplicationContext 的事件广播器，这里也不展开了</span></span>
         initApplicationEventMulticaster();

         <span class="hljs-comment"><span class="hljs-comment">// 从方法名就可以知道，典型的模板方法(钩子方法)，</span></span>
         <span class="hljs-comment"><span class="hljs-comment">// 具体的子类可以在这里初始化一些特殊的 Bean（在初始化 singleton beans 之前）</span></span>
         onRefresh();

         <span class="hljs-comment"><span class="hljs-comment">// 注册事件监听器，监听器需要实现 ApplicationListener 接口。这也不是我们的重点，过</span></span>
         registerListeners();

         <span class="hljs-comment"><span class="hljs-comment">// 重点，重点，重点</span></span>
         <span class="hljs-comment"><span class="hljs-comment">// 初始化所有的 singleton beans</span></span>
         <span class="hljs-comment"><span class="hljs-comment">//（lazy-init 的除外）</span></span>
         finishBeanFactoryInitialization(beanFactory);

         <span class="hljs-comment"><span class="hljs-comment">// 最后，广播事件，ApplicationContext 初始化完成</span></span>
         finishRefresh();
      }

      <span class="hljs-keyword"><span class="hljs-keyword">catch</span></span> (BeansException ex) {
         <span class="hljs-keyword"><span class="hljs-keyword">if</span></span> (logger.isWarnEnabled()) {
            logger.warn(<span class="hljs-string"><span class="hljs-string">"Exception encountered during context initialization - "</span></span> +
                  <span class="hljs-string"><span class="hljs-string">"cancelling refresh attempt: "</span></span> + ex);
         }

         <span class="hljs-comment"><span class="hljs-comment">// Destroy already created singletons to avoid dangling resources.</span></span>
         <span class="hljs-comment"><span class="hljs-comment">// 销毁已经初始化的 singleton 的 Beans，以免有些 bean 会一直占用资源</span></span>
         destroyBeans();

         <span class="hljs-comment"><span class="hljs-comment">// Reset 'active' flag.</span></span>
         cancelRefresh(ex);

         <span class="hljs-comment"><span class="hljs-comment">// 把异常往外抛</span></span>
         <span class="hljs-keyword"><span class="hljs-keyword">throw</span></span> ex;
      }

      <span class="hljs-keyword"><span class="hljs-keyword">finally</span></span> {
         <span class="hljs-comment"><span class="hljs-comment">// Reset common introspection caches in Spring's core, since we</span></span>
         <span class="hljs-comment"><span class="hljs-comment">// might not ever need metadata for singleton beans anymore...</span></span>
         resetCommonCaches();
      }
   }
}</code></pre>
<p>下面，我们开始一步步来肢解这个 refresh() 方法。</p>
<h3 id="创建-bean-容器前的准备工作">创建 Bean 容器前的准备工作</h3>
<p>这个比较简单，直接看代码中的几个注释即可。</p>
<pre><code class="language-java hljs"><span class="hljs-function"><span class="hljs-keyword"><span class="hljs-function"><span class="hljs-keyword">protected</span></span></span><span class="hljs-function"> </span><span class="hljs-keyword"><span class="hljs-function"><span class="hljs-keyword">void</span></span></span><span class="hljs-function"> </span><span class="hljs-title"><span class="hljs-function"><span class="hljs-title">prepareRefresh</span></span></span><span class="hljs-params"><span class="hljs-function"><span class="hljs-params">()</span></span></span><span class="hljs-function"> </span></span>{
   <span class="hljs-comment"><span class="hljs-comment">// 记录启动时间，</span></span>
   <span class="hljs-comment"><span class="hljs-comment">// 将 active 属性设置为 true，closed 属性设置为 false，它们都是 AtomicBoolean 类型</span></span>
   <span class="hljs-keyword"><span class="hljs-keyword">this</span></span>.startupDate = System.currentTimeMillis();
   <span class="hljs-keyword"><span class="hljs-keyword">this</span></span>.closed.set(<span class="hljs-keyword"><span class="hljs-keyword">false</span></span>);
   <span class="hljs-keyword"><span class="hljs-keyword">this</span></span>.active.set(<span class="hljs-keyword"><span class="hljs-keyword">true</span></span>);

   <span class="hljs-keyword"><span class="hljs-keyword">if</span></span> (logger.isInfoEnabled()) {
      logger.info(<span class="hljs-string"><span class="hljs-string">"Refreshing "</span></span> + <span class="hljs-keyword"><span class="hljs-keyword">this</span></span>);
   }

   <span class="hljs-comment"><span class="hljs-comment">// Initialize any placeholder property sources in the context environment</span></span>
   initPropertySources();

   <span class="hljs-comment"><span class="hljs-comment">// 校验 xml 配置文件</span></span>
   getEnvironment().validateRequiredProperties();

   <span class="hljs-keyword"><span class="hljs-keyword">this</span></span>.earlyApplicationEvents = <span class="hljs-keyword"><span class="hljs-keyword">new</span></span> LinkedHashSet&lt;ApplicationEvent&gt;();
}</code></pre>
<h3 id="创建-bean-容器，加载并注册-bean">创建 Bean 容器，加载并注册 Bean</h3>
<p>我们回到 refresh() 方法中的下一行 obtainFreshBeanFactory()。</p>
<p>注意，这个方法是全文最重要的部分之一，这里将会初始化 BeanFactory、加载 Bean、注册 Bean 等等。</p>
<p>当然，这步结束后，Bean 并没有完成初始化。这里指的是 Bean 实例并未在这一步生成。</p>
<p>// AbstractApplicationContext.java</p>
<pre><code class="language-java hljs"><span class="hljs-function"><span class="hljs-keyword"><span class="hljs-function"><span class="hljs-keyword">protected</span></span></span><span class="hljs-function"> ConfigurableListableBeanFactory </span><span class="hljs-title"><span class="hljs-function"><span class="hljs-title">obtainFreshBeanFactory</span></span></span><span class="hljs-params"><span class="hljs-function"><span class="hljs-params">()</span></span></span><span class="hljs-function"> </span></span>{
   <span class="hljs-comment"><span class="hljs-comment">// 关闭旧的 BeanFactory (如果有)，创建新的 BeanFactory，加载 Bean 定义、注册 Bean 等等</span></span>
   refreshBeanFactory();

   <span class="hljs-comment"><span class="hljs-comment">// 返回刚刚创建的 BeanFactory</span></span>
   ConfigurableListableBeanFactory beanFactory = getBeanFactory();
   <span class="hljs-keyword"><span class="hljs-keyword">if</span></span> (logger.isDebugEnabled()) {
      logger.debug(<span class="hljs-string"><span class="hljs-string">"Bean factory for "</span></span> + getDisplayName() + <span class="hljs-string"><span class="hljs-string">": "</span></span> + beanFactory);
   }
   <span class="hljs-keyword"><span class="hljs-keyword">return</span></span> beanFactory;
}</code></pre>
<p>// AbstractRefreshableApplicationContext.java 120</p>
<pre><code class="language-java hljs"><span class="hljs-meta"><span class="hljs-meta">@Override</span></span>
<span class="hljs-function"><span class="hljs-keyword"><span class="hljs-function"><span class="hljs-keyword">protected</span></span></span><span class="hljs-function"> </span><span class="hljs-keyword"><span class="hljs-function"><span class="hljs-keyword">final</span></span></span><span class="hljs-function"> </span><span class="hljs-keyword"><span class="hljs-function"><span class="hljs-keyword">void</span></span></span><span class="hljs-function"> </span><span class="hljs-title"><span class="hljs-function"><span class="hljs-title">refreshBeanFactory</span></span></span><span class="hljs-params"><span class="hljs-function"><span class="hljs-params">()</span></span></span><span class="hljs-function"> </span><span class="hljs-keyword"><span class="hljs-function"><span class="hljs-keyword">throws</span></span></span><span class="hljs-function"> BeansException </span></span>{
   <span class="hljs-comment"><span class="hljs-comment">// 如果 ApplicationContext 中已经加载过 BeanFactory 了，销毁所有 Bean，关闭 BeanFactory</span></span>
   <span class="hljs-comment"><span class="hljs-comment">// 注意，应用中 BeanFactory 本来就是可以多个的，这里可不是说应用全局是否有 BeanFactory，而是当前</span></span>
   <span class="hljs-comment"><span class="hljs-comment">// ApplicationContext 是否有 BeanFactory</span></span>
   <span class="hljs-keyword"><span class="hljs-keyword">if</span></span> (hasBeanFactory()) {
      destroyBeans();
      closeBeanFactory();
   }
   <span class="hljs-keyword"><span class="hljs-keyword">try</span></span> {
      <span class="hljs-comment"><span class="hljs-comment">// 初始化一个 DefaultListableBeanFactory，为什么用这个，我们马上说。</span></span>
      DefaultListableBeanFactory beanFactory = createBeanFactory();
      <span class="hljs-comment"><span class="hljs-comment">// 用于 BeanFactory 的序列化，我想不部分人应该都用不到</span></span>
      beanFactory.setSerializationId(getId());

      <span class="hljs-comment"><span class="hljs-comment">// 下面这两个方法很重要，别跟丢了，具体细节之后说</span></span>
      <span class="hljs-comment"><span class="hljs-comment">// 设置 BeanFactory 的两个配置属性：是否允许 Bean 覆盖、是否允许循环引用</span></span>
      customizeBeanFactory(beanFactory);

      <span class="hljs-comment"><span class="hljs-comment">// 加载 Bean 到 BeanFactory 中</span></span>
      loadBeanDefinitions(beanFactory);
      <span class="hljs-keyword"><span class="hljs-keyword">synchronized</span></span> (<span class="hljs-keyword"><span class="hljs-keyword">this</span></span>.beanFactoryMonitor) {
         <span class="hljs-keyword"><span class="hljs-keyword">this</span></span>.beanFactory = beanFactory;
      }
   }
   <span class="hljs-keyword"><span class="hljs-keyword">catch</span></span> (IOException ex) {
      <span class="hljs-keyword"><span class="hljs-keyword">throw</span></span> <span class="hljs-keyword"><span class="hljs-keyword">new</span></span> ApplicationContextException(<span class="hljs-string"><span class="hljs-string">"I/O error parsing bean definition source for "</span></span> + getDisplayName(), ex);
   }
}</code></pre>
<blockquote>
<p>看到这里的时候，我觉得读者就应该站在高处看 ApplicationContext 了，ApplicationContext 继承自 BeanFactory，但是它不应该被理解为 BeanFactory 的实现类，而是说其内部持有一个实例化的 BeanFactory（DefaultListableBeanFactory）。以后所有的 BeanFactory 相关的操作其实是委托给这个实例来处理的。</p>
</blockquote>
<p>我们说说为什么选择实例化 <strong>DefaultListableBeanFactory</strong> ？前面我们说了有个很重要的接口 ConfigurableListableBeanFactory，它实现了 BeanFactory 下面一层的所有三个接口，我把之前的继承图再拿过来大家再仔细看一下：</p>
<p><img src="./Spring IOC 容器源码分析_files/3.png" alt="3"></p>
<p>我们可以看到 ConfigurableListableBeanFactory 只有一个实现类 DefaultListableBeanFactory，而且实现类 DefaultListableBeanFactory 还通过实现右边的 AbstractAutowireCapableBeanFactory 通吃了右路。所以结论就是，最底下这个家伙 DefaultListableBeanFactory 基本上是最牛的 BeanFactory 了，这也是为什么这边会使用这个类来实例化的原因。</p>
<blockquote>
<p>如果你想要在程序运行的时候动态往 Spring IOC 容器注册新的 bean，就会使用到这个类。那我们怎么在运行时获得这个实例呢？</p>
<p>之前我们说过 ApplicationContext 接口能获取到 AutowireCapableBeanFactory，就是最右上角那个，然后它向下转型就能得到 DefaultListableBeanFactory 了。</p>
</blockquote>
<p>在继续往下之前，我们需要先了解 BeanDefinition。<strong>我们说 BeanFactory 是 Bean 容器，那么 Bean 又是什么呢？</strong></p>
<p>这里的 BeanDefinition 就是我们所说的 Spring 的 Bean，我们自己定义的各个 Bean 其实会转换成一个个 BeanDefinition 存在于 Spring 的 BeanFactory 中。</p>
<p>所以，如果有人问你 Bean 是什么的时候，你要知道 Bean 在代码层面上可以认为是 BeanDefinition 的实例。</p>
<blockquote>
<p>BeanDefinition 中保存了我们的 Bean 信息，比如这个 Bean 指向的是哪个类、是否是单例的、是否懒加载、这个 Bean 依赖了哪些 Bean 等等。</p>
</blockquote>
<h4 id="beandefinition-接口定义">BeanDefinition 接口定义</h4>
<p>我们来看下 BeanDefinition 的接口定义：</p>
<pre><code class="language-java hljs"><span class="hljs-keyword"><span class="hljs-keyword">public</span></span> <span class="hljs-class"><span class="hljs-keyword"><span class="hljs-class"><span class="hljs-keyword">interface</span></span></span><span class="hljs-class"> </span><span class="hljs-title"><span class="hljs-class"><span class="hljs-title">BeanDefinition</span></span></span><span class="hljs-class"> </span><span class="hljs-keyword"><span class="hljs-class"><span class="hljs-keyword">extends</span></span></span><span class="hljs-class"> </span><span class="hljs-title"><span class="hljs-class"><span class="hljs-title">AttributeAccessor</span></span></span><span class="hljs-class">, </span><span class="hljs-title"><span class="hljs-class"><span class="hljs-title">BeanMetadataElement</span></span></span><span class="hljs-class"> </span></span>{

   <span class="hljs-comment"><span class="hljs-comment">// 我们可以看到，默认只提供 sington 和 prototype 两种，</span></span>
   <span class="hljs-comment"><span class="hljs-comment">// 很多读者可能知道还有 request, session, globalSession, application, websocket 这几种，</span></span>
   <span class="hljs-comment"><span class="hljs-comment">// 不过，它们属于基于 web 的扩展。</span></span>
   String SCOPE_SINGLETON = ConfigurableBeanFactory.SCOPE_SINGLETON;
   String SCOPE_PROTOTYPE = ConfigurableBeanFactory.SCOPE_PROTOTYPE;

   <span class="hljs-comment"><span class="hljs-comment">// 比较不重要，直接跳过吧</span></span>
   <span class="hljs-keyword"><span class="hljs-keyword">int</span></span> ROLE_APPLICATION = <span class="hljs-number"><span class="hljs-number">0</span></span>;
   <span class="hljs-keyword"><span class="hljs-keyword">int</span></span> ROLE_SUPPORT = <span class="hljs-number"><span class="hljs-number">1</span></span>;
   <span class="hljs-keyword"><span class="hljs-keyword">int</span></span> ROLE_INFRASTRUCTURE = <span class="hljs-number"><span class="hljs-number">2</span></span>;

   <span class="hljs-comment"><span class="hljs-comment">// 设置父 Bean，这里涉及到 bean 继承，不是 java 继承。请参见附录的详细介绍</span></span>
   <span class="hljs-comment"><span class="hljs-comment">// 一句话就是：继承父 Bean 的配置信息而已</span></span>
   <span class="hljs-function"><span class="hljs-keyword"><span class="hljs-function"><span class="hljs-keyword">void</span></span></span><span class="hljs-function"> </span><span class="hljs-title"><span class="hljs-function"><span class="hljs-title">setParentName</span></span></span><span class="hljs-params"><span class="hljs-function"><span class="hljs-params">(String parentName)</span></span></span></span>;

   <span class="hljs-comment"><span class="hljs-comment">// 获取父 Bean</span></span>
   <span class="hljs-function"><span class="hljs-function">String </span><span class="hljs-title"><span class="hljs-function"><span class="hljs-title">getParentName</span></span></span><span class="hljs-params"><span class="hljs-function"><span class="hljs-params">()</span></span></span></span>;

   <span class="hljs-comment"><span class="hljs-comment">// 设置 Bean 的类名称，将来是要通过反射来生成实例的</span></span>
   <span class="hljs-function"><span class="hljs-keyword"><span class="hljs-function"><span class="hljs-keyword">void</span></span></span><span class="hljs-function"> </span><span class="hljs-title"><span class="hljs-function"><span class="hljs-title">setBeanClassName</span></span></span><span class="hljs-params"><span class="hljs-function"><span class="hljs-params">(String beanClassName)</span></span></span></span>;

   <span class="hljs-comment"><span class="hljs-comment">// 获取 Bean 的类名称</span></span>
   <span class="hljs-function"><span class="hljs-function">String </span><span class="hljs-title"><span class="hljs-function"><span class="hljs-title">getBeanClassName</span></span></span><span class="hljs-params"><span class="hljs-function"><span class="hljs-params">()</span></span></span></span>;


   <span class="hljs-comment"><span class="hljs-comment">// 设置 bean 的 scope</span></span>
   <span class="hljs-function"><span class="hljs-keyword"><span class="hljs-function"><span class="hljs-keyword">void</span></span></span><span class="hljs-function"> </span><span class="hljs-title"><span class="hljs-function"><span class="hljs-title">setScope</span></span></span><span class="hljs-params"><span class="hljs-function"><span class="hljs-params">(String scope)</span></span></span></span>;

   <span class="hljs-function"><span class="hljs-function">String </span><span class="hljs-title"><span class="hljs-function"><span class="hljs-title">getScope</span></span></span><span class="hljs-params"><span class="hljs-function"><span class="hljs-params">()</span></span></span></span>;

   <span class="hljs-comment"><span class="hljs-comment">// 设置是否懒加载</span></span>
   <span class="hljs-function"><span class="hljs-keyword"><span class="hljs-function"><span class="hljs-keyword">void</span></span></span><span class="hljs-function"> </span><span class="hljs-title"><span class="hljs-function"><span class="hljs-title">setLazyInit</span></span></span><span class="hljs-params"><span class="hljs-function"><span class="hljs-params">(</span></span><span class="hljs-keyword"><span class="hljs-function"><span class="hljs-params"><span class="hljs-keyword">boolean</span></span></span></span><span class="hljs-function"><span class="hljs-params"> lazyInit)</span></span></span></span>;

   <span class="hljs-function"><span class="hljs-keyword"><span class="hljs-function"><span class="hljs-keyword">boolean</span></span></span><span class="hljs-function"> </span><span class="hljs-title"><span class="hljs-function"><span class="hljs-title">isLazyInit</span></span></span><span class="hljs-params"><span class="hljs-function"><span class="hljs-params">()</span></span></span></span>;

   <span class="hljs-comment"><span class="hljs-comment">// 设置该 Bean 依赖的所有的 Bean，注意，这里的依赖不是指属性依赖(如 @Autowire 标记的)，</span></span>
   <span class="hljs-comment"><span class="hljs-comment">// 是 depends-on="" 属性设置的值。</span></span>
   <span class="hljs-function"><span class="hljs-keyword"><span class="hljs-function"><span class="hljs-keyword">void</span></span></span><span class="hljs-function"> </span><span class="hljs-title"><span class="hljs-function"><span class="hljs-title">setDependsOn</span></span></span><span class="hljs-params"><span class="hljs-function"><span class="hljs-params">(String... dependsOn)</span></span></span></span>;

   <span class="hljs-comment"><span class="hljs-comment">// 返回该 Bean 的所有依赖</span></span>
   String[] getDependsOn();

   <span class="hljs-comment"><span class="hljs-comment">// 设置该 Bean 是否可以注入到其他 Bean 中，只对根据类型注入有效，</span></span>
   <span class="hljs-comment"><span class="hljs-comment">// 如果根据名称注入，即使这边设置了 false，也是可以的</span></span>
   <span class="hljs-function"><span class="hljs-keyword"><span class="hljs-function"><span class="hljs-keyword">void</span></span></span><span class="hljs-function"> </span><span class="hljs-title"><span class="hljs-function"><span class="hljs-title">setAutowireCandidate</span></span></span><span class="hljs-params"><span class="hljs-function"><span class="hljs-params">(</span></span><span class="hljs-keyword"><span class="hljs-function"><span class="hljs-params"><span class="hljs-keyword">boolean</span></span></span></span><span class="hljs-function"><span class="hljs-params"> autowireCandidate)</span></span></span></span>;

   <span class="hljs-comment"><span class="hljs-comment">// 该 Bean 是否可以注入到其他 Bean 中</span></span>
   <span class="hljs-function"><span class="hljs-keyword"><span class="hljs-function"><span class="hljs-keyword">boolean</span></span></span><span class="hljs-function"> </span><span class="hljs-title"><span class="hljs-function"><span class="hljs-title">isAutowireCandidate</span></span></span><span class="hljs-params"><span class="hljs-function"><span class="hljs-params">()</span></span></span></span>;

   <span class="hljs-comment"><span class="hljs-comment">// 主要的。同一接口的多个实现，如果不指定名字的话，Spring 会优先选择设置 primary 为 true 的 bean</span></span>
   <span class="hljs-function"><span class="hljs-keyword"><span class="hljs-function"><span class="hljs-keyword">void</span></span></span><span class="hljs-function"> </span><span class="hljs-title"><span class="hljs-function"><span class="hljs-title">setPrimary</span></span></span><span class="hljs-params"><span class="hljs-function"><span class="hljs-params">(</span></span><span class="hljs-keyword"><span class="hljs-function"><span class="hljs-params"><span class="hljs-keyword">boolean</span></span></span></span><span class="hljs-function"><span class="hljs-params"> primary)</span></span></span></span>;

   <span class="hljs-comment"><span class="hljs-comment">// 是否是 primary 的</span></span>
   <span class="hljs-function"><span class="hljs-keyword"><span class="hljs-function"><span class="hljs-keyword">boolean</span></span></span><span class="hljs-function"> </span><span class="hljs-title"><span class="hljs-function"><span class="hljs-title">isPrimary</span></span></span><span class="hljs-params"><span class="hljs-function"><span class="hljs-params">()</span></span></span></span>;

   <span class="hljs-comment"><span class="hljs-comment">// 如果该 Bean 采用工厂方法生成，指定工厂名称。对工厂不熟悉的读者，请参加附录</span></span>
   <span class="hljs-comment"><span class="hljs-comment">// 一句话就是：有些实例不是用反射生成的，而是用工厂模式生成的</span></span>
   <span class="hljs-function"><span class="hljs-keyword"><span class="hljs-function"><span class="hljs-keyword">void</span></span></span><span class="hljs-function"> </span><span class="hljs-title"><span class="hljs-function"><span class="hljs-title">setFactoryBeanName</span></span></span><span class="hljs-params"><span class="hljs-function"><span class="hljs-params">(String factoryBeanName)</span></span></span></span>;
   <span class="hljs-comment"><span class="hljs-comment">// 获取工厂名称</span></span>
   <span class="hljs-function"><span class="hljs-function">String </span><span class="hljs-title"><span class="hljs-function"><span class="hljs-title">getFactoryBeanName</span></span></span><span class="hljs-params"><span class="hljs-function"><span class="hljs-params">()</span></span></span></span>;
   <span class="hljs-comment"><span class="hljs-comment">// 指定工厂类中的 工厂方法名称</span></span>
   <span class="hljs-function"><span class="hljs-keyword"><span class="hljs-function"><span class="hljs-keyword">void</span></span></span><span class="hljs-function"> </span><span class="hljs-title"><span class="hljs-function"><span class="hljs-title">setFactoryMethodName</span></span></span><span class="hljs-params"><span class="hljs-function"><span class="hljs-params">(String factoryMethodName)</span></span></span></span>;
   <span class="hljs-comment"><span class="hljs-comment">// 获取工厂类中的 工厂方法名称</span></span>
   <span class="hljs-function"><span class="hljs-function">String </span><span class="hljs-title"><span class="hljs-function"><span class="hljs-title">getFactoryMethodName</span></span></span><span class="hljs-params"><span class="hljs-function"><span class="hljs-params">()</span></span></span></span>;

   <span class="hljs-comment"><span class="hljs-comment">// 构造器参数</span></span>
   <span class="hljs-function"><span class="hljs-function">ConstructorArgumentValues </span><span class="hljs-title"><span class="hljs-function"><span class="hljs-title">getConstructorArgumentValues</span></span></span><span class="hljs-params"><span class="hljs-function"><span class="hljs-params">()</span></span></span></span>;

   <span class="hljs-comment"><span class="hljs-comment">// Bean 中的属性值，后面给 bean 注入属性值的时候会说到</span></span>
   <span class="hljs-function"><span class="hljs-function">MutablePropertyValues </span><span class="hljs-title"><span class="hljs-function"><span class="hljs-title">getPropertyValues</span></span></span><span class="hljs-params"><span class="hljs-function"><span class="hljs-params">()</span></span></span></span>;

   <span class="hljs-comment"><span class="hljs-comment">// 是否 singleton</span></span>
   <span class="hljs-function"><span class="hljs-keyword"><span class="hljs-function"><span class="hljs-keyword">boolean</span></span></span><span class="hljs-function"> </span><span class="hljs-title"><span class="hljs-function"><span class="hljs-title">isSingleton</span></span></span><span class="hljs-params"><span class="hljs-function"><span class="hljs-params">()</span></span></span></span>;

   <span class="hljs-comment"><span class="hljs-comment">// 是否 prototype</span></span>
   <span class="hljs-function"><span class="hljs-keyword"><span class="hljs-function"><span class="hljs-keyword">boolean</span></span></span><span class="hljs-function"> </span><span class="hljs-title"><span class="hljs-function"><span class="hljs-title">isPrototype</span></span></span><span class="hljs-params"><span class="hljs-function"><span class="hljs-params">()</span></span></span></span>;

   <span class="hljs-comment"><span class="hljs-comment">// 如果这个 Bean 是被设置为 abstract，那么不能实例化，</span></span>
   <span class="hljs-comment"><span class="hljs-comment">// 常用于作为 父bean 用于继承，其实也很少用......</span></span>
   <span class="hljs-function"><span class="hljs-keyword"><span class="hljs-function"><span class="hljs-keyword">boolean</span></span></span><span class="hljs-function"> </span><span class="hljs-title"><span class="hljs-function"><span class="hljs-title">isAbstract</span></span></span><span class="hljs-params"><span class="hljs-function"><span class="hljs-params">()</span></span></span></span>;

   <span class="hljs-function"><span class="hljs-keyword"><span class="hljs-function"><span class="hljs-keyword">int</span></span></span><span class="hljs-function"> </span><span class="hljs-title"><span class="hljs-function"><span class="hljs-title">getRole</span></span></span><span class="hljs-params"><span class="hljs-function"><span class="hljs-params">()</span></span></span></span>;
   <span class="hljs-function"><span class="hljs-function">String </span><span class="hljs-title"><span class="hljs-function"><span class="hljs-title">getDescription</span></span></span><span class="hljs-params"><span class="hljs-function"><span class="hljs-params">()</span></span></span></span>;
   <span class="hljs-function"><span class="hljs-function">String </span><span class="hljs-title"><span class="hljs-function"><span class="hljs-title">getResourceDescription</span></span></span><span class="hljs-params"><span class="hljs-function"><span class="hljs-params">()</span></span></span></span>;
   <span class="hljs-function"><span class="hljs-function">BeanDefinition </span><span class="hljs-title"><span class="hljs-function"><span class="hljs-title">getOriginatingBeanDefinition</span></span></span><span class="hljs-params"><span class="hljs-function"><span class="hljs-params">()</span></span></span></span>;
}</code></pre>
<blockquote>
<p>这个 BeanDefinition 其实已经包含很多的信息了，暂时不清楚所有的方法对应什么东西没关系，希望看完本文后读者可以彻底搞清楚里面的所有东西。</p>
<p>这里接口虽然那么多，但是没有类似 getInstance() 这种方法来获取我们定义的类的实例，真正的我们定义的类生成的实例到哪里去了呢？别着急，这个要很后面才能讲到。</p>
</blockquote>
<p>有了 BeanDefinition 的概念以后，我们再往下看 refreshBeanFactory() 方法中的剩余部分：</p>
<pre><code class="language-java hljs">customizeBeanFactory(beanFactory);
loadBeanDefinitions(beanFactory);</code></pre>
<p>虽然只有两个方法，但路还很长啊。。。</p>
<h4 id="customizebeanfactory">customizeBeanFactory</h4>
<p>customizeBeanFactory(beanFactory) 比较简单，就是配置是否允许 BeanDefinition 覆盖、是否允许循环引用。</p>
<pre><code class="language-java hljs"><span class="hljs-function"><span class="hljs-keyword"><span class="hljs-function"><span class="hljs-keyword">protected</span></span></span><span class="hljs-function"> </span><span class="hljs-keyword"><span class="hljs-function"><span class="hljs-keyword">void</span></span></span><span class="hljs-function"> </span><span class="hljs-title"><span class="hljs-function"><span class="hljs-title">customizeBeanFactory</span></span></span><span class="hljs-params"><span class="hljs-function"><span class="hljs-params">(DefaultListableBeanFactory beanFactory)</span></span></span><span class="hljs-function"> </span></span>{
   <span class="hljs-keyword"><span class="hljs-keyword">if</span></span> (<span class="hljs-keyword"><span class="hljs-keyword">this</span></span>.allowBeanDefinitionOverriding != <span class="hljs-keyword"><span class="hljs-keyword">null</span></span>) {
      <span class="hljs-comment"><span class="hljs-comment">// 是否允许 Bean 定义覆盖</span></span>
      beanFactory.setAllowBeanDefinitionOverriding(<span class="hljs-keyword"><span class="hljs-keyword">this</span></span>.allowBeanDefinitionOverriding);
   }
   <span class="hljs-keyword"><span class="hljs-keyword">if</span></span> (<span class="hljs-keyword"><span class="hljs-keyword">this</span></span>.allowCircularReferences != <span class="hljs-keyword"><span class="hljs-keyword">null</span></span>) {
      <span class="hljs-comment"><span class="hljs-comment">// 是否允许 Bean 间的循环依赖</span></span>
      beanFactory.setAllowCircularReferences(<span class="hljs-keyword"><span class="hljs-keyword">this</span></span>.allowCircularReferences);
   }
}</code></pre>
<p>BeanDefinition 的覆盖问题可能会有开发者碰到这个坑，就是在配置文件中定义 bean 时使用了相同的 id 或 name，默认情况下，allowBeanDefinitionOverriding 属性为 null，如果在同一配置文件中重复了，会抛错，但是如果不是同一配置文件中，会发生覆盖。</p>
<p>循环引用也很好理解：A 依赖 B，而 B 依赖 A。或 A 依赖 B，B 依赖 C，而 C 依赖 A。</p>
<p>默认情况下，Spring 允许循环依赖，当然如果你在 A 的构造方法中依赖 B，在 B 的构造方法中依赖 A 是不行的。</p>
<p>至于这两个属性怎么配置？我在附录中进行了介绍，尤其对于覆盖问题，很多人都希望禁止出现 Bean 覆盖，可是 Spring 默认是不同文件的时候可以覆盖的。</p>
<p>之后的源码中还会出现这两个属性，读者有个印象就可以了。</p>
<h4 id="加载-bean-loadbeandefinitions">加载 Bean: loadBeanDefinitions</h4>
<p>接下来是最重要的 loadBeanDefinitions(beanFactory) 方法了，这个方法将根据配置，加载各个 Bean，然后放到 BeanFactory 中。</p>
<p>读取配置的操作在 XmlBeanDefinitionReader 中，其负责加载配置、解析。</p>
<p>// AbstractXmlApplicationContext.java 80</p>
<pre><code class="language-java hljs"><span class="hljs-comment"><span class="hljs-comment">/** 我们可以看到，此方法将通过一个 XmlBeanDefinitionReader 实例来加载各个 Bean。*/</span></span>
<span class="hljs-meta"><span class="hljs-meta">@Override</span></span>
<span class="hljs-function"><span class="hljs-keyword"><span class="hljs-function"><span class="hljs-keyword">protected</span></span></span><span class="hljs-function"> </span><span class="hljs-keyword"><span class="hljs-function"><span class="hljs-keyword">void</span></span></span><span class="hljs-function"> </span><span class="hljs-title"><span class="hljs-function"><span class="hljs-title">loadBeanDefinitions</span></span></span><span class="hljs-params"><span class="hljs-function"><span class="hljs-params">(DefaultListableBeanFactory beanFactory)</span></span></span><span class="hljs-function"> </span><span class="hljs-keyword"><span class="hljs-function"><span class="hljs-keyword">throws</span></span></span><span class="hljs-function"> BeansException, IOException </span></span>{
   <span class="hljs-comment"><span class="hljs-comment">// 给这个 BeanFactory 实例化一个 XmlBeanDefinitionReader</span></span>
   XmlBeanDefinitionReader beanDefinitionReader = <span class="hljs-keyword"><span class="hljs-keyword">new</span></span> XmlBeanDefinitionReader(beanFactory);

   <span class="hljs-comment"><span class="hljs-comment">// Configure the bean definition reader with this context's</span></span>
   <span class="hljs-comment"><span class="hljs-comment">// resource loading environment.</span></span>
   beanDefinitionReader.setEnvironment(<span class="hljs-keyword"><span class="hljs-keyword">this</span></span>.getEnvironment());
   beanDefinitionReader.setResourceLoader(<span class="hljs-keyword"><span class="hljs-keyword">this</span></span>);
   beanDefinitionReader.setEntityResolver(<span class="hljs-keyword"><span class="hljs-keyword">new</span></span> ResourceEntityResolver(<span class="hljs-keyword"><span class="hljs-keyword">this</span></span>));

   <span class="hljs-comment"><span class="hljs-comment">// 初始化 BeanDefinitionReader，其实这个是提供给子类覆写的，</span></span>
   <span class="hljs-comment"><span class="hljs-comment">// 我看了一下，没有类覆写这个方法，我们姑且当做不重要吧</span></span>
   initBeanDefinitionReader(beanDefinitionReader);
   <span class="hljs-comment"><span class="hljs-comment">// 重点来了，继续往下</span></span>
   loadBeanDefinitions(beanDefinitionReader);
}</code></pre>
<p>现在还在这个类中，接下来用刚刚初始化的 Reader 开始来加载 xml 配置，这块代码读者可以选择性跳过，不是很重要。也就是说，下面这个代码块，读者可以很轻松地略过。</p>
<p>// AbstractXmlApplicationContext.java 120</p>
<pre><code class="language-java hljs"><span class="hljs-function"><span class="hljs-keyword"><span class="hljs-function"><span class="hljs-keyword">protected</span></span></span><span class="hljs-function"> </span><span class="hljs-keyword"><span class="hljs-function"><span class="hljs-keyword">void</span></span></span><span class="hljs-function"> </span><span class="hljs-title"><span class="hljs-function"><span class="hljs-title">loadBeanDefinitions</span></span></span><span class="hljs-params"><span class="hljs-function"><span class="hljs-params">(XmlBeanDefinitionReader reader)</span></span></span><span class="hljs-function"> </span><span class="hljs-keyword"><span class="hljs-function"><span class="hljs-keyword">throws</span></span></span><span class="hljs-function"> BeansException, IOException </span></span>{
   Resource[] configResources = getConfigResources();
   <span class="hljs-keyword"><span class="hljs-keyword">if</span></span> (configResources != <span class="hljs-keyword"><span class="hljs-keyword">null</span></span>) {
      <span class="hljs-comment"><span class="hljs-comment">// 往下看</span></span>
      reader.loadBeanDefinitions(configResources);
   }
   String[] configLocations = getConfigLocations();
   <span class="hljs-keyword"><span class="hljs-keyword">if</span></span> (configLocations != <span class="hljs-keyword"><span class="hljs-keyword">null</span></span>) {
      <span class="hljs-comment"><span class="hljs-comment">// 2</span></span>
      reader.loadBeanDefinitions(configLocations);
   }
}

<span class="hljs-comment"><span class="hljs-comment">// 上面虽然有两个分支，不过第二个分支很快通过解析路径转换为 Resource 以后也会进到这里</span></span>
<span class="hljs-meta"><span class="hljs-meta">@Override</span></span>
<span class="hljs-function"><span class="hljs-keyword"><span class="hljs-function"><span class="hljs-keyword">public</span></span></span><span class="hljs-function"> </span><span class="hljs-keyword"><span class="hljs-function"><span class="hljs-keyword">int</span></span></span><span class="hljs-function"> </span><span class="hljs-title"><span class="hljs-function"><span class="hljs-title">loadBeanDefinitions</span></span></span><span class="hljs-params"><span class="hljs-function"><span class="hljs-params">(Resource... resources)</span></span></span><span class="hljs-function"> </span><span class="hljs-keyword"><span class="hljs-function"><span class="hljs-keyword">throws</span></span></span><span class="hljs-function"> BeanDefinitionStoreException </span></span>{
   Assert.notNull(resources, <span class="hljs-string"><span class="hljs-string">"Resource array must not be null"</span></span>);
   <span class="hljs-keyword"><span class="hljs-keyword">int</span></span> counter = <span class="hljs-number"><span class="hljs-number">0</span></span>;
   <span class="hljs-comment"><span class="hljs-comment">// 注意这里是个 for 循环，也就是每个文件是一个 resource</span></span>
   <span class="hljs-keyword"><span class="hljs-keyword">for</span></span> (Resource resource : resources) {
      <span class="hljs-comment"><span class="hljs-comment">// 继续往下看</span></span>
      counter += loadBeanDefinitions(resource);
   }
   <span class="hljs-comment"><span class="hljs-comment">// 最后返回 counter，表示总共加载了多少的 BeanDefinition</span></span>
   <span class="hljs-keyword"><span class="hljs-keyword">return</span></span> counter;
}

<span class="hljs-comment"><span class="hljs-comment">// XmlBeanDefinitionReader 303</span></span>
<span class="hljs-meta"><span class="hljs-meta">@Override</span></span>
<span class="hljs-function"><span class="hljs-keyword"><span class="hljs-function"><span class="hljs-keyword">public</span></span></span><span class="hljs-function"> </span><span class="hljs-keyword"><span class="hljs-function"><span class="hljs-keyword">int</span></span></span><span class="hljs-function"> </span><span class="hljs-title"><span class="hljs-function"><span class="hljs-title">loadBeanDefinitions</span></span></span><span class="hljs-params"><span class="hljs-function"><span class="hljs-params">(Resource resource)</span></span></span><span class="hljs-function"> </span><span class="hljs-keyword"><span class="hljs-function"><span class="hljs-keyword">throws</span></span></span><span class="hljs-function"> BeanDefinitionStoreException </span></span>{
   <span class="hljs-keyword"><span class="hljs-keyword">return</span></span> loadBeanDefinitions(<span class="hljs-keyword"><span class="hljs-keyword">new</span></span> EncodedResource(resource));
}

<span class="hljs-comment"><span class="hljs-comment">// XmlBeanDefinitionReader 314</span></span>
<span class="hljs-function"><span class="hljs-keyword"><span class="hljs-function"><span class="hljs-keyword">public</span></span></span><span class="hljs-function"> </span><span class="hljs-keyword"><span class="hljs-function"><span class="hljs-keyword">int</span></span></span><span class="hljs-function"> </span><span class="hljs-title"><span class="hljs-function"><span class="hljs-title">loadBeanDefinitions</span></span></span><span class="hljs-params"><span class="hljs-function"><span class="hljs-params">(EncodedResource encodedResource)</span></span></span><span class="hljs-function"> </span><span class="hljs-keyword"><span class="hljs-function"><span class="hljs-keyword">throws</span></span></span><span class="hljs-function"> BeanDefinitionStoreException </span></span>{
   Assert.notNull(encodedResource, <span class="hljs-string"><span class="hljs-string">"EncodedResource must not be null"</span></span>);
   <span class="hljs-keyword"><span class="hljs-keyword">if</span></span> (logger.isInfoEnabled()) {
      logger.info(<span class="hljs-string"><span class="hljs-string">"Loading XML bean definitions from "</span></span> + encodedResource.getResource());
   }
   <span class="hljs-comment"><span class="hljs-comment">// 用一个 ThreadLocal 来存放配置文件资源</span></span>
   Set&lt;EncodedResource&gt; currentResources = <span class="hljs-keyword"><span class="hljs-keyword">this</span></span>.resourcesCurrentlyBeingLoaded.get();
   <span class="hljs-keyword"><span class="hljs-keyword">if</span></span> (currentResources == <span class="hljs-keyword"><span class="hljs-keyword">null</span></span>) {
      currentResources = <span class="hljs-keyword"><span class="hljs-keyword">new</span></span> HashSet&lt;EncodedResource&gt;(<span class="hljs-number"><span class="hljs-number">4</span></span>);
      <span class="hljs-keyword"><span class="hljs-keyword">this</span></span>.resourcesCurrentlyBeingLoaded.set(currentResources);
   }
   <span class="hljs-keyword"><span class="hljs-keyword">if</span></span> (!currentResources.add(encodedResource)) {
      <span class="hljs-keyword"><span class="hljs-keyword">throw</span></span> <span class="hljs-keyword"><span class="hljs-keyword">new</span></span> BeanDefinitionStoreException(
            <span class="hljs-string"><span class="hljs-string">"Detected cyclic loading of "</span></span> + encodedResource + <span class="hljs-string"><span class="hljs-string">" - check your import definitions!"</span></span>);
   }
   <span class="hljs-keyword"><span class="hljs-keyword">try</span></span> {
      InputStream inputStream = encodedResource.getResource().getInputStream();
      <span class="hljs-keyword"><span class="hljs-keyword">try</span></span> {
         InputSource inputSource = <span class="hljs-keyword"><span class="hljs-keyword">new</span></span> InputSource(inputStream);
         <span class="hljs-keyword"><span class="hljs-keyword">if</span></span> (encodedResource.getEncoding() != <span class="hljs-keyword"><span class="hljs-keyword">null</span></span>) {
            inputSource.setEncoding(encodedResource.getEncoding());
         }
         <span class="hljs-comment"><span class="hljs-comment">// 核心部分是这里，往下面看</span></span>
         <span class="hljs-keyword"><span class="hljs-keyword">return</span></span> doLoadBeanDefinitions(inputSource, encodedResource.getResource());
      }
      <span class="hljs-keyword"><span class="hljs-keyword">finally</span></span> {
         inputStream.close();
      }
   }
   <span class="hljs-keyword"><span class="hljs-keyword">catch</span></span> (IOException ex) {
      <span class="hljs-keyword"><span class="hljs-keyword">throw</span></span> <span class="hljs-keyword"><span class="hljs-keyword">new</span></span> BeanDefinitionStoreException(
            <span class="hljs-string"><span class="hljs-string">"IOException parsing XML document from "</span></span> + encodedResource.getResource(), ex);
   }
   <span class="hljs-keyword"><span class="hljs-keyword">finally</span></span> {
      currentResources.remove(encodedResource);
      <span class="hljs-keyword"><span class="hljs-keyword">if</span></span> (currentResources.isEmpty()) {
         <span class="hljs-keyword"><span class="hljs-keyword">this</span></span>.resourcesCurrentlyBeingLoaded.remove();
      }
   }
}

<span class="hljs-comment"><span class="hljs-comment">// 还在这个文件中，第 388 行</span></span>
<span class="hljs-function"><span class="hljs-keyword"><span class="hljs-function"><span class="hljs-keyword">protected</span></span></span><span class="hljs-function"> </span><span class="hljs-keyword"><span class="hljs-function"><span class="hljs-keyword">int</span></span></span><span class="hljs-function"> </span><span class="hljs-title"><span class="hljs-function"><span class="hljs-title">doLoadBeanDefinitions</span></span></span><span class="hljs-params"><span class="hljs-function"><span class="hljs-params">(InputSource inputSource, Resource resource)</span></span></span><span class="hljs-function">
      </span><span class="hljs-keyword"><span class="hljs-function"><span class="hljs-keyword">throws</span></span></span><span class="hljs-function"> BeanDefinitionStoreException </span></span>{
   <span class="hljs-keyword"><span class="hljs-keyword">try</span></span> {
      <span class="hljs-comment"><span class="hljs-comment">// 这里就不看了，将 xml 文件转换为 Document 对象</span></span>
      Document doc = doLoadDocument(inputSource, resource);
      <span class="hljs-comment"><span class="hljs-comment">// 继续</span></span>
      <span class="hljs-keyword"><span class="hljs-keyword">return</span></span> registerBeanDefinitions(doc, resource);
   }
   <span class="hljs-keyword"><span class="hljs-keyword">catch</span></span> (...
}
<span class="hljs-comment"><span class="hljs-comment">// 还在这个文件中，第 505 行</span></span>
<span class="hljs-comment"><span class="hljs-comment">// 返回值：返回从当前配置文件加载了多少数量的 Bean</span></span>
<span class="hljs-function"><span class="hljs-keyword"><span class="hljs-function"><span class="hljs-keyword">public</span></span></span><span class="hljs-function"> </span><span class="hljs-keyword"><span class="hljs-function"><span class="hljs-keyword">int</span></span></span><span class="hljs-function"> </span><span class="hljs-title"><span class="hljs-function"><span class="hljs-title">registerBeanDefinitions</span></span></span><span class="hljs-params"><span class="hljs-function"><span class="hljs-params">(Document doc, Resource resource)</span></span></span><span class="hljs-function"> </span><span class="hljs-keyword"><span class="hljs-function"><span class="hljs-keyword">throws</span></span></span><span class="hljs-function"> BeanDefinitionStoreException </span></span>{
   BeanDefinitionDocumentReader documentReader = createBeanDefinitionDocumentReader();
   <span class="hljs-keyword"><span class="hljs-keyword">int</span></span> countBefore = getRegistry().getBeanDefinitionCount();
   <span class="hljs-comment"><span class="hljs-comment">// 这里</span></span>
   documentReader.registerBeanDefinitions(doc, createReaderContext(resource));
   <span class="hljs-keyword"><span class="hljs-keyword">return</span></span> getRegistry().getBeanDefinitionCount() - countBefore;
}
<span class="hljs-comment"><span class="hljs-comment">// DefaultBeanDefinitionDocumentReader 90</span></span>
<span class="hljs-meta"><span class="hljs-meta">@Override</span></span>
<span class="hljs-function"><span class="hljs-keyword"><span class="hljs-function"><span class="hljs-keyword">public</span></span></span><span class="hljs-function"> </span><span class="hljs-keyword"><span class="hljs-function"><span class="hljs-keyword">void</span></span></span><span class="hljs-function"> </span><span class="hljs-title"><span class="hljs-function"><span class="hljs-title">registerBeanDefinitions</span></span></span><span class="hljs-params"><span class="hljs-function"><span class="hljs-params">(Document doc, XmlReaderContext readerContext)</span></span></span><span class="hljs-function"> </span></span>{
   <span class="hljs-keyword"><span class="hljs-keyword">this</span></span>.readerContext = readerContext;
   logger.debug(<span class="hljs-string"><span class="hljs-string">"Loading bean definitions"</span></span>);
   Element root = doc.getDocumentElement();
   <span class="hljs-comment"><span class="hljs-comment">// 从 xml 根节点开始解析文件</span></span>
   doRegisterBeanDefinitions(root);
}         </code></pre>
<p>经过漫长的链路，一个配置文件终于转换为一颗 DOM 树了，注意，这里指的是其中一个配置文件，不是所有的，读者可以看到上面有个 for 循环的。下面开始从根节点开始解析：</p>
<h5 id="doregisterbeandefinitions：">doRegisterBeanDefinitions：</h5>
<pre><code class="language-java hljs"><span class="hljs-comment"><span class="hljs-comment">// DefaultBeanDefinitionDocumentReader 116</span></span>
<span class="hljs-function"><span class="hljs-keyword"><span class="hljs-function"><span class="hljs-keyword">protected</span></span></span><span class="hljs-function"> </span><span class="hljs-keyword"><span class="hljs-function"><span class="hljs-keyword">void</span></span></span><span class="hljs-function"> </span><span class="hljs-title"><span class="hljs-function"><span class="hljs-title">doRegisterBeanDefinitions</span></span></span><span class="hljs-params"><span class="hljs-function"><span class="hljs-params">(Element root)</span></span></span><span class="hljs-function"> </span></span>{
   <span class="hljs-comment"><span class="hljs-comment">// 我们看名字就知道，BeanDefinitionParserDelegate 必定是一个重要的类，它负责解析 Bean 定义，</span></span>
   <span class="hljs-comment"><span class="hljs-comment">// 这里为什么要定义一个 parent? 看到后面就知道了，是递归问题，</span></span>
   <span class="hljs-comment"><span class="hljs-comment">// 因为 &lt;beans /&gt; 内部是可以定义 &lt;beans /&gt; 的，所以这个方法的 root 其实不一定就是 xml 的根节点，也可以是嵌套在里面的 &lt;beans /&gt; 节点，从源码分析的角度，我们当做根节点就好了</span></span>
   BeanDefinitionParserDelegate parent = <span class="hljs-keyword"><span class="hljs-keyword">this</span></span>.delegate;
   <span class="hljs-keyword"><span class="hljs-keyword">this</span></span>.delegate = createDelegate(getReaderContext(), root, parent);

   <span class="hljs-keyword"><span class="hljs-keyword">if</span></span> (<span class="hljs-keyword"><span class="hljs-keyword">this</span></span>.delegate.isDefaultNamespace(root)) {
      <span class="hljs-comment"><span class="hljs-comment">// 这块说的是根节点 &lt;beans ... profile="dev" /&gt; 中的 profile 是否是当前环境需要的，</span></span>
      <span class="hljs-comment"><span class="hljs-comment">// 如果当前环境配置的 profile 不包含此 profile，那就直接 return 了，不对此 &lt;beans /&gt; 解析</span></span>
      <span class="hljs-comment"><span class="hljs-comment">// 不熟悉 profile 为何物，不熟悉怎么配置 profile 读者的请移步附录区</span></span>
      String profileSpec = root.getAttribute(PROFILE_ATTRIBUTE);
      <span class="hljs-keyword"><span class="hljs-keyword">if</span></span> (StringUtils.hasText(profileSpec)) {
         String[] specifiedProfiles = StringUtils.tokenizeToStringArray(
               profileSpec, BeanDefinitionParserDelegate.MULTI_VALUE_ATTRIBUTE_DELIMITERS);
         <span class="hljs-keyword"><span class="hljs-keyword">if</span></span> (!getReaderContext().getEnvironment().acceptsProfiles(specifiedProfiles)) {
            <span class="hljs-keyword"><span class="hljs-keyword">if</span></span> (logger.isInfoEnabled()) {
               logger.info(<span class="hljs-string"><span class="hljs-string">"Skipped XML bean definition file due to specified profiles ["</span></span> + profileSpec +
                     <span class="hljs-string"><span class="hljs-string">"] not matching: "</span></span> + getReaderContext().getResource());
            }
            <span class="hljs-keyword"><span class="hljs-keyword">return</span></span>;
         }
      }
   }

   preProcessXml(root); <span class="hljs-comment"><span class="hljs-comment">// 钩子</span></span>
   <span class="hljs-comment"><span class="hljs-comment">// 往下看</span></span>
   parseBeanDefinitions(root, <span class="hljs-keyword"><span class="hljs-keyword">this</span></span>.delegate);
   postProcessXml(root); <span class="hljs-comment"><span class="hljs-comment">// 钩子</span></span>

   <span class="hljs-keyword"><span class="hljs-keyword">this</span></span>.delegate = parent;
}</code></pre>
<p>preProcessXml(root) 和 postProcessXml(root) 是给子类用的钩子方法，鉴于没有被使用到，也不是我们的重点，我们直接跳过。</p>
<p>这里涉及到了 profile 的问题，对于不了解的读者，我在附录中对 profile 做了简单的解释，读者可以参考一下。</p>
<p>接下来，看核心解析方法 parseBeanDefinitions(root, this.delegate) :</p>
<pre><code class="language-java hljs"><span class="hljs-comment"><span class="hljs-comment">// default namespace 涉及到的就四个标签 &lt;import /&gt;、&lt;alias /&gt;、&lt;bean /&gt; 和 &lt;beans /&gt;，</span></span>
<span class="hljs-comment"><span class="hljs-comment">// 其他的属于 custom 的</span></span>
<span class="hljs-function"><span class="hljs-keyword"><span class="hljs-function"><span class="hljs-keyword">protected</span></span></span><span class="hljs-function"> </span><span class="hljs-keyword"><span class="hljs-function"><span class="hljs-keyword">void</span></span></span><span class="hljs-function"> </span><span class="hljs-title"><span class="hljs-function"><span class="hljs-title">parseBeanDefinitions</span></span></span><span class="hljs-params"><span class="hljs-function"><span class="hljs-params">(Element root, BeanDefinitionParserDelegate delegate)</span></span></span><span class="hljs-function"> </span></span>{
   <span class="hljs-keyword"><span class="hljs-keyword">if</span></span> (delegate.isDefaultNamespace(root)) {
      NodeList nl = root.getChildNodes();
      <span class="hljs-keyword"><span class="hljs-keyword">for</span></span> (<span class="hljs-keyword"><span class="hljs-keyword">int</span></span> i = <span class="hljs-number"><span class="hljs-number">0</span></span>; i &lt; nl.getLength(); i++) {
         Node node = nl.item(i);
         <span class="hljs-keyword"><span class="hljs-keyword">if</span></span> (node <span class="hljs-keyword"><span class="hljs-keyword">instanceof</span></span> Element) {
            Element ele = (Element) node;
            <span class="hljs-keyword"><span class="hljs-keyword">if</span></span> (delegate.isDefaultNamespace(ele)) {
               <span class="hljs-comment"><span class="hljs-comment">// 解析 default namespace 下面的几个元素</span></span>
               parseDefaultElement(ele, delegate);
            }
            <span class="hljs-keyword"><span class="hljs-keyword">else</span></span> {
               <span class="hljs-comment"><span class="hljs-comment">// 解析其他 namespace 的元素</span></span>
               delegate.parseCustomElement(ele);
            }
         }
      }
   }
   <span class="hljs-keyword"><span class="hljs-keyword">else</span></span> {
      delegate.parseCustomElement(root);
   }
}</code></pre>
<p>从上面的代码，我们可以看到，对于每个配置来说，分别进入到 parseDefaultElement(ele, delegate); 和 delegate.parseCustomElement(ele); 这两个分支了。</p>
<p>parseDefaultElement(ele, delegate) 代表解析的节点是 <code>&lt;import /&gt;</code>、<code>&lt;alias /&gt;</code>、<code>&lt;bean /&gt;</code>、<code>&lt;beans /&gt;</code> 这几个。</p>
<blockquote>
<p>这里的四个标签之所以是 default 的，是因为它们是处于这个 namespace 下定义的：</p>
<pre><code class="hljs avrasm"><span class="hljs-symbol"><span class="hljs-symbol">http:</span></span>//www.springframework<span class="hljs-meta"><span class="hljs-meta">.org</span></span>/schema/beans</code></pre><p>又到初学者科普时间，不熟悉 namespace 的读者请看下面贴出来的 xml，这里的第二行 <strong>xmlns</strong> 就是咯。</p>
<pre><code class="language-xml hljs"><span class="hljs-tag"><span class="hljs-tag">&lt;</span><span class="hljs-name"><span class="hljs-tag"><span class="hljs-name">beans</span></span></span><span class="hljs-tag"> </span><span class="hljs-attr"><span class="hljs-tag"><span class="hljs-attr">xmlns:xsi</span></span></span><span class="hljs-tag">=</span><span class="hljs-string"><span class="hljs-tag"><span class="hljs-string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><span class="hljs-tag">
       </span><span class="hljs-attr"><span class="hljs-tag"><span class="hljs-attr">xmlns</span></span></span><span class="hljs-tag">=</span><span class="hljs-string"><span class="hljs-tag"><span class="hljs-string">"http://www.springframework.org/schema/beans"</span></span></span><span class="hljs-tag">
       </span><span class="hljs-attr"><span class="hljs-tag"><span class="hljs-attr">xsi:schemaLocation</span></span></span><span class="hljs-tag">=</span><span class="hljs-string"><span class="hljs-tag"><span class="hljs-string">"
            http://www.springframework.org/schema/beans
          http://www.springframework.org/schema/beans/spring-beans.xsd"</span></span></span><span class="hljs-tag">
       </span><span class="hljs-attr"><span class="hljs-tag"><span class="hljs-attr">default-autowire</span></span></span><span class="hljs-tag">=</span><span class="hljs-string"><span class="hljs-tag"><span class="hljs-string">"byName"</span></span></span><span class="hljs-tag">&gt;</span></span></code></pre>
<p>而对于其他的标签，将进入到 delegate.parseCustomElement(element) 这个分支。如我们经常会使用到的 <code>&lt;mvc /&gt;</code>、<code>&lt;task /&gt;</code>、<code>&lt;context /&gt;</code>、<code>&lt;aop /&gt;</code>等。</p>
<p>这些属于扩展，如果需要使用上面这些 ”非 default“ 标签，那么上面的 xml 头部的地方也要引入相应的 namespace 和 .xsd 文件的路径，如下所示。同时代码中需要提供相应的 parser 来解析，如 MvcNamespaceHandler、TaskNamespaceHandler、ContextNamespaceHandler、AopNamespaceHandler 等。</p>
<p>假如读者想分析 <code>&lt;context:property-placeholder location="classpath:xx.properties" /&gt;</code> 的实现原理，就应该到 ContextNamespaceHandler 中找答案。</p>
<pre><code class="language-xml hljs"><span class="hljs-tag"><span class="hljs-tag">&lt;</span><span class="hljs-name"><span class="hljs-tag"><span class="hljs-name">beans</span></span></span><span class="hljs-tag"> </span><span class="hljs-attr"><span class="hljs-tag"><span class="hljs-attr">xmlns:xsi</span></span></span><span class="hljs-tag">=</span><span class="hljs-string"><span class="hljs-tag"><span class="hljs-string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><span class="hljs-tag">
      </span><span class="hljs-attr"><span class="hljs-tag"><span class="hljs-attr">xmlns</span></span></span><span class="hljs-tag">=</span><span class="hljs-string"><span class="hljs-tag"><span class="hljs-string">"http://www.springframework.org/schema/beans"</span></span></span><span class="hljs-tag">
      </span><span class="hljs-attr"><span class="hljs-tag"><span class="hljs-attr">xmlns:context</span></span></span><span class="hljs-tag">=</span><span class="hljs-string"><span class="hljs-tag"><span class="hljs-string">"http://www.springframework.org/schema/context"</span></span></span><span class="hljs-tag">
      </span><span class="hljs-attr"><span class="hljs-tag"><span class="hljs-attr">xmlns:mvc</span></span></span><span class="hljs-tag">=</span><span class="hljs-string"><span class="hljs-tag"><span class="hljs-string">"http://www.springframework.org/schema/mvc"</span></span></span><span class="hljs-tag">
      </span><span class="hljs-attr"><span class="hljs-tag"><span class="hljs-attr">xsi:schemaLocation</span></span></span><span class="hljs-tag">=</span><span class="hljs-string"><span class="hljs-tag"><span class="hljs-string">"
           http://www.springframework.org/schema/beans 
           http://www.springframework.org/schema/beans/spring-beans.xsd
           http://www.springframework.org/schema/context
           http://www.springframework.org/schema/context/spring-context.xsd
           http://www.springframework.org/schema/mvc   
           http://www.springframework.org/schema/mvc/spring-mvc.xsd  
       "</span></span></span><span class="hljs-tag">
      </span><span class="hljs-attr"><span class="hljs-tag"><span class="hljs-attr">default-autowire</span></span></span><span class="hljs-tag">=</span><span class="hljs-string"><span class="hljs-tag"><span class="hljs-string">"byName"</span></span></span><span class="hljs-tag">&gt;</span></span></code></pre>
</blockquote>
<p>回过神来，看看处理 default 标签的方法：</p>
<pre><code class="language-java hljs"><span class="hljs-function"><span class="hljs-keyword"><span class="hljs-function"><span class="hljs-keyword">private</span></span></span><span class="hljs-function"> </span><span class="hljs-keyword"><span class="hljs-function"><span class="hljs-keyword">void</span></span></span><span class="hljs-function"> </span><span class="hljs-title"><span class="hljs-function"><span class="hljs-title">parseDefaultElement</span></span></span><span class="hljs-params"><span class="hljs-function"><span class="hljs-params">(Element ele, BeanDefinitionParserDelegate delegate)</span></span></span><span class="hljs-function"> </span></span>{
   <span class="hljs-keyword"><span class="hljs-keyword">if</span></span> (delegate.nodeNameEquals(ele, IMPORT_ELEMENT)) {
      <span class="hljs-comment"><span class="hljs-comment">// 处理 &lt;import /&gt; 标签</span></span>
      importBeanDefinitionResource(ele);
   }
   <span class="hljs-keyword"><span class="hljs-keyword">else</span></span> <span class="hljs-keyword"><span class="hljs-keyword">if</span></span> (delegate.nodeNameEquals(ele, ALIAS_ELEMENT)) {
      <span class="hljs-comment"><span class="hljs-comment">// 处理 &lt;alias /&gt; 标签定义</span></span>
      <span class="hljs-comment"><span class="hljs-comment">// &lt;alias name="fromName" alias="toName"/&gt;</span></span>
      processAliasRegistration(ele);
   }
   <span class="hljs-keyword"><span class="hljs-keyword">else</span></span> <span class="hljs-keyword"><span class="hljs-keyword">if</span></span> (delegate.nodeNameEquals(ele, BEAN_ELEMENT)) {
      <span class="hljs-comment"><span class="hljs-comment">// 处理 &lt;bean /&gt; 标签定义，这也算是我们的重点吧</span></span>
      processBeanDefinition(ele, delegate);
   }
   <span class="hljs-keyword"><span class="hljs-keyword">else</span></span> <span class="hljs-keyword"><span class="hljs-keyword">if</span></span> (delegate.nodeNameEquals(ele, NESTED_BEANS_ELEMENT)) {
      <span class="hljs-comment"><span class="hljs-comment">// 如果碰到的是嵌套的 &lt;beans /&gt; 标签，需要递归</span></span>
      doRegisterBeanDefinitions(ele);
   }
}</code></pre>
<p>如果每个标签都说，那我不吐血，你们都要吐血了。我们挑我们的重点 <code>&lt;bean /&gt;</code> 标签出来说。</p>
<h5 id="processbeandefinition-解析-bean-标签">processBeanDefinition 解析 bean 标签</h5>
<p>下面是 processBeanDefinition 解析 <code>&lt;bean /&gt;</code> 标签：</p>
<p>// DefaultBeanDefinitionDocumentReader 298</p>
<pre><code class="language-java hljs"><span class="hljs-function"><span class="hljs-keyword"><span class="hljs-function"><span class="hljs-keyword">protected</span></span></span><span class="hljs-function"> </span><span class="hljs-keyword"><span class="hljs-function"><span class="hljs-keyword">void</span></span></span><span class="hljs-function"> </span><span class="hljs-title"><span class="hljs-function"><span class="hljs-title">processBeanDefinition</span></span></span><span class="hljs-params"><span class="hljs-function"><span class="hljs-params">(Element ele, BeanDefinitionParserDelegate delegate)</span></span></span><span class="hljs-function"> </span></span>{
   <span class="hljs-comment"><span class="hljs-comment">// 将 &lt;bean /&gt; 节点中的信息提取出来，然后封装到一个 BeanDefinitionHolder 中，细节往下看</span></span>
   BeanDefinitionHolder bdHolder = delegate.parseBeanDefinitionElement(ele);

   <span class="hljs-comment"><span class="hljs-comment">// 下面的几行先不要看，跳过先，跳过先，跳过先，后面会继续说的</span></span>

   <span class="hljs-keyword"><span class="hljs-keyword">if</span></span> (bdHolder != <span class="hljs-keyword"><span class="hljs-keyword">null</span></span>) {
      bdHolder = delegate.decorateBeanDefinitionIfRequired(ele, bdHolder);
      <span class="hljs-keyword"><span class="hljs-keyword">try</span></span> {
         <span class="hljs-comment"><span class="hljs-comment">// Register the final decorated instance.</span></span>
         BeanDefinitionReaderUtils.registerBeanDefinition(bdHolder, getReaderContext().getRegistry());
      }
      <span class="hljs-keyword"><span class="hljs-keyword">catch</span></span> (BeanDefinitionStoreException ex) {
         getReaderContext().error(<span class="hljs-string"><span class="hljs-string">"Failed to register bean definition with name '"</span></span> +
               bdHolder.getBeanName() + <span class="hljs-string"><span class="hljs-string">"'"</span></span>, ele, ex);
      }
      <span class="hljs-comment"><span class="hljs-comment">// Send registration event.</span></span>
      getReaderContext().fireComponentRegistered(<span class="hljs-keyword"><span class="hljs-keyword">new</span></span> BeanComponentDefinition(bdHolder));
   }
}</code></pre>
<p>继续往下看怎么解析之前，我们先看下 <strong><code>&lt;bean /&gt;</code></strong> 标签中可以定义哪些属性：</p>
<table>
<thead>
<tr>
<th>Property</th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td>class</td>
<td>类的全限定名</td>
</tr>
<tr>
<td>name</td>
<td>可指定 id、name(用逗号、分号、空格分隔)</td>
</tr>
<tr>
<td>scope</td>
<td>作用域</td>
</tr>
<tr>
<td>constructor arguments</td>
<td>指定构造参数</td>
</tr>
<tr>
<td>properties</td>
<td>设置属性的值</td>
</tr>
<tr>
<td>autowiring mode</td>
<td>no(默认值)、byName、byType、 constructor</td>
</tr>
<tr>
<td>lazy-initialization mode</td>
<td>是否懒加载(如果被非懒加载的bean依赖了那么其实也就不能懒加载了)</td>
</tr>
<tr>
<td>initialization method</td>
<td>bean 属性设置完成后，会调用这个方法</td>
</tr>
<tr>
<td>destruction method</td>
<td>bean 销毁后的回调方法</td>
</tr>
</tbody></table>
<p>上面表格中的内容我想大家都非常熟悉吧，如果不熟悉，那就是你不够了解 Spring 的配置了。</p>
<p>简单地说就是像下面这样子：</p>
<pre><code class="language-xml hljs"><span class="hljs-tag"><span class="hljs-tag">&lt;</span><span class="hljs-name"><span class="hljs-tag"><span class="hljs-name">bean</span></span></span><span class="hljs-tag"> </span><span class="hljs-attr"><span class="hljs-tag"><span class="hljs-attr">id</span></span></span><span class="hljs-tag">=</span><span class="hljs-string"><span class="hljs-tag"><span class="hljs-string">"exampleBean"</span></span></span><span class="hljs-tag"> </span><span class="hljs-attr"><span class="hljs-tag"><span class="hljs-attr">name</span></span></span><span class="hljs-tag">=</span><span class="hljs-string"><span class="hljs-tag"><span class="hljs-string">"name1, name2, name3"</span></span></span><span class="hljs-tag"> </span><span class="hljs-attr"><span class="hljs-tag"><span class="hljs-attr">class</span></span></span><span class="hljs-tag">=</span><span class="hljs-string"><span class="hljs-tag"><span class="hljs-string">"com.javadoop.ExampleBean"</span></span></span><span class="hljs-tag">
      </span><span class="hljs-attr"><span class="hljs-tag"><span class="hljs-attr">scope</span></span></span><span class="hljs-tag">=</span><span class="hljs-string"><span class="hljs-tag"><span class="hljs-string">"singleton"</span></span></span><span class="hljs-tag"> </span><span class="hljs-attr"><span class="hljs-tag"><span class="hljs-attr">lazy-init</span></span></span><span class="hljs-tag">=</span><span class="hljs-string"><span class="hljs-tag"><span class="hljs-string">"true"</span></span></span><span class="hljs-tag"> </span><span class="hljs-attr"><span class="hljs-tag"><span class="hljs-attr">init-method</span></span></span><span class="hljs-tag">=</span><span class="hljs-string"><span class="hljs-tag"><span class="hljs-string">"init"</span></span></span><span class="hljs-tag"> </span><span class="hljs-attr"><span class="hljs-tag"><span class="hljs-attr">destroy-method</span></span></span><span class="hljs-tag">=</span><span class="hljs-string"><span class="hljs-tag"><span class="hljs-string">"cleanup"</span></span></span><span class="hljs-tag">&gt;</span></span>

    <span class="hljs-comment"><span class="hljs-comment">&lt;!-- 可以用下面三种形式指定构造参数 --&gt;</span></span>
    <span class="hljs-tag"><span class="hljs-tag">&lt;</span><span class="hljs-name"><span class="hljs-tag"><span class="hljs-name">constructor-arg</span></span></span><span class="hljs-tag"> </span><span class="hljs-attr"><span class="hljs-tag"><span class="hljs-attr">type</span></span></span><span class="hljs-tag">=</span><span class="hljs-string"><span class="hljs-tag"><span class="hljs-string">"int"</span></span></span><span class="hljs-tag"> </span><span class="hljs-attr"><span class="hljs-tag"><span class="hljs-attr">value</span></span></span><span class="hljs-tag">=</span><span class="hljs-string"><span class="hljs-tag"><span class="hljs-string">"7500000"</span></span></span><span class="hljs-tag">/&gt;</span></span>
    <span class="hljs-tag"><span class="hljs-tag">&lt;</span><span class="hljs-name"><span class="hljs-tag"><span class="hljs-name">constructor-arg</span></span></span><span class="hljs-tag"> </span><span class="hljs-attr"><span class="hljs-tag"><span class="hljs-attr">name</span></span></span><span class="hljs-tag">=</span><span class="hljs-string"><span class="hljs-tag"><span class="hljs-string">"years"</span></span></span><span class="hljs-tag"> </span><span class="hljs-attr"><span class="hljs-tag"><span class="hljs-attr">value</span></span></span><span class="hljs-tag">=</span><span class="hljs-string"><span class="hljs-tag"><span class="hljs-string">"7500000"</span></span></span><span class="hljs-tag">/&gt;</span></span>
    <span class="hljs-tag"><span class="hljs-tag">&lt;</span><span class="hljs-name"><span class="hljs-tag"><span class="hljs-name">constructor-arg</span></span></span><span class="hljs-tag"> </span><span class="hljs-attr"><span class="hljs-tag"><span class="hljs-attr">index</span></span></span><span class="hljs-tag">=</span><span class="hljs-string"><span class="hljs-tag"><span class="hljs-string">"0"</span></span></span><span class="hljs-tag"> </span><span class="hljs-attr"><span class="hljs-tag"><span class="hljs-attr">value</span></span></span><span class="hljs-tag">=</span><span class="hljs-string"><span class="hljs-tag"><span class="hljs-string">"7500000"</span></span></span><span class="hljs-tag">/&gt;</span></span>

    <span class="hljs-comment"><span class="hljs-comment">&lt;!-- property 的几种情况 --&gt;</span></span>
    <span class="hljs-tag"><span class="hljs-tag">&lt;</span><span class="hljs-name"><span class="hljs-tag"><span class="hljs-name">property</span></span></span><span class="hljs-tag"> </span><span class="hljs-attr"><span class="hljs-tag"><span class="hljs-attr">name</span></span></span><span class="hljs-tag">=</span><span class="hljs-string"><span class="hljs-tag"><span class="hljs-string">"beanOne"</span></span></span><span class="hljs-tag">&gt;</span></span>
        <span class="hljs-tag"><span class="hljs-tag">&lt;</span><span class="hljs-name"><span class="hljs-tag"><span class="hljs-name">ref</span></span></span><span class="hljs-tag"> </span><span class="hljs-attr"><span class="hljs-tag"><span class="hljs-attr">bean</span></span></span><span class="hljs-tag">=</span><span class="hljs-string"><span class="hljs-tag"><span class="hljs-string">"anotherExampleBean"</span></span></span><span class="hljs-tag">/&gt;</span></span>
    <span class="hljs-tag"><span class="hljs-tag">&lt;/</span><span class="hljs-name"><span class="hljs-tag"><span class="hljs-name">property</span></span></span><span class="hljs-tag">&gt;</span></span>
    <span class="hljs-tag"><span class="hljs-tag">&lt;</span><span class="hljs-name"><span class="hljs-tag"><span class="hljs-name">property</span></span></span><span class="hljs-tag"> </span><span class="hljs-attr"><span class="hljs-tag"><span class="hljs-attr">name</span></span></span><span class="hljs-tag">=</span><span class="hljs-string"><span class="hljs-tag"><span class="hljs-string">"beanTwo"</span></span></span><span class="hljs-tag"> </span><span class="hljs-attr"><span class="hljs-tag"><span class="hljs-attr">ref</span></span></span><span class="hljs-tag">=</span><span class="hljs-string"><span class="hljs-tag"><span class="hljs-string">"yetAnotherBean"</span></span></span><span class="hljs-tag">/&gt;</span></span>
    <span class="hljs-tag"><span class="hljs-tag">&lt;</span><span class="hljs-name"><span class="hljs-tag"><span class="hljs-name">property</span></span></span><span class="hljs-tag"> </span><span class="hljs-attr"><span class="hljs-tag"><span class="hljs-attr">name</span></span></span><span class="hljs-tag">=</span><span class="hljs-string"><span class="hljs-tag"><span class="hljs-string">"integerProperty"</span></span></span><span class="hljs-tag"> </span><span class="hljs-attr"><span class="hljs-tag"><span class="hljs-attr">value</span></span></span><span class="hljs-tag">=</span><span class="hljs-string"><span class="hljs-tag"><span class="hljs-string">"1"</span></span></span><span class="hljs-tag">/&gt;</span></span>
<span class="hljs-tag"><span class="hljs-tag">&lt;/</span><span class="hljs-name"><span class="hljs-tag"><span class="hljs-name">bean</span></span></span><span class="hljs-tag">&gt;</span></span></code></pre>
<p>当然，除了上面举例出来的这些，还有 factory-bean、factory-method、<code>&lt;lockup-method /&gt;</code>、<code>&lt;replaced-method /&gt;</code>、<code>&lt;meta /&gt;</code>、<code>&lt;qualifier /&gt;</code> 这几个，大家是不是熟悉呢？自己检验一下自己对 Spring 中 bean 的了解程度。</p>
<p>有了以上这些知识以后，我们再继续往里看怎么解析 bean 元素，是怎么转换到 BeanDefinitionHolder 的。</p>
<p>// BeanDefinitionParserDelegate 428</p>
<pre><code class="language-java hljs"><span class="hljs-function"><span class="hljs-keyword"><span class="hljs-function"><span class="hljs-keyword">public</span></span></span><span class="hljs-function"> BeanDefinitionHolder </span><span class="hljs-title"><span class="hljs-function"><span class="hljs-title">parseBeanDefinitionElement</span></span></span><span class="hljs-params"><span class="hljs-function"><span class="hljs-params">(Element ele)</span></span></span><span class="hljs-function"> </span></span>{
    <span class="hljs-keyword"><span class="hljs-keyword">return</span></span> parseBeanDefinitionElement(ele, <span class="hljs-keyword"><span class="hljs-keyword">null</span></span>);
}

<span class="hljs-function"><span class="hljs-keyword"><span class="hljs-function"><span class="hljs-keyword">public</span></span></span><span class="hljs-function"> BeanDefinitionHolder </span><span class="hljs-title"><span class="hljs-function"><span class="hljs-title">parseBeanDefinitionElement</span></span></span><span class="hljs-params"><span class="hljs-function"><span class="hljs-params">(Element ele, BeanDefinition containingBean)</span></span></span><span class="hljs-function"> </span></span>{
   String id = ele.getAttribute(ID_ATTRIBUTE);
   String nameAttr = ele.getAttribute(NAME_ATTRIBUTE);

   List&lt;String&gt; aliases = <span class="hljs-keyword"><span class="hljs-keyword">new</span></span> ArrayList&lt;String&gt;();

   <span class="hljs-comment"><span class="hljs-comment">// 将 name 属性的定义按照 “逗号、分号、空格” 切分，形成一个 别名列表数组，</span></span>
   <span class="hljs-comment"><span class="hljs-comment">// 当然，如果你不定义 name 属性的话，就是空的了</span></span>
   <span class="hljs-comment"><span class="hljs-comment">// 我在附录中简单介绍了一下 id 和 name 的配置，大家可以看一眼，有个20秒就可以了</span></span>
   <span class="hljs-keyword"><span class="hljs-keyword">if</span></span> (StringUtils.hasLength(nameAttr)) {
      String[] nameArr = StringUtils.tokenizeToStringArray(nameAttr, MULTI_VALUE_ATTRIBUTE_DELIMITERS);
      aliases.addAll(Arrays.asList(nameArr));
   }

   String beanName = id;
   <span class="hljs-comment"><span class="hljs-comment">// 如果没有指定id, 那么用别名列表的第一个名字作为beanName</span></span>
   <span class="hljs-keyword"><span class="hljs-keyword">if</span></span> (!StringUtils.hasText(beanName) &amp;&amp; !aliases.isEmpty()) {
      beanName = aliases.remove(<span class="hljs-number"><span class="hljs-number">0</span></span>);
      <span class="hljs-keyword"><span class="hljs-keyword">if</span></span> (logger.isDebugEnabled()) {
         logger.debug(<span class="hljs-string"><span class="hljs-string">"No XML 'id' specified - using '"</span></span> + beanName +
               <span class="hljs-string"><span class="hljs-string">"' as bean name and "</span></span> + aliases + <span class="hljs-string"><span class="hljs-string">" as aliases"</span></span>);
      }
   }

   <span class="hljs-keyword"><span class="hljs-keyword">if</span></span> (containingBean == <span class="hljs-keyword"><span class="hljs-keyword">null</span></span>) {
      checkNameUniqueness(beanName, aliases, ele);
   }

   <span class="hljs-comment"><span class="hljs-comment">// 根据 &lt;bean ...&gt;...&lt;/bean&gt; 中的配置创建 BeanDefinition，然后把配置中的信息都设置到实例中,</span></span>
   <span class="hljs-comment"><span class="hljs-comment">// 细节后面细说，先知道下面这行结束后，一个 BeanDefinition 实例就出来了。</span></span>
   AbstractBeanDefinition beanDefinition = parseBeanDefinitionElement(ele, beanName, containingBean);

   <span class="hljs-comment"><span class="hljs-comment">// 到这里，整个 &lt;bean /&gt; 标签就算解析结束了，一个 BeanDefinition 就形成了。</span></span>
   <span class="hljs-keyword"><span class="hljs-keyword">if</span></span> (beanDefinition != <span class="hljs-keyword"><span class="hljs-keyword">null</span></span>) {
      <span class="hljs-comment"><span class="hljs-comment">// 如果都没有设置 id 和 name，那么此时的 beanName 就会为 null，进入下面这块代码产生</span></span>
      <span class="hljs-comment"><span class="hljs-comment">// 如果读者不感兴趣的话，我觉得不需要关心这块代码，对本文源码分析来说，这些东西不重要</span></span>
      <span class="hljs-keyword"><span class="hljs-keyword">if</span></span> (!StringUtils.hasText(beanName)) {
         <span class="hljs-keyword"><span class="hljs-keyword">try</span></span> {
            <span class="hljs-keyword"><span class="hljs-keyword">if</span></span> (containingBean != <span class="hljs-keyword"><span class="hljs-keyword">null</span></span>) {<span class="hljs-comment"><span class="hljs-comment">// 按照我们的思路，这里 containingBean 是 null 的</span></span>
               beanName = BeanDefinitionReaderUtils.generateBeanName(
                     beanDefinition, <span class="hljs-keyword"><span class="hljs-keyword">this</span></span>.readerContext.getRegistry(), <span class="hljs-keyword"><span class="hljs-keyword">true</span></span>);
            }
            <span class="hljs-keyword"><span class="hljs-keyword">else</span></span> {
               <span class="hljs-comment"><span class="hljs-comment">// 如果我们不定义 id 和 name，那么我们引言里的那个例子：</span></span>
               <span class="hljs-comment"><span class="hljs-comment">//   1. beanName 为：com.javadoop.example.MessageServiceImpl#0</span></span>
               <span class="hljs-comment"><span class="hljs-comment">//   2. beanClassName 为：com.javadoop.example.MessageServiceImpl</span></span>

               beanName = <span class="hljs-keyword"><span class="hljs-keyword">this</span></span>.readerContext.generateBeanName(beanDefinition);

               String beanClassName = beanDefinition.getBeanClassName();
               <span class="hljs-keyword"><span class="hljs-keyword">if</span></span> (beanClassName != <span class="hljs-keyword"><span class="hljs-keyword">null</span></span> &amp;&amp;
                     beanName.startsWith(beanClassName) &amp;&amp; beanName.length() &gt; beanClassName.length() &amp;&amp;
                     !<span class="hljs-keyword"><span class="hljs-keyword">this</span></span>.readerContext.getRegistry().isBeanNameInUse(beanClassName)) {
                  <span class="hljs-comment"><span class="hljs-comment">// 把 beanClassName 设置为 Bean 的别名</span></span>
                  aliases.add(beanClassName);
               }
            }
            <span class="hljs-keyword"><span class="hljs-keyword">if</span></span> (logger.isDebugEnabled()) {
               logger.debug(<span class="hljs-string"><span class="hljs-string">"Neither XML 'id' nor 'name' specified - "</span></span> +
                     <span class="hljs-string"><span class="hljs-string">"using generated bean name ["</span></span> + beanName + <span class="hljs-string"><span class="hljs-string">"]"</span></span>);
            }
         }
         <span class="hljs-keyword"><span class="hljs-keyword">catch</span></span> (Exception ex) {
            error(ex.getMessage(), ele);
            <span class="hljs-keyword"><span class="hljs-keyword">return</span></span> <span class="hljs-keyword"><span class="hljs-keyword">null</span></span>;
         }
      }
      String[] aliasesArray = StringUtils.toStringArray(aliases);
      <span class="hljs-comment"><span class="hljs-comment">// 返回 BeanDefinitionHolder</span></span>
      <span class="hljs-keyword"><span class="hljs-keyword">return</span></span> <span class="hljs-keyword"><span class="hljs-keyword">new</span></span> BeanDefinitionHolder(beanDefinition, beanName, aliasesArray);
   }

   <span class="hljs-keyword"><span class="hljs-keyword">return</span></span> <span class="hljs-keyword"><span class="hljs-keyword">null</span></span>;
}</code></pre>
<p>然后，我们再看看怎么根据配置创建 BeanDefinition 实例的：</p>
<pre><code class="language-java hljs"><span class="hljs-function"><span class="hljs-keyword"><span class="hljs-function"><span class="hljs-keyword">public</span></span></span><span class="hljs-function"> AbstractBeanDefinition </span><span class="hljs-title"><span class="hljs-function"><span class="hljs-title">parseBeanDefinitionElement</span></span></span><span class="hljs-params"><span class="hljs-function"><span class="hljs-params">(
      Element ele, String beanName, BeanDefinition containingBean)</span></span></span><span class="hljs-function"> </span></span>{

   <span class="hljs-keyword"><span class="hljs-keyword">this</span></span>.parseState.push(<span class="hljs-keyword"><span class="hljs-keyword">new</span></span> BeanEntry(beanName));

   String className = <span class="hljs-keyword"><span class="hljs-keyword">null</span></span>;
   <span class="hljs-keyword"><span class="hljs-keyword">if</span></span> (ele.hasAttribute(CLASS_ATTRIBUTE)) {
      className = ele.getAttribute(CLASS_ATTRIBUTE).trim();
   }

   <span class="hljs-keyword"><span class="hljs-keyword">try</span></span> {
      String parent = <span class="hljs-keyword"><span class="hljs-keyword">null</span></span>;
      <span class="hljs-keyword"><span class="hljs-keyword">if</span></span> (ele.hasAttribute(PARENT_ATTRIBUTE)) {
         parent = ele.getAttribute(PARENT_ATTRIBUTE);
      }
      <span class="hljs-comment"><span class="hljs-comment">// 创建 BeanDefinition，然后设置类信息而已，很简单，就不贴代码了</span></span>
      AbstractBeanDefinition bd = createBeanDefinition(className, parent);

      <span class="hljs-comment"><span class="hljs-comment">// 设置 BeanDefinition 的一堆属性，这些属性定义在 AbstractBeanDefinition 中</span></span>
      parseBeanDefinitionAttributes(ele, beanName, containingBean, bd);
      bd.setDescription(DomUtils.getChildElementValueByTagName(ele, DESCRIPTION_ELEMENT));

      <span class="hljs-comment"><span class="hljs-comment">/**
       * 下面的一堆是解析 &lt;bean&gt;......&lt;/bean&gt; 内部的子元素，
       * 解析出来以后的信息都放到 bd 的属性中
       */</span></span>

      <span class="hljs-comment"><span class="hljs-comment">// 解析 &lt;meta /&gt;</span></span>
      parseMetaElements(ele, bd);
      <span class="hljs-comment"><span class="hljs-comment">// 解析 &lt;lookup-method /&gt;</span></span>
      parseLookupOverrideSubElements(ele, bd.getMethodOverrides());
      <span class="hljs-comment"><span class="hljs-comment">// 解析 &lt;replaced-method /&gt;</span></span>
      parseReplacedMethodSubElements(ele, bd.getMethodOverrides());
    <span class="hljs-comment"><span class="hljs-comment">// 解析 &lt;constructor-arg /&gt;</span></span>
      parseConstructorArgElements(ele, bd);
      <span class="hljs-comment"><span class="hljs-comment">// 解析 &lt;property /&gt;</span></span>
      parsePropertyElements(ele, bd);
      <span class="hljs-comment"><span class="hljs-comment">// 解析 &lt;qualifier /&gt;</span></span>
      parseQualifierElements(ele, bd);

      bd.setResource(<span class="hljs-keyword"><span class="hljs-keyword">this</span></span>.readerContext.getResource());
      bd.setSource(extractSource(ele));

      <span class="hljs-keyword"><span class="hljs-keyword">return</span></span> bd;
   }
   <span class="hljs-keyword"><span class="hljs-keyword">catch</span></span> (ClassNotFoundException ex) {
      error(<span class="hljs-string"><span class="hljs-string">"Bean class ["</span></span> + className + <span class="hljs-string"><span class="hljs-string">"] not found"</span></span>, ele, ex);
   }
   <span class="hljs-keyword"><span class="hljs-keyword">catch</span></span> (NoClassDefFoundError err) {
      error(<span class="hljs-string"><span class="hljs-string">"Class that bean class ["</span></span> + className + <span class="hljs-string"><span class="hljs-string">"] depends on not found"</span></span>, ele, err);
   }
   <span class="hljs-keyword"><span class="hljs-keyword">catch</span></span> (Throwable ex) {
      error(<span class="hljs-string"><span class="hljs-string">"Unexpected failure during bean definition parsing"</span></span>, ele, ex);
   }
   <span class="hljs-keyword"><span class="hljs-keyword">finally</span></span> {
      <span class="hljs-keyword"><span class="hljs-keyword">this</span></span>.parseState.pop();
   }

   <span class="hljs-keyword"><span class="hljs-keyword">return</span></span> <span class="hljs-keyword"><span class="hljs-keyword">null</span></span>;
}</code></pre>
<p>到这里，我们已经完成了根据 <code>&lt;bean /&gt;</code> 配置创建了一个 BeanDefinitionHolder 实例。注意，是一个。</p>
<p>我们回到解析 <code>&lt;bean /&gt;</code> 的入口方法:</p>
<pre><code class="language-java hljs"><span class="hljs-function"><span class="hljs-keyword"><span class="hljs-function"><span class="hljs-keyword">protected</span></span></span><span class="hljs-function"> </span><span class="hljs-keyword"><span class="hljs-function"><span class="hljs-keyword">void</span></span></span><span class="hljs-function"> </span><span class="hljs-title"><span class="hljs-function"><span class="hljs-title">processBeanDefinition</span></span></span><span class="hljs-params"><span class="hljs-function"><span class="hljs-params">(Element ele, BeanDefinitionParserDelegate delegate)</span></span></span><span class="hljs-function"> </span></span>{
   <span class="hljs-comment"><span class="hljs-comment">// 将 &lt;bean /&gt; 节点转换为 BeanDefinitionHolder，就是上面说的一堆</span></span>
   BeanDefinitionHolder bdHolder = delegate.parseBeanDefinitionElement(ele);
   <span class="hljs-keyword"><span class="hljs-keyword">if</span></span> (bdHolder != <span class="hljs-keyword"><span class="hljs-keyword">null</span></span>) {
      <span class="hljs-comment"><span class="hljs-comment">// 如果有自定义属性的话，进行相应的解析，先忽略</span></span>
      bdHolder = delegate.decorateBeanDefinitionIfRequired(ele, bdHolder);
      <span class="hljs-keyword"><span class="hljs-keyword">try</span></span> {
         <span class="hljs-comment"><span class="hljs-comment">// 我们把这步叫做 注册Bean 吧</span></span>
         BeanDefinitionReaderUtils.registerBeanDefinition(bdHolder, getReaderContext().getRegistry());
      }
      <span class="hljs-keyword"><span class="hljs-keyword">catch</span></span> (BeanDefinitionStoreException ex) {
         getReaderContext().error(<span class="hljs-string"><span class="hljs-string">"Failed to register bean definition with name '"</span></span> +
               bdHolder.getBeanName() + <span class="hljs-string"><span class="hljs-string">"'"</span></span>, ele, ex);
      }
      <span class="hljs-comment"><span class="hljs-comment">// 注册完成后，发送事件，本文不展开说这个</span></span>
      getReaderContext().fireComponentRegistered(<span class="hljs-keyword"><span class="hljs-keyword">new</span></span> BeanComponentDefinition(bdHolder));
   }
}</code></pre>
<p>大家再仔细看一下这块吧，我们后面就不回来说这个了。这里已经根据一个 <code>&lt;bean /&gt;</code> 标签产生了一个 BeanDefinitionHolder 的实例，这个实例里面也就是一个 BeanDefinition 的实例和它的 beanName、aliases 这三个信息，注意，我们的关注点始终在 BeanDefinition 上：</p>
<pre><code class="language-java hljs"><span class="hljs-keyword"><span class="hljs-keyword">public</span></span> <span class="hljs-class"><span class="hljs-keyword"><span class="hljs-class"><span class="hljs-keyword">class</span></span></span><span class="hljs-class"> </span><span class="hljs-title"><span class="hljs-class"><span class="hljs-title">BeanDefinitionHolder</span></span></span><span class="hljs-class"> </span><span class="hljs-keyword"><span class="hljs-class"><span class="hljs-keyword">implements</span></span></span><span class="hljs-class"> </span><span class="hljs-title"><span class="hljs-class"><span class="hljs-title">BeanMetadataElement</span></span></span><span class="hljs-class"> </span></span>{

  <span class="hljs-keyword"><span class="hljs-keyword">private</span></span> <span class="hljs-keyword"><span class="hljs-keyword">final</span></span> BeanDefinition beanDefinition;

  <span class="hljs-keyword"><span class="hljs-keyword">private</span></span> <span class="hljs-keyword"><span class="hljs-keyword">final</span></span> String beanName;

  <span class="hljs-keyword"><span class="hljs-keyword">private</span></span> <span class="hljs-keyword"><span class="hljs-keyword">final</span></span> String[] aliases;
...</code></pre>
<p>然后我们准备注册这个 BeanDefinition，最后，把这个注册事件发送出去。</p>
<p>下面，我们开始说说注册 Bean 吧。</p>
<h5 id="注册-bean">注册 Bean</h5>
<p>// BeanDefinitionReaderUtils 143</p>
<pre><code class="language-java hljs"><span class="hljs-function"><span class="hljs-keyword"><span class="hljs-function"><span class="hljs-keyword">public</span></span></span><span class="hljs-function"> </span><span class="hljs-keyword"><span class="hljs-function"><span class="hljs-keyword">static</span></span></span><span class="hljs-function"> </span><span class="hljs-keyword"><span class="hljs-function"><span class="hljs-keyword">void</span></span></span><span class="hljs-function"> </span><span class="hljs-title"><span class="hljs-function"><span class="hljs-title">registerBeanDefinition</span></span></span><span class="hljs-params"><span class="hljs-function"><span class="hljs-params">(
      BeanDefinitionHolder definitionHolder, BeanDefinitionRegistry registry)</span></span></span><span class="hljs-function">
      </span><span class="hljs-keyword"><span class="hljs-function"><span class="hljs-keyword">throws</span></span></span><span class="hljs-function"> BeanDefinitionStoreException </span></span>{

   String beanName = definitionHolder.getBeanName();
   <span class="hljs-comment"><span class="hljs-comment">// 注册这个 Bean</span></span>
   registry.registerBeanDefinition(beanName, definitionHolder.getBeanDefinition());

   <span class="hljs-comment"><span class="hljs-comment">// 如果还有别名的话，也要根据别名全部注册一遍，不然根据别名就会找不到 Bean 了</span></span>
   String[] aliases = definitionHolder.getAliases();
   <span class="hljs-keyword"><span class="hljs-keyword">if</span></span> (aliases != <span class="hljs-keyword"><span class="hljs-keyword">null</span></span>) {
      <span class="hljs-keyword"><span class="hljs-keyword">for</span></span> (String alias : aliases) {
         <span class="hljs-comment"><span class="hljs-comment">// alias -&gt; beanName 保存它们的别名信息，这个很简单，用一个 map 保存一下就可以了，</span></span>
         <span class="hljs-comment"><span class="hljs-comment">// 获取的时候，会先将 alias 转换为 beanName，然后再查找</span></span>
         registry.registerAlias(beanName, alias);
      }
   }
}</code></pre>
<p>别名注册的放一边，毕竟它很简单，我们看看怎么注册 Bean。</p>
<p>// DefaultListableBeanFactory 793</p>
<pre><code class="language-java hljs"><span class="hljs-meta"><span class="hljs-meta">@Override</span></span>
<span class="hljs-function"><span class="hljs-keyword"><span class="hljs-function"><span class="hljs-keyword">public</span></span></span><span class="hljs-function"> </span><span class="hljs-keyword"><span class="hljs-function"><span class="hljs-keyword">void</span></span></span><span class="hljs-function"> </span><span class="hljs-title"><span class="hljs-function"><span class="hljs-title">registerBeanDefinition</span></span></span><span class="hljs-params"><span class="hljs-function"><span class="hljs-params">(String beanName, BeanDefinition beanDefinition)</span></span></span><span class="hljs-function">
      </span><span class="hljs-keyword"><span class="hljs-function"><span class="hljs-keyword">throws</span></span></span><span class="hljs-function"> BeanDefinitionStoreException </span></span>{

   Assert.hasText(beanName, <span class="hljs-string"><span class="hljs-string">"Bean name must not be empty"</span></span>);
   Assert.notNull(beanDefinition, <span class="hljs-string"><span class="hljs-string">"BeanDefinition must not be null"</span></span>);

   <span class="hljs-keyword"><span class="hljs-keyword">if</span></span> (beanDefinition <span class="hljs-keyword"><span class="hljs-keyword">instanceof</span></span> AbstractBeanDefinition) {
      <span class="hljs-keyword"><span class="hljs-keyword">try</span></span> {
         ((AbstractBeanDefinition) beanDefinition).validate();
      }
      <span class="hljs-keyword"><span class="hljs-keyword">catch</span></span> (BeanDefinitionValidationException ex) {
         <span class="hljs-keyword"><span class="hljs-keyword">throw</span></span> <span class="hljs-keyword"><span class="hljs-keyword">new</span></span> BeanDefinitionStoreException(...);
      }
   }

   <span class="hljs-comment"><span class="hljs-comment">// old? 还记得 “允许 bean 覆盖” 这个配置吗？allowBeanDefinitionOverriding</span></span>
   BeanDefinition oldBeanDefinition;

   <span class="hljs-comment"><span class="hljs-comment">// 之后会看到，所有的 Bean 注册后会放入这个 beanDefinitionMap 中</span></span>
   oldBeanDefinition = <span class="hljs-keyword"><span class="hljs-keyword">this</span></span>.beanDefinitionMap.get(beanName);

   <span class="hljs-comment"><span class="hljs-comment">// 处理重复名称的 Bean 定义的情况</span></span>
   <span class="hljs-keyword"><span class="hljs-keyword">if</span></span> (oldBeanDefinition != <span class="hljs-keyword"><span class="hljs-keyword">null</span></span>) {
      <span class="hljs-keyword"><span class="hljs-keyword">if</span></span> (!isAllowBeanDefinitionOverriding()) {
         <span class="hljs-comment"><span class="hljs-comment">// 如果不允许覆盖的话，抛异常</span></span>
         <span class="hljs-keyword"><span class="hljs-keyword">throw</span></span> <span class="hljs-keyword"><span class="hljs-keyword">new</span></span> BeanDefinitionStoreException(beanDefinition.getResourceDescription()...
      }
      <span class="hljs-keyword"><span class="hljs-keyword">else</span></span> <span class="hljs-keyword"><span class="hljs-keyword">if</span></span> (oldBeanDefinition.getRole() &lt; beanDefinition.getRole()) {
         <span class="hljs-comment"><span class="hljs-comment">// log...用框架定义的 Bean 覆盖用户自定义的 Bean </span></span>
      }
      <span class="hljs-keyword"><span class="hljs-keyword">else</span></span> <span class="hljs-keyword"><span class="hljs-keyword">if</span></span> (!beanDefinition.equals(oldBeanDefinition)) {
         <span class="hljs-comment"><span class="hljs-comment">// log...用新的 Bean 覆盖旧的 Bean</span></span>
      }
      <span class="hljs-keyword"><span class="hljs-keyword">else</span></span> {
         <span class="hljs-comment"><span class="hljs-comment">// log...用同等的 Bean 覆盖旧的 Bean，这里指的是 equals 方法返回 true 的 Bean</span></span>
      }
      <span class="hljs-comment"><span class="hljs-comment">// 覆盖</span></span>
      <span class="hljs-keyword"><span class="hljs-keyword">this</span></span>.beanDefinitionMap.put(beanName, beanDefinition);
   }
   <span class="hljs-keyword"><span class="hljs-keyword">else</span></span> {
      <span class="hljs-comment"><span class="hljs-comment">// 判断是否已经有其他的 Bean 开始初始化了.</span></span>
      <span class="hljs-comment"><span class="hljs-comment">// 注意，"注册Bean" 这个动作结束，Bean 依然还没有初始化，我们后面会有大篇幅说初始化过程，</span></span>
      <span class="hljs-comment"><span class="hljs-comment">// 在 Spring 容器启动的最后，会 预初始化 所有的 singleton beans</span></span>
      <span class="hljs-keyword"><span class="hljs-keyword">if</span></span> (hasBeanCreationStarted()) {
         <span class="hljs-comment"><span class="hljs-comment">// Cannot modify startup-time collection elements anymore (for stable iteration)</span></span>
         <span class="hljs-keyword"><span class="hljs-keyword">synchronized</span></span> (<span class="hljs-keyword"><span class="hljs-keyword">this</span></span>.beanDefinitionMap) {
            <span class="hljs-keyword"><span class="hljs-keyword">this</span></span>.beanDefinitionMap.put(beanName, beanDefinition);
            List&lt;String&gt; updatedDefinitions = <span class="hljs-keyword"><span class="hljs-keyword">new</span></span> ArrayList&lt;String&gt;(<span class="hljs-keyword"><span class="hljs-keyword">this</span></span>.beanDefinitionNames.size() + <span class="hljs-number"><span class="hljs-number">1</span></span>);
            updatedDefinitions.addAll(<span class="hljs-keyword"><span class="hljs-keyword">this</span></span>.beanDefinitionNames);
            updatedDefinitions.add(beanName);
            <span class="hljs-keyword"><span class="hljs-keyword">this</span></span>.beanDefinitionNames = updatedDefinitions;
            <span class="hljs-keyword"><span class="hljs-keyword">if</span></span> (<span class="hljs-keyword"><span class="hljs-keyword">this</span></span>.manualSingletonNames.contains(beanName)) {
               Set&lt;String&gt; updatedSingletons = <span class="hljs-keyword"><span class="hljs-keyword">new</span></span> LinkedHashSet&lt;String&gt;(<span class="hljs-keyword"><span class="hljs-keyword">this</span></span>.manualSingletonNames);
               updatedSingletons.remove(beanName);
               <span class="hljs-keyword"><span class="hljs-keyword">this</span></span>.manualSingletonNames = updatedSingletons;
            }
         }
      }
      <span class="hljs-keyword"><span class="hljs-keyword">else</span></span> {
         <span class="hljs-comment"><span class="hljs-comment">// 最正常的应该是进到这个分支。</span></span>

         <span class="hljs-comment"><span class="hljs-comment">// 将 BeanDefinition 放到这个 map 中，这个 map 保存了所有的 BeanDefinition</span></span>
         <span class="hljs-keyword"><span class="hljs-keyword">this</span></span>.beanDefinitionMap.put(beanName, beanDefinition);
         <span class="hljs-comment"><span class="hljs-comment">// 这是个 ArrayList，所以会按照 bean 配置的顺序保存每一个注册的 Bean 的名字</span></span>
         <span class="hljs-keyword"><span class="hljs-keyword">this</span></span>.beanDefinitionNames.add(beanName);
         <span class="hljs-comment"><span class="hljs-comment">// 这是个 LinkedHashSet，代表的是手动注册的 singleton bean，</span></span>
         <span class="hljs-comment"><span class="hljs-comment">// 注意这里是 remove 方法，到这里的 Bean 当然不是手动注册的</span></span>
         <span class="hljs-comment"><span class="hljs-comment">// 手动指的是通过调用以下方法注册的 bean ：</span></span>
         <span class="hljs-comment"><span class="hljs-comment">//     registerSingleton(String beanName, Object singletonObject)</span></span>
         <span class="hljs-comment"><span class="hljs-comment">// 这不是重点，解释只是为了不让大家疑惑。Spring 会在后面"手动"注册一些 Bean，</span></span>
         <span class="hljs-comment"><span class="hljs-comment">// 如 "environment"、"systemProperties" 等 bean，我们自己也可以在运行时注册 Bean 到容器中的</span></span>
         <span class="hljs-keyword"><span class="hljs-keyword">this</span></span>.manualSingletonNames.remove(beanName);
      }
      <span class="hljs-comment"><span class="hljs-comment">// 这个不重要，在预初始化的时候会用到，不必管它。</span></span>
      <span class="hljs-keyword"><span class="hljs-keyword">this</span></span>.frozenBeanDefinitionNames = <span class="hljs-keyword"><span class="hljs-keyword">null</span></span>;
   }

   <span class="hljs-keyword"><span class="hljs-keyword">if</span></span> (oldBeanDefinition != <span class="hljs-keyword"><span class="hljs-keyword">null</span></span> || containsSingleton(beanName)) {
      resetBeanDefinition(beanName);
   }
}</code></pre>
<p>总结一下，到这里已经初始化了 Bean 容器，<code>&lt;bean /&gt;</code> 配置也相应的转换为了一个个 BeanDefinition，然后注册了各个 BeanDefinition 到注册中心，并且发送了注册事件。</p>
<blockquote>
<p>到这里是一个分水岭，前面的内容都还算比较简单，大家要清楚地知道前面都做了哪些事情。</p>
</blockquote>
<h3 id="bean-容器实例化完成后">Bean 容器实例化完成后</h3>
<p>说到这里，我们回到 refresh() 方法，我重新贴了一遍代码，看看我们说到哪了。是的，我们才说完 obtainFreshBeanFactory() 方法。</p>
<p>考虑到篇幅，这里开始大幅缩减掉没必要详细介绍的部分，大家直接看下面的代码中的注释就好了。</p>
<pre><code class="language-java hljs"><span class="hljs-meta"><span class="hljs-meta">@Override</span></span>
<span class="hljs-function"><span class="hljs-keyword"><span class="hljs-function"><span class="hljs-keyword">public</span></span></span><span class="hljs-function"> </span><span class="hljs-keyword"><span class="hljs-function"><span class="hljs-keyword">void</span></span></span><span class="hljs-function"> </span><span class="hljs-title"><span class="hljs-function"><span class="hljs-title">refresh</span></span></span><span class="hljs-params"><span class="hljs-function"><span class="hljs-params">()</span></span></span><span class="hljs-function"> </span><span class="hljs-keyword"><span class="hljs-function"><span class="hljs-keyword">throws</span></span></span><span class="hljs-function"> BeansException, IllegalStateException </span></span>{
   <span class="hljs-comment"><span class="hljs-comment">// 来个锁，不然 refresh() 还没结束，你又来个启动或销毁容器的操作，那不就乱套了嘛</span></span>
   <span class="hljs-keyword"><span class="hljs-keyword">synchronized</span></span> (<span class="hljs-keyword"><span class="hljs-keyword">this</span></span>.startupShutdownMonitor) {

      <span class="hljs-comment"><span class="hljs-comment">// 准备工作，记录下容器的启动时间、标记“已启动”状态、处理配置文件中的占位符</span></span>
      prepareRefresh();

      <span class="hljs-comment"><span class="hljs-comment">// 这步比较关键，这步完成后，配置文件就会解析成一个个 Bean 定义，注册到 BeanFactory 中，</span></span>
      <span class="hljs-comment"><span class="hljs-comment">// 当然，这里说的 Bean 还没有初始化，只是配置信息都提取出来了，</span></span>
      <span class="hljs-comment"><span class="hljs-comment">// 注册也只是将这些信息都保存到了注册中心(说到底核心是一个 beanName-&gt; beanDefinition 的 map)</span></span>
      ConfigurableListableBeanFactory beanFactory = obtainFreshBeanFactory();

      <span class="hljs-comment"><span class="hljs-comment">// 设置 BeanFactory 的类加载器，添加几个 BeanPostProcessor，手动注册几个特殊的 bean</span></span>
      <span class="hljs-comment"><span class="hljs-comment">// 这块待会会展开说</span></span>
      prepareBeanFactory(beanFactory);

      <span class="hljs-keyword"><span class="hljs-keyword">try</span></span> {
         <span class="hljs-comment"><span class="hljs-comment">// 【这里需要知道 BeanFactoryPostProcessor 这个知识点，Bean 如果实现了此接口，</span></span>
         <span class="hljs-comment"><span class="hljs-comment">// 那么在容器初始化以后，Spring 会负责调用里面的 postProcessBeanFactory 方法。】</span></span>

         <span class="hljs-comment"><span class="hljs-comment">// 这里是提供给子类的扩展点，到这里的时候，所有的 Bean 都加载、注册完成了，但是都还没有初始化</span></span>
         <span class="hljs-comment"><span class="hljs-comment">// 具体的子类可以在这步的时候添加一些特殊的 BeanFactoryPostProcessor 的实现类或做点什么事</span></span>
         postProcessBeanFactory(beanFactory);
         <span class="hljs-comment"><span class="hljs-comment">// 调用 BeanFactoryPostProcessor 各个实现类的 postProcessBeanFactory(factory) 回调方法</span></span>
         invokeBeanFactoryPostProcessors(beanFactory);          



         <span class="hljs-comment"><span class="hljs-comment">// 注册 BeanPostProcessor 的实现类，注意看和 BeanFactoryPostProcessor 的区别</span></span>
         <span class="hljs-comment"><span class="hljs-comment">// 此接口两个方法: postProcessBeforeInitialization 和 postProcessAfterInitialization</span></span>
         <span class="hljs-comment"><span class="hljs-comment">// 两个方法分别在 Bean 初始化之前和初始化之后得到执行。这里仅仅是注册，之后会看到回调这两方法的时机</span></span>
         registerBeanPostProcessors(beanFactory);

         <span class="hljs-comment"><span class="hljs-comment">// 初始化当前 ApplicationContext 的 MessageSource，国际化这里就不展开说了，不然没完没了了</span></span>
         initMessageSource();

         <span class="hljs-comment"><span class="hljs-comment">// 初始化当前 ApplicationContext 的事件广播器，这里也不展开了</span></span>
         initApplicationEventMulticaster();

         <span class="hljs-comment"><span class="hljs-comment">// 从方法名就可以知道，典型的模板方法(钩子方法)，不展开说</span></span>
         <span class="hljs-comment"><span class="hljs-comment">// 具体的子类可以在这里初始化一些特殊的 Bean（在初始化 singleton beans 之前）</span></span>
         onRefresh();

         <span class="hljs-comment"><span class="hljs-comment">// 注册事件监听器，监听器需要实现 ApplicationListener 接口。这也不是我们的重点，过</span></span>
         registerListeners();

         <span class="hljs-comment"><span class="hljs-comment">// 重点，重点，重点</span></span>
         <span class="hljs-comment"><span class="hljs-comment">// 初始化所有的 singleton beans</span></span>
         <span class="hljs-comment"><span class="hljs-comment">//（lazy-init 的除外）</span></span>
         finishBeanFactoryInitialization(beanFactory);

         <span class="hljs-comment"><span class="hljs-comment">// 最后，广播事件，ApplicationContext 初始化完成，不展开</span></span>
         finishRefresh();
      }

      <span class="hljs-keyword"><span class="hljs-keyword">catch</span></span> (BeansException ex) {
         <span class="hljs-keyword"><span class="hljs-keyword">if</span></span> (logger.isWarnEnabled()) {
            logger.warn(<span class="hljs-string"><span class="hljs-string">"Exception encountered during context initialization - "</span></span> +
                  <span class="hljs-string"><span class="hljs-string">"cancelling refresh attempt: "</span></span> + ex);
         }

         <span class="hljs-comment"><span class="hljs-comment">// Destroy already created singletons to avoid dangling resources.</span></span>
         <span class="hljs-comment"><span class="hljs-comment">// 销毁已经初始化的 singleton 的 Beans，以免有些 bean 会一直占用资源</span></span>
         destroyBeans();

         <span class="hljs-comment"><span class="hljs-comment">// Reset 'active' flag.</span></span>
         cancelRefresh(ex);

         <span class="hljs-comment"><span class="hljs-comment">// 把异常往外抛</span></span>
         <span class="hljs-keyword"><span class="hljs-keyword">throw</span></span> ex;
      }

      <span class="hljs-keyword"><span class="hljs-keyword">finally</span></span> {
         <span class="hljs-comment"><span class="hljs-comment">// Reset common introspection caches in Spring's core, since we</span></span>
         <span class="hljs-comment"><span class="hljs-comment">// might not ever need metadata for singleton beans anymore...</span></span>
         resetCommonCaches();
      }
   }
}</code></pre>
<h3 id="准备-bean-容器-preparebeanfactory">准备 Bean 容器: prepareBeanFactory</h3>
<p>之前我们说过，Spring 把我们在 xml 配置的 bean 都注册以后，会"手动"注册一些特殊的 bean。</p>
<p>这里简单介绍下 prepareBeanFactory(factory) 方法：</p>
<pre><code class="language-java hljs"><span class="hljs-comment"><span class="hljs-comment">/**
 * Configure the factory's standard context characteristics,
 * such as the context's ClassLoader and post-processors.
 * </span><span class="hljs-doctag"><span class="hljs-comment"><span class="hljs-doctag">@param</span></span></span><span class="hljs-comment"> beanFactory the BeanFactory to configure
 */</span></span>
<span class="hljs-function"><span class="hljs-keyword"><span class="hljs-function"><span class="hljs-keyword">protected</span></span></span><span class="hljs-function"> </span><span class="hljs-keyword"><span class="hljs-function"><span class="hljs-keyword">void</span></span></span><span class="hljs-function"> </span><span class="hljs-title"><span class="hljs-function"><span class="hljs-title">prepareBeanFactory</span></span></span><span class="hljs-params"><span class="hljs-function"><span class="hljs-params">(ConfigurableListableBeanFactory beanFactory)</span></span></span><span class="hljs-function"> </span></span>{
   <span class="hljs-comment"><span class="hljs-comment">// 设置 BeanFactory 的类加载器，我们知道 BeanFactory 需要加载类，也就需要类加载器，</span></span>
   <span class="hljs-comment"><span class="hljs-comment">// 这里设置为加载当前 ApplicationContext 类的类加载器</span></span>
   beanFactory.setBeanClassLoader(getClassLoader());

   <span class="hljs-comment"><span class="hljs-comment">// 设置 BeanExpressionResolver</span></span>
   beanFactory.setBeanExpressionResolver(<span class="hljs-keyword"><span class="hljs-keyword">new</span></span> StandardBeanExpressionResolver(beanFactory.getBeanClassLoader()));
   <span class="hljs-comment"><span class="hljs-comment">// </span></span>
   beanFactory.addPropertyEditorRegistrar(<span class="hljs-keyword"><span class="hljs-keyword">new</span></span> ResourceEditorRegistrar(<span class="hljs-keyword"><span class="hljs-keyword">this</span></span>, getEnvironment()));

   <span class="hljs-comment"><span class="hljs-comment">// 添加一个 BeanPostProcessor，这个 processor 比较简单：</span></span>
   <span class="hljs-comment"><span class="hljs-comment">// 实现了 Aware 接口的 beans 在初始化的时候，这个 processor 负责回调，</span></span>
   <span class="hljs-comment"><span class="hljs-comment">// 这个我们很常用，如我们会为了获取 ApplicationContext 而 implement ApplicationContextAware</span></span>
   <span class="hljs-comment"><span class="hljs-comment">// 注意：它不仅仅回调 ApplicationContextAware，</span></span>
   <span class="hljs-comment"><span class="hljs-comment">//   还会负责回调 EnvironmentAware、ResourceLoaderAware 等，看下源码就清楚了</span></span>
   beanFactory.addBeanPostProcessor(<span class="hljs-keyword"><span class="hljs-keyword">new</span></span> ApplicationContextAwareProcessor(<span class="hljs-keyword"><span class="hljs-keyword">this</span></span>));

   <span class="hljs-comment"><span class="hljs-comment">// 下面几行的意思就是，如果某个 bean 依赖于以下几个接口的实现类，在自动装配的时候忽略它们，</span></span>
   <span class="hljs-comment"><span class="hljs-comment">// Spring 会通过其他方式来处理这些依赖。</span></span>
   beanFactory.ignoreDependencyInterface(EnvironmentAware.class);
   beanFactory.ignoreDependencyInterface(EmbeddedValueResolverAware.class);
   beanFactory.ignoreDependencyInterface(ResourceLoaderAware.class);
   beanFactory.ignoreDependencyInterface(ApplicationEventPublisherAware.class);
   beanFactory.ignoreDependencyInterface(MessageSourceAware.class);
   beanFactory.ignoreDependencyInterface(ApplicationContextAware.class);

   <span class="hljs-comment"><span class="hljs-comment">/**
    * 下面几行就是为特殊的几个 bean 赋值，如果有 bean 依赖了以下几个，会注入这边相应的值，
    * 之前我们说过，"当前 ApplicationContext 持有一个 BeanFactory"，这里解释了第一行
    * ApplicationContext 还继承了 ResourceLoader、ApplicationEventPublisher、MessageSource
    * 所以对于这几个依赖，可以赋值为 this，注意 this 是一个 ApplicationContext
    * 那这里怎么没看到为 MessageSource 赋值呢？那是因为 MessageSource 被注册成为了一个普通的 bean
    */</span></span>
   beanFactory.registerResolvableDependency(BeanFactory.class, beanFactory);
   beanFactory.registerResolvableDependency(ResourceLoader.class, <span class="hljs-keyword"><span class="hljs-keyword">this</span></span>);
   beanFactory.registerResolvableDependency(ApplicationEventPublisher.class, <span class="hljs-keyword"><span class="hljs-keyword">this</span></span>);
   beanFactory.registerResolvableDependency(ApplicationContext.class, <span class="hljs-keyword"><span class="hljs-keyword">this</span></span>);

   <span class="hljs-comment"><span class="hljs-comment">// 这个 BeanPostProcessor 也很简单，在 bean 实例化后，如果是 ApplicationListener 的子类，</span></span>
   <span class="hljs-comment"><span class="hljs-comment">// 那么将其添加到 listener 列表中，可以理解成：注册 事件监听器</span></span>
   beanFactory.addBeanPostProcessor(<span class="hljs-keyword"><span class="hljs-keyword">new</span></span> ApplicationListenerDetector(<span class="hljs-keyword"><span class="hljs-keyword">this</span></span>));

   <span class="hljs-comment"><span class="hljs-comment">// 这里涉及到特殊的 bean，名为：loadTimeWeaver，这不是我们的重点，忽略它</span></span>
   <span class="hljs-comment"><span class="hljs-comment">// tips: ltw 是 AspectJ 的概念，指的是在运行期进行织入，这个和 Spring AOP 不一样，</span></span>
   <span class="hljs-comment"><span class="hljs-comment">//    感兴趣的读者请参考我写的关于 AspectJ 的另一篇文章 https://www.javadoop.com/post/aspectj</span></span>
   <span class="hljs-keyword"><span class="hljs-keyword">if</span></span> (beanFactory.containsBean(LOAD_TIME_WEAVER_BEAN_NAME)) {
      beanFactory.addBeanPostProcessor(<span class="hljs-keyword"><span class="hljs-keyword">new</span></span> LoadTimeWeaverAwareProcessor(beanFactory));
      <span class="hljs-comment"><span class="hljs-comment">// Set a temporary ClassLoader for type matching.</span></span>
      beanFactory.setTempClassLoader(<span class="hljs-keyword"><span class="hljs-keyword">new</span></span> ContextTypeMatchClassLoader(beanFactory.getBeanClassLoader()));
   }

   <span class="hljs-comment"><span class="hljs-comment">/**
    * 从下面几行代码我们可以知道，Spring 往往很 "智能" 就是因为它会帮我们默认注册一些有用的 bean，
    * 我们也可以选择覆盖
    */</span></span>

   <span class="hljs-comment"><span class="hljs-comment">// 如果没有定义 "environment" 这个 bean，那么 Spring 会 "手动" 注册一个</span></span>
   <span class="hljs-keyword"><span class="hljs-keyword">if</span></span> (!beanFactory.containsLocalBean(ENVIRONMENT_BEAN_NAME)) {
      beanFactory.registerSingleton(ENVIRONMENT_BEAN_NAME, getEnvironment());
   }
   <span class="hljs-comment"><span class="hljs-comment">// 如果没有定义 "systemProperties" 这个 bean，那么 Spring 会 "手动" 注册一个</span></span>
   <span class="hljs-keyword"><span class="hljs-keyword">if</span></span> (!beanFactory.containsLocalBean(SYSTEM_PROPERTIES_BEAN_NAME)) {
      beanFactory.registerSingleton(SYSTEM_PROPERTIES_BEAN_NAME, getEnvironment().getSystemProperties());
   }
   <span class="hljs-comment"><span class="hljs-comment">// 如果没有定义 "systemEnvironment" 这个 bean，那么 Spring 会 "手动" 注册一个</span></span>
   <span class="hljs-keyword"><span class="hljs-keyword">if</span></span> (!beanFactory.containsLocalBean(SYSTEM_ENVIRONMENT_BEAN_NAME)) {
      beanFactory.registerSingleton(SYSTEM_ENVIRONMENT_BEAN_NAME, getEnvironment().getSystemEnvironment());
   }
}</code></pre>
<p>在上面这块代码中，Spring 对一些特殊的 bean 进行了处理，读者如果暂时还不能消化它们也没有关系，慢慢往下看。</p>
<h3 id="初始化所有的-singleton-beans">初始化所有的 singleton beans</h3>
<p>我们的重点当然是 finishBeanFactoryInitialization(beanFactory); 这个巨头了，这里会负责初始化所有的 singleton beans。</p>
<p>注意，后面的描述中，我都会使用<strong>初始化</strong>或<strong>预初始化</strong>来代表这个阶段，Spring 会在这个阶段完成所有的 singleton beans 的实例化。</p>
<p>我们来总结一下，到目前为止，应该说 BeanFactory 已经创建完成，并且所有的实现了 BeanFactoryPostProcessor 接口的 Bean 都已经初始化并且其中的 postProcessBeanFactory(factory) 方法已经得到回调执行了。而且 Spring 已经“手动”注册了一些特殊的 Bean，如 ‘environment’、‘systemProperties’ 等。</p>
<p>剩下的就是初始化 singleton beans 了，我们知道它们是单例的，如果没有设置懒加载，那么 Spring 会在接下来初始化所有的 singleton beans。</p>
<p>// AbstractApplicationContext.java 834</p>
<pre><code class="language-java hljs"><span class="hljs-comment"><span class="hljs-comment">// 初始化剩余的 singleton beans</span></span>
<span class="hljs-function"><span class="hljs-keyword"><span class="hljs-function"><span class="hljs-keyword">protected</span></span></span><span class="hljs-function"> </span><span class="hljs-keyword"><span class="hljs-function"><span class="hljs-keyword">void</span></span></span><span class="hljs-function"> </span><span class="hljs-title"><span class="hljs-function"><span class="hljs-title">finishBeanFactoryInitialization</span></span></span><span class="hljs-params"><span class="hljs-function"><span class="hljs-params">(ConfigurableListableBeanFactory beanFactory)</span></span></span><span class="hljs-function"> </span></span>{

   <span class="hljs-comment"><span class="hljs-comment">// 首先，初始化名字为 conversionService 的 Bean。本着送佛送到西的精神，我在附录中简单介绍了一下 ConversionService，因为这实在太实用了</span></span>
   <span class="hljs-comment"><span class="hljs-comment">// 什么，看代码这里没有初始化 Bean 啊！</span></span>
   <span class="hljs-comment"><span class="hljs-comment">// 注意了，初始化的动作包装在 beanFactory.getBean(...) 中，这里先不说细节，先往下看吧</span></span>
   <span class="hljs-keyword"><span class="hljs-keyword">if</span></span> (beanFactory.containsBean(CONVERSION_SERVICE_BEAN_NAME) &amp;&amp;
         beanFactory.isTypeMatch(CONVERSION_SERVICE_BEAN_NAME, ConversionService.class)) {
      beanFactory.setConversionService(
            beanFactory.getBean(CONVERSION_SERVICE_BEAN_NAME, ConversionService.class));
   }

   <span class="hljs-comment"><span class="hljs-comment">// Register a default embedded value resolver if no bean post-processor</span></span>
   <span class="hljs-comment"><span class="hljs-comment">// (such as a PropertyPlaceholderConfigurer bean) registered any before:</span></span>
   <span class="hljs-comment"><span class="hljs-comment">// at this point, primarily for resolution in annotation attribute values.</span></span>
   <span class="hljs-keyword"><span class="hljs-keyword">if</span></span> (!beanFactory.hasEmbeddedValueResolver()) {
      beanFactory.addEmbeddedValueResolver(<span class="hljs-keyword"><span class="hljs-keyword">new</span></span> StringValueResolver() {
         <span class="hljs-meta"><span class="hljs-meta">@Override</span></span>
         <span class="hljs-function"><span class="hljs-keyword"><span class="hljs-function"><span class="hljs-keyword">public</span></span></span><span class="hljs-function"> String </span><span class="hljs-title"><span class="hljs-function"><span class="hljs-title">resolveStringValue</span></span></span><span class="hljs-params"><span class="hljs-function"><span class="hljs-params">(String strVal)</span></span></span><span class="hljs-function"> </span></span>{
            <span class="hljs-keyword"><span class="hljs-keyword">return</span></span> getEnvironment().resolvePlaceholders(strVal);
         }
      });
   }

   <span class="hljs-comment"><span class="hljs-comment">// 先初始化 LoadTimeWeaverAware 类型的 Bean</span></span>
   <span class="hljs-comment"><span class="hljs-comment">// 之前也说过，这是 AspectJ 相关的内容，放心跳过吧</span></span>
   String[] weaverAwareNames = beanFactory.getBeanNamesForType(LoadTimeWeaverAware.class, <span class="hljs-keyword"><span class="hljs-keyword">false</span></span>, <span class="hljs-keyword"><span class="hljs-keyword">false</span></span>);
   <span class="hljs-keyword"><span class="hljs-keyword">for</span></span> (String weaverAwareName : weaverAwareNames) {
      getBean(weaverAwareName);
   }

   <span class="hljs-comment"><span class="hljs-comment">// Stop using the temporary ClassLoader for type matching.</span></span>
   beanFactory.setTempClassLoader(<span class="hljs-keyword"><span class="hljs-keyword">null</span></span>);

   <span class="hljs-comment"><span class="hljs-comment">// 没什么别的目的，因为到这一步的时候，Spring 已经开始预初始化 singleton beans 了，</span></span>
   <span class="hljs-comment"><span class="hljs-comment">// 肯定不希望这个时候还出现 bean 定义解析、加载、注册。</span></span>
   beanFactory.freezeConfiguration();

   <span class="hljs-comment"><span class="hljs-comment">// 开始初始化</span></span>
   beanFactory.preInstantiateSingletons();
}</code></pre>
<p>从上面最后一行往里看，我们就又回到 DefaultListableBeanFactory 这个类了，这个类大家应该都不陌生了吧。</p>
<h4 id="preinstantiatesingletons">preInstantiateSingletons</h4>
<p>// DefaultListableBeanFactory 728</p>
<pre><code class="language-java hljs"><span class="hljs-meta"><span class="hljs-meta">@Override</span></span>
<span class="hljs-function"><span class="hljs-keyword"><span class="hljs-function"><span class="hljs-keyword">public</span></span></span><span class="hljs-function"> </span><span class="hljs-keyword"><span class="hljs-function"><span class="hljs-keyword">void</span></span></span><span class="hljs-function"> </span><span class="hljs-title"><span class="hljs-function"><span class="hljs-title">preInstantiateSingletons</span></span></span><span class="hljs-params"><span class="hljs-function"><span class="hljs-params">()</span></span></span><span class="hljs-function"> </span><span class="hljs-keyword"><span class="hljs-function"><span class="hljs-keyword">throws</span></span></span><span class="hljs-function"> BeansException </span></span>{
   <span class="hljs-keyword"><span class="hljs-keyword">if</span></span> (<span class="hljs-keyword"><span class="hljs-keyword">this</span></span>.logger.isDebugEnabled()) {
      <span class="hljs-keyword"><span class="hljs-keyword">this</span></span>.logger.debug(<span class="hljs-string"><span class="hljs-string">"Pre-instantiating singletons in "</span></span> + <span class="hljs-keyword"><span class="hljs-keyword">this</span></span>);
   }
   <span class="hljs-comment"><span class="hljs-comment">// this.beanDefinitionNames 保存了所有的 beanNames</span></span>
   List&lt;String&gt; beanNames = <span class="hljs-keyword"><span class="hljs-keyword">new</span></span> ArrayList&lt;String&gt;(<span class="hljs-keyword"><span class="hljs-keyword">this</span></span>.beanDefinitionNames);

   <span class="hljs-comment"><span class="hljs-comment">// 触发所有的非懒加载的 singleton beans 的初始化操作</span></span>
   <span class="hljs-keyword"><span class="hljs-keyword">for</span></span> (String beanName : beanNames) {

      <span class="hljs-comment"><span class="hljs-comment">// 合并父 Bean 中的配置，注意 &lt;bean id="" class="" parent="" /&gt; 中的 parent，用的不多吧，</span></span>
      <span class="hljs-comment"><span class="hljs-comment">// 考虑到这可能会影响大家的理解，我在附录中解释了一下 "Bean 继承"，不了解的请到附录中看一下</span></span>
      RootBeanDefinition bd = getMergedLocalBeanDefinition(beanName);

      <span class="hljs-comment"><span class="hljs-comment">// 非抽象、非懒加载的 singletons。如果配置了 'abstract = true'，那是不需要初始化的</span></span>
      <span class="hljs-keyword"><span class="hljs-keyword">if</span></span> (!bd.isAbstract() &amp;&amp; bd.isSingleton() &amp;&amp; !bd.isLazyInit()) {
         <span class="hljs-comment"><span class="hljs-comment">// 处理 FactoryBean(读者如果不熟悉 FactoryBean，请移步附录区了解)</span></span>
         <span class="hljs-keyword"><span class="hljs-keyword">if</span></span> (isFactoryBean(beanName)) {
            <span class="hljs-comment"><span class="hljs-comment">// FactoryBean 的话，在 beanName 前面加上 ‘&amp;’ 符号。再调用 getBean，getBean 方法别急</span></span>
            <span class="hljs-keyword"><span class="hljs-keyword">final</span></span> FactoryBean&lt;?&gt; factory = (FactoryBean&lt;?&gt;) getBean(FACTORY_BEAN_PREFIX + beanName);
            <span class="hljs-comment"><span class="hljs-comment">// 判断当前 FactoryBean 是否是 SmartFactoryBean 的实现，此处忽略，直接跳过</span></span>
            <span class="hljs-keyword"><span class="hljs-keyword">boolean</span></span> isEagerInit;
            <span class="hljs-keyword"><span class="hljs-keyword">if</span></span> (System.getSecurityManager() != <span class="hljs-keyword"><span class="hljs-keyword">null</span></span> &amp;&amp; factory <span class="hljs-keyword"><span class="hljs-keyword">instanceof</span></span> SmartFactoryBean) {
               isEagerInit = AccessController.doPrivileged(<span class="hljs-keyword"><span class="hljs-keyword">new</span></span> PrivilegedAction&lt;Boolean&gt;() {
                  <span class="hljs-meta"><span class="hljs-meta">@Override</span></span>
                  <span class="hljs-function"><span class="hljs-keyword"><span class="hljs-function"><span class="hljs-keyword">public</span></span></span><span class="hljs-function"> Boolean </span><span class="hljs-title"><span class="hljs-function"><span class="hljs-title">run</span></span></span><span class="hljs-params"><span class="hljs-function"><span class="hljs-params">()</span></span></span><span class="hljs-function"> </span></span>{
                     <span class="hljs-keyword"><span class="hljs-keyword">return</span></span> ((SmartFactoryBean&lt;?&gt;) factory).isEagerInit();
                  }
               }, getAccessControlContext());
            }
            <span class="hljs-keyword"><span class="hljs-keyword">else</span></span> {
               isEagerInit = (factory <span class="hljs-keyword"><span class="hljs-keyword">instanceof</span></span> SmartFactoryBean &amp;&amp;
                     ((SmartFactoryBean&lt;?&gt;) factory).isEagerInit());
            }
            <span class="hljs-keyword"><span class="hljs-keyword">if</span></span> (isEagerInit) {

               getBean(beanName);
            }
         }
         <span class="hljs-keyword"><span class="hljs-keyword">else</span></span> {
            <span class="hljs-comment"><span class="hljs-comment">// 对于普通的 Bean，只要调用 getBean(beanName) 这个方法就可以进行初始化了</span></span>
            getBean(beanName);
         }
      }
   }


   <span class="hljs-comment"><span class="hljs-comment">// 到这里说明所有的非懒加载的 singleton beans 已经完成了初始化</span></span>
   <span class="hljs-comment"><span class="hljs-comment">// 如果我们定义的 bean 是实现了 SmartInitializingSingleton 接口的，那么在这里得到回调，忽略</span></span>
   <span class="hljs-keyword"><span class="hljs-keyword">for</span></span> (String beanName : beanNames) {
      Object singletonInstance = getSingleton(beanName);
      <span class="hljs-keyword"><span class="hljs-keyword">if</span></span> (singletonInstance <span class="hljs-keyword"><span class="hljs-keyword">instanceof</span></span> SmartInitializingSingleton) {
         <span class="hljs-keyword"><span class="hljs-keyword">final</span></span> SmartInitializingSingleton smartSingleton = (SmartInitializingSingleton) singletonInstance;
         <span class="hljs-keyword"><span class="hljs-keyword">if</span></span> (System.getSecurityManager() != <span class="hljs-keyword"><span class="hljs-keyword">null</span></span>) {
            AccessController.doPrivileged(<span class="hljs-keyword"><span class="hljs-keyword">new</span></span> PrivilegedAction&lt;Object&gt;() {
               <span class="hljs-meta"><span class="hljs-meta">@Override</span></span>
               <span class="hljs-function"><span class="hljs-keyword"><span class="hljs-function"><span class="hljs-keyword">public</span></span></span><span class="hljs-function"> Object </span><span class="hljs-title"><span class="hljs-function"><span class="hljs-title">run</span></span></span><span class="hljs-params"><span class="hljs-function"><span class="hljs-params">()</span></span></span><span class="hljs-function"> </span></span>{
                  smartSingleton.afterSingletonsInstantiated();
                  <span class="hljs-keyword"><span class="hljs-keyword">return</span></span> <span class="hljs-keyword"><span class="hljs-keyword">null</span></span>;
               }
            }, getAccessControlContext());
         }
         <span class="hljs-keyword"><span class="hljs-keyword">else</span></span> {
            smartSingleton.afterSingletonsInstantiated();
         }
      }
   }
}</code></pre>
<p>接下来，我们就进入到 getBean(beanName) 方法了，这个方法我们经常用来从 BeanFactory 中获取一个 Bean，而初始化的过程也封装到了这个方法里。</p>
<h4 id="getbean">getBean</h4>
<p>在继续前进之前，读者应该具备 FactoryBean 的知识，如果读者还不熟悉，请移步附录部分了解 FactoryBean。</p>
<p>// AbstractBeanFactory 196</p>
<pre><code class="language-java hljs"><span class="hljs-meta"><span class="hljs-meta">@Override</span></span>
<span class="hljs-function"><span class="hljs-keyword"><span class="hljs-function"><span class="hljs-keyword">public</span></span></span><span class="hljs-function"> Object </span><span class="hljs-title"><span class="hljs-function"><span class="hljs-title">getBean</span></span></span><span class="hljs-params"><span class="hljs-function"><span class="hljs-params">(String name)</span></span></span><span class="hljs-function"> </span><span class="hljs-keyword"><span class="hljs-function"><span class="hljs-keyword">throws</span></span></span><span class="hljs-function"> BeansException </span></span>{
   <span class="hljs-keyword"><span class="hljs-keyword">return</span></span> doGetBean(name, <span class="hljs-keyword"><span class="hljs-keyword">null</span></span>, <span class="hljs-keyword"><span class="hljs-keyword">null</span></span>, <span class="hljs-keyword"><span class="hljs-keyword">false</span></span>);
}

<span class="hljs-comment"><span class="hljs-comment">// 我们在剖析初始化 Bean 的过程，但是 getBean 方法我们经常是用来从容器中获取 Bean 用的，注意切换思路，</span></span>
<span class="hljs-comment"><span class="hljs-comment">// 已经初始化过了就从容器中直接返回，否则就先初始化再返回</span></span>
<span class="hljs-meta"><span class="hljs-meta">@SuppressWarnings</span></span>(<span class="hljs-string"><span class="hljs-string">"unchecked"</span></span>)
<span class="hljs-keyword"><span class="hljs-keyword">protected</span></span> &lt;T&gt; <span class="hljs-function"><span class="hljs-function">T </span><span class="hljs-title"><span class="hljs-function"><span class="hljs-title">doGetBean</span></span></span><span class="hljs-params"><span class="hljs-function"><span class="hljs-params">(
      </span></span><span class="hljs-keyword"><span class="hljs-function"><span class="hljs-params"><span class="hljs-keyword">final</span></span></span></span><span class="hljs-function"><span class="hljs-params"> String name, </span></span><span class="hljs-keyword"><span class="hljs-function"><span class="hljs-params"><span class="hljs-keyword">final</span></span></span></span><span class="hljs-function"><span class="hljs-params"> Class&lt;T&gt; requiredType, </span></span><span class="hljs-keyword"><span class="hljs-function"><span class="hljs-params"><span class="hljs-keyword">final</span></span></span></span><span class="hljs-function"><span class="hljs-params"> Object[] args, </span></span><span class="hljs-keyword"><span class="hljs-function"><span class="hljs-params"><span class="hljs-keyword">boolean</span></span></span></span><span class="hljs-function"><span class="hljs-params"> typeCheckOnly)</span></span></span><span class="hljs-function">
      </span><span class="hljs-keyword"><span class="hljs-function"><span class="hljs-keyword">throws</span></span></span><span class="hljs-function"> BeansException </span></span>{
   <span class="hljs-comment"><span class="hljs-comment">// 获取一个 “正统的” beanName，处理两种情况，一个是前面说的 FactoryBean(前面带 ‘&amp;’)，</span></span>
   <span class="hljs-comment"><span class="hljs-comment">// 一个是别名问题，因为这个方法是 getBean，获取 Bean 用的，你要是传一个别名进来，是完全可以的</span></span>
   <span class="hljs-keyword"><span class="hljs-keyword">final</span></span> String beanName = transformedBeanName(name);

   <span class="hljs-comment"><span class="hljs-comment">// 注意跟着这个，这个是返回值</span></span>
   Object bean; 

   <span class="hljs-comment"><span class="hljs-comment">// 检查下是不是已经创建过了</span></span>
   Object sharedInstance = getSingleton(beanName);

   <span class="hljs-comment"><span class="hljs-comment">// 这里说下 args 呗，虽然看上去一点不重要。前面我们一路进来的时候都是 getBean(beanName)，</span></span>
   <span class="hljs-comment"><span class="hljs-comment">// 所以 args 传参其实是 null 的，但是如果 args 不为空的时候，那么意味着调用方不是希望获取 Bean，而是创建 Bean</span></span>
   <span class="hljs-keyword"><span class="hljs-keyword">if</span></span> (sharedInstance != <span class="hljs-keyword"><span class="hljs-keyword">null</span></span> &amp;&amp; args == <span class="hljs-keyword"><span class="hljs-keyword">null</span></span>) {
      <span class="hljs-keyword"><span class="hljs-keyword">if</span></span> (logger.isDebugEnabled()) {
         <span class="hljs-keyword"><span class="hljs-keyword">if</span></span> (isSingletonCurrentlyInCreation(beanName)) {
            logger.debug(<span class="hljs-string"><span class="hljs-string">"..."</span></span>);
         }
         <span class="hljs-keyword"><span class="hljs-keyword">else</span></span> {
            logger.debug(<span class="hljs-string"><span class="hljs-string">"Returning cached instance of singleton bean '"</span></span> + beanName + <span class="hljs-string"><span class="hljs-string">"'"</span></span>);
         }
      }
      <span class="hljs-comment"><span class="hljs-comment">// 下面这个方法：如果是普通 Bean 的话，直接返回 sharedInstance，</span></span>
      <span class="hljs-comment"><span class="hljs-comment">// 如果是 FactoryBean 的话，返回它创建的那个实例对象</span></span>
      <span class="hljs-comment"><span class="hljs-comment">// (FactoryBean 知识，读者若不清楚请移步附录)</span></span>
      bean = getObjectForBeanInstance(sharedInstance, name, beanName, <span class="hljs-keyword"><span class="hljs-keyword">null</span></span>);
   }

   <span class="hljs-keyword"><span class="hljs-keyword">else</span></span> {
      <span class="hljs-keyword"><span class="hljs-keyword">if</span></span> (isPrototypeCurrentlyInCreation(beanName)) {
         <span class="hljs-comment"><span class="hljs-comment">// 创建过了此 beanName 的 prototype 类型的 bean，那么抛异常，</span></span>
         <span class="hljs-comment"><span class="hljs-comment">// 往往是因为陷入了循环引用</span></span>
         <span class="hljs-keyword"><span class="hljs-keyword">throw</span></span> <span class="hljs-keyword"><span class="hljs-keyword">new</span></span> BeanCurrentlyInCreationException(beanName);
      }

      <span class="hljs-comment"><span class="hljs-comment">// 检查一下这个 BeanDefinition 在容器中是否存在</span></span>
      BeanFactory parentBeanFactory = getParentBeanFactory();
      <span class="hljs-keyword"><span class="hljs-keyword">if</span></span> (parentBeanFactory != <span class="hljs-keyword"><span class="hljs-keyword">null</span></span> &amp;&amp; !containsBeanDefinition(beanName)) {
         <span class="hljs-comment"><span class="hljs-comment">// 如果当前容器不存在这个 BeanDefinition，试试父容器中有没有</span></span>
         String nameToLookup = originalBeanName(name);
         <span class="hljs-keyword"><span class="hljs-keyword">if</span></span> (args != <span class="hljs-keyword"><span class="hljs-keyword">null</span></span>) {
            <span class="hljs-comment"><span class="hljs-comment">// 返回父容器的查询结果</span></span>
            <span class="hljs-keyword"><span class="hljs-keyword">return</span></span> (T) parentBeanFactory.getBean(nameToLookup, args);
         }
         <span class="hljs-keyword"><span class="hljs-keyword">else</span></span> {
            <span class="hljs-comment"><span class="hljs-comment">// No args -&gt; delegate to standard getBean method.</span></span>
            <span class="hljs-keyword"><span class="hljs-keyword">return</span></span> parentBeanFactory.getBean(nameToLookup, requiredType);
         }
      }

      <span class="hljs-keyword"><span class="hljs-keyword">if</span></span> (!typeCheckOnly) {
         <span class="hljs-comment"><span class="hljs-comment">// typeCheckOnly 为 false，将当前 beanName 放入一个 alreadyCreated 的 Set 集合中。</span></span>
         markBeanAsCreated(beanName);
      }

      <span class="hljs-comment"><span class="hljs-comment">/*
       * 稍稍总结一下：
       * 到这里的话，要准备创建 Bean 了，对于 singleton 的 Bean 来说，容器中还没创建过此 Bean；
       * 对于 prototype 的 Bean 来说，本来就是要创建一个新的 Bean。
       */</span></span>
      <span class="hljs-keyword"><span class="hljs-keyword">try</span></span> {
         <span class="hljs-keyword"><span class="hljs-keyword">final</span></span> RootBeanDefinition mbd = getMergedLocalBeanDefinition(beanName);
         checkMergedBeanDefinition(mbd, beanName, args);

         <span class="hljs-comment"><span class="hljs-comment">// 先初始化依赖的所有 Bean，这个很好理解。</span></span>
         <span class="hljs-comment"><span class="hljs-comment">// 注意，这里的依赖指的是 depends-on 中定义的依赖</span></span>
         String[] dependsOn = mbd.getDependsOn();
         <span class="hljs-keyword"><span class="hljs-keyword">if</span></span> (dependsOn != <span class="hljs-keyword"><span class="hljs-keyword">null</span></span>) {
            <span class="hljs-keyword"><span class="hljs-keyword">for</span></span> (String dep : dependsOn) {
               <span class="hljs-comment"><span class="hljs-comment">// 检查是不是有循环依赖，这里的循环依赖和我们前面说的循环依赖又不一样，这里肯定是不允许出现的，不然要乱套了，读者想一下就知道了</span></span>
               <span class="hljs-keyword"><span class="hljs-keyword">if</span></span> (isDependent(beanName, dep)) {
                  <span class="hljs-keyword"><span class="hljs-keyword">throw</span></span> <span class="hljs-keyword"><span class="hljs-keyword">new</span></span> BeanCreationException(mbd.getResourceDescription(), beanName,
                        <span class="hljs-string"><span class="hljs-string">"Circular depends-on relationship between '"</span></span> + beanName + <span class="hljs-string"><span class="hljs-string">"' and '"</span></span> + dep + <span class="hljs-string"><span class="hljs-string">"'"</span></span>);
               }
               <span class="hljs-comment"><span class="hljs-comment">// 注册一下依赖关系</span></span>
               registerDependentBean(dep, beanName);
               <span class="hljs-comment"><span class="hljs-comment">// 先初始化被依赖项</span></span>
               getBean(dep);
            }
         }

         <span class="hljs-comment"><span class="hljs-comment">// 如果是 singleton scope 的，创建 singleton 的实例</span></span>
         <span class="hljs-keyword"><span class="hljs-keyword">if</span></span> (mbd.isSingleton()) {
            sharedInstance = getSingleton(beanName, <span class="hljs-keyword"><span class="hljs-keyword">new</span></span> ObjectFactory&lt;Object&gt;() {
               <span class="hljs-meta"><span class="hljs-meta">@Override</span></span>
               <span class="hljs-function"><span class="hljs-keyword"><span class="hljs-function"><span class="hljs-keyword">public</span></span></span><span class="hljs-function"> Object </span><span class="hljs-title"><span class="hljs-function"><span class="hljs-title">getObject</span></span></span><span class="hljs-params"><span class="hljs-function"><span class="hljs-params">()</span></span></span><span class="hljs-function"> </span><span class="hljs-keyword"><span class="hljs-function"><span class="hljs-keyword">throws</span></span></span><span class="hljs-function"> BeansException </span></span>{
                  <span class="hljs-keyword"><span class="hljs-keyword">try</span></span> {
                     <span class="hljs-comment"><span class="hljs-comment">// 执行创建 Bean，详情后面再说</span></span>
                     <span class="hljs-keyword"><span class="hljs-keyword">return</span></span> createBean(beanName, mbd, args);
                  }
                  <span class="hljs-keyword"><span class="hljs-keyword">catch</span></span> (BeansException ex) {
                     destroySingleton(beanName);
                     <span class="hljs-keyword"><span class="hljs-keyword">throw</span></span> ex;
                  }
               }
            });
            bean = getObjectForBeanInstance(sharedInstance, name, beanName, mbd);
         }

         <span class="hljs-comment"><span class="hljs-comment">// 如果是 prototype scope 的，创建 prototype 的实例</span></span>
         <span class="hljs-keyword"><span class="hljs-keyword">else</span></span> <span class="hljs-keyword"><span class="hljs-keyword">if</span></span> (mbd.isPrototype()) {
            <span class="hljs-comment"><span class="hljs-comment">// It's a prototype -&gt; create a new instance.</span></span>
            Object prototypeInstance = <span class="hljs-keyword"><span class="hljs-keyword">null</span></span>;
            <span class="hljs-keyword"><span class="hljs-keyword">try</span></span> {
               beforePrototypeCreation(beanName);
               <span class="hljs-comment"><span class="hljs-comment">// 执行创建 Bean</span></span>
               prototypeInstance = createBean(beanName, mbd, args);
            }
            <span class="hljs-keyword"><span class="hljs-keyword">finally</span></span> {
               afterPrototypeCreation(beanName);
            }
            bean = getObjectForBeanInstance(prototypeInstance, name, beanName, mbd);
         }

         <span class="hljs-comment"><span class="hljs-comment">// 如果不是 singleton 和 prototype 的话，需要委托给相应的实现类来处理</span></span>
         <span class="hljs-keyword"><span class="hljs-keyword">else</span></span> {
            String scopeName = mbd.getScope();
            <span class="hljs-keyword"><span class="hljs-keyword">final</span></span> Scope scope = <span class="hljs-keyword"><span class="hljs-keyword">this</span></span>.scopes.get(scopeName);
            <span class="hljs-keyword"><span class="hljs-keyword">if</span></span> (scope == <span class="hljs-keyword"><span class="hljs-keyword">null</span></span>) {
               <span class="hljs-keyword"><span class="hljs-keyword">throw</span></span> <span class="hljs-keyword"><span class="hljs-keyword">new</span></span> IllegalStateException(<span class="hljs-string"><span class="hljs-string">"No Scope registered for scope name '"</span></span> + scopeName + <span class="hljs-string"><span class="hljs-string">"'"</span></span>);
            }
            <span class="hljs-keyword"><span class="hljs-keyword">try</span></span> {
               Object scopedInstance = scope.get(beanName, <span class="hljs-keyword"><span class="hljs-keyword">new</span></span> ObjectFactory&lt;Object&gt;() {
                  <span class="hljs-meta"><span class="hljs-meta">@Override</span></span>
                  <span class="hljs-function"><span class="hljs-keyword"><span class="hljs-function"><span class="hljs-keyword">public</span></span></span><span class="hljs-function"> Object </span><span class="hljs-title"><span class="hljs-function"><span class="hljs-title">getObject</span></span></span><span class="hljs-params"><span class="hljs-function"><span class="hljs-params">()</span></span></span><span class="hljs-function"> </span><span class="hljs-keyword"><span class="hljs-function"><span class="hljs-keyword">throws</span></span></span><span class="hljs-function"> BeansException </span></span>{
                     beforePrototypeCreation(beanName);
                     <span class="hljs-keyword"><span class="hljs-keyword">try</span></span> {
                        <span class="hljs-comment"><span class="hljs-comment">// 执行创建 Bean</span></span>
                        <span class="hljs-keyword"><span class="hljs-keyword">return</span></span> createBean(beanName, mbd, args);
                     }
                     <span class="hljs-keyword"><span class="hljs-keyword">finally</span></span> {
                        afterPrototypeCreation(beanName);
                     }
                  }
               });
               bean = getObjectForBeanInstance(scopedInstance, name, beanName, mbd);
            }
            <span class="hljs-keyword"><span class="hljs-keyword">catch</span></span> (IllegalStateException ex) {
               <span class="hljs-keyword"><span class="hljs-keyword">throw</span></span> <span class="hljs-keyword"><span class="hljs-keyword">new</span></span> BeanCreationException(beanName,
                     <span class="hljs-string"><span class="hljs-string">"Scope '"</span></span> + scopeName + <span class="hljs-string"><span class="hljs-string">"' is not active for the current thread; consider "</span></span> +
                     <span class="hljs-string"><span class="hljs-string">"defining a scoped proxy for this bean if you intend to refer to it from a singleton"</span></span>,
                     ex);
            }
         }
      }
      <span class="hljs-keyword"><span class="hljs-keyword">catch</span></span> (BeansException ex) {
         cleanupAfterBeanCreationFailure(beanName);
         <span class="hljs-keyword"><span class="hljs-keyword">throw</span></span> ex;
      }
   }

   <span class="hljs-comment"><span class="hljs-comment">// 最后，检查一下类型对不对，不对的话就抛异常，对的话就返回了</span></span>
   <span class="hljs-keyword"><span class="hljs-keyword">if</span></span> (requiredType != <span class="hljs-keyword"><span class="hljs-keyword">null</span></span> &amp;&amp; bean != <span class="hljs-keyword"><span class="hljs-keyword">null</span></span> &amp;&amp; !requiredType.isInstance(bean)) {
      <span class="hljs-keyword"><span class="hljs-keyword">try</span></span> {
         <span class="hljs-keyword"><span class="hljs-keyword">return</span></span> getTypeConverter().convertIfNecessary(bean, requiredType);
      }
      <span class="hljs-keyword"><span class="hljs-keyword">catch</span></span> (TypeMismatchException ex) {
         <span class="hljs-keyword"><span class="hljs-keyword">if</span></span> (logger.isDebugEnabled()) {
            logger.debug(<span class="hljs-string"><span class="hljs-string">"Failed to convert bean '"</span></span> + name + <span class="hljs-string"><span class="hljs-string">"' to required type '"</span></span> +
                  ClassUtils.getQualifiedName(requiredType) + <span class="hljs-string"><span class="hljs-string">"'"</span></span>, ex);
         }
         <span class="hljs-keyword"><span class="hljs-keyword">throw</span></span> <span class="hljs-keyword"><span class="hljs-keyword">new</span></span> BeanNotOfRequiredTypeException(name, requiredType, bean.getClass());
      }
   }
   <span class="hljs-keyword"><span class="hljs-keyword">return</span></span> (T) bean;
}</code></pre>
<p>大家应该也猜到了，接下来当然是分析 createBean 方法：</p>
<pre><code class="language-java hljs"><span class="hljs-function"><span class="hljs-keyword"><span class="hljs-function"><span class="hljs-keyword">protected</span></span></span><span class="hljs-function"> </span><span class="hljs-keyword"><span class="hljs-function"><span class="hljs-keyword">abstract</span></span></span><span class="hljs-function"> Object </span><span class="hljs-title"><span class="hljs-function"><span class="hljs-title">createBean</span></span></span><span class="hljs-params"><span class="hljs-function"><span class="hljs-params">(String beanName, RootBeanDefinition mbd, Object[] args)</span></span></span><span class="hljs-function"> </span><span class="hljs-keyword"><span class="hljs-function"><span class="hljs-keyword">throws</span></span></span><span class="hljs-function"> BeanCreationException</span></span>;</code></pre>
<p>第三个参数 args 数组代表创建实例需要的参数，不就是给构造方法用的参数，或者是工厂 Bean 的参数嘛，不过要注意，在我们的初始化阶段，args 是 null。</p>
<p>这回我们要到一个新的类了 AbstractAutowireCapableBeanFactory，看类名，AutowireCapable？类名是不是也说明了点问题了。</p>
<p>主要是为了以下场景，采用 @Autowired 注解注入属性值：</p>
<pre><code class="language-java hljs"><span class="hljs-keyword"><span class="hljs-keyword">public</span></span> <span class="hljs-class"><span class="hljs-keyword"><span class="hljs-class"><span class="hljs-keyword">class</span></span></span><span class="hljs-class"> </span><span class="hljs-title"><span class="hljs-class"><span class="hljs-title">MessageServiceImpl</span></span></span><span class="hljs-class"> </span><span class="hljs-keyword"><span class="hljs-class"><span class="hljs-keyword">implements</span></span></span><span class="hljs-class"> </span><span class="hljs-title"><span class="hljs-class"><span class="hljs-title">MessageService</span></span></span><span class="hljs-class"> </span></span>{
    <span class="hljs-meta"><span class="hljs-meta">@Autowired</span></span>
    <span class="hljs-keyword"><span class="hljs-keyword">private</span></span> UserService userService;

    <span class="hljs-function"><span class="hljs-keyword"><span class="hljs-function"><span class="hljs-keyword">public</span></span></span><span class="hljs-function"> String </span><span class="hljs-title"><span class="hljs-function"><span class="hljs-title">getMessage</span></span></span><span class="hljs-params"><span class="hljs-function"><span class="hljs-params">()</span></span></span><span class="hljs-function"> </span></span>{
        <span class="hljs-keyword"><span class="hljs-keyword">return</span></span> userService.getMessage();
    }
}</code></pre>
<pre><code class="language-xml hljs"><span class="hljs-tag"><span class="hljs-tag">&lt;</span><span class="hljs-name"><span class="hljs-tag"><span class="hljs-name">bean</span></span></span><span class="hljs-tag"> </span><span class="hljs-attr"><span class="hljs-tag"><span class="hljs-attr">id</span></span></span><span class="hljs-tag">=</span><span class="hljs-string"><span class="hljs-tag"><span class="hljs-string">"messageService"</span></span></span><span class="hljs-tag"> </span><span class="hljs-attr"><span class="hljs-tag"><span class="hljs-attr">class</span></span></span><span class="hljs-tag">=</span><span class="hljs-string"><span class="hljs-tag"><span class="hljs-string">"com.javadoop.example.MessageServiceImpl"</span></span></span><span class="hljs-tag"> /&gt;</span></span></code></pre>
<p>以上这种属于混用了 xml 和 注解 两种方式的配置方式，Spring 会处理这种情况。</p>
<p>好了，读者要知道这么回事就可以了，继续向前。</p>
<p>// AbstractAutowireCapableBeanFactory 447</p>
<pre><code class="language-java hljs"><span class="hljs-comment"><span class="hljs-comment">/**
 * Central method of this class: creates a bean instance,
 * populates the bean instance, applies post-processors, etc.
 * </span><span class="hljs-doctag"><span class="hljs-comment"><span class="hljs-doctag">@see</span></span></span><span class="hljs-comment"> #doCreateBean
 */</span></span>
<span class="hljs-meta"><span class="hljs-meta">@Override</span></span>
<span class="hljs-function"><span class="hljs-keyword"><span class="hljs-function"><span class="hljs-keyword">protected</span></span></span><span class="hljs-function"> Object </span><span class="hljs-title"><span class="hljs-function"><span class="hljs-title">createBean</span></span></span><span class="hljs-params"><span class="hljs-function"><span class="hljs-params">(String beanName, RootBeanDefinition mbd, Object[] args)</span></span></span><span class="hljs-function"> </span><span class="hljs-keyword"><span class="hljs-function"><span class="hljs-keyword">throws</span></span></span><span class="hljs-function"> BeanCreationException </span></span>{
   <span class="hljs-keyword"><span class="hljs-keyword">if</span></span> (logger.isDebugEnabled()) {
      logger.debug(<span class="hljs-string"><span class="hljs-string">"Creating instance of bean '"</span></span> + beanName + <span class="hljs-string"><span class="hljs-string">"'"</span></span>);
   }
   RootBeanDefinition mbdToUse = mbd;

   <span class="hljs-comment"><span class="hljs-comment">// 确保 BeanDefinition 中的 Class 被加载</span></span>
   Class&lt;?&gt; resolvedClass = resolveBeanClass(mbd, beanName);
   <span class="hljs-keyword"><span class="hljs-keyword">if</span></span> (resolvedClass != <span class="hljs-keyword"><span class="hljs-keyword">null</span></span> &amp;&amp; !mbd.hasBeanClass() &amp;&amp; mbd.getBeanClassName() != <span class="hljs-keyword"><span class="hljs-keyword">null</span></span>) {
      mbdToUse = <span class="hljs-keyword"><span class="hljs-keyword">new</span></span> RootBeanDefinition(mbd);
      mbdToUse.setBeanClass(resolvedClass);
   }

   <span class="hljs-comment"><span class="hljs-comment">// 准备方法覆写，这里又涉及到一个概念：MethodOverrides，它来自于 bean 定义中的 &lt;lookup-method /&gt; </span></span>
   <span class="hljs-comment"><span class="hljs-comment">// 和 &lt;replaced-method /&gt;，如果读者感兴趣，回到 bean 解析的地方看看对这两个标签的解析。</span></span>
   <span class="hljs-comment"><span class="hljs-comment">// 我在附录中也对这两个标签的相关知识点进行了介绍，读者可以移步去看看</span></span>
   <span class="hljs-keyword"><span class="hljs-keyword">try</span></span> {
      mbdToUse.prepareMethodOverrides();
   }
   <span class="hljs-keyword"><span class="hljs-keyword">catch</span></span> (BeanDefinitionValidationException ex) {
      <span class="hljs-keyword"><span class="hljs-keyword">throw</span></span> <span class="hljs-keyword"><span class="hljs-keyword">new</span></span> BeanDefinitionStoreException(mbdToUse.getResourceDescription(),
            beanName, <span class="hljs-string"><span class="hljs-string">"Validation of method overrides failed"</span></span>, ex);
   }

   <span class="hljs-keyword"><span class="hljs-keyword">try</span></span> {
      <span class="hljs-comment"><span class="hljs-comment">// 让 InstantiationAwareBeanPostProcessor 在这一步有机会返回代理，</span></span>
      <span class="hljs-comment"><span class="hljs-comment">// 在 《Spring AOP 源码分析》那篇文章中有解释，这里先跳过</span></span>
      Object bean = resolveBeforeInstantiation(beanName, mbdToUse);
      <span class="hljs-keyword"><span class="hljs-keyword">if</span></span> (bean != <span class="hljs-keyword"><span class="hljs-keyword">null</span></span>) {
         <span class="hljs-keyword"><span class="hljs-keyword">return</span></span> bean; 
      }
   }
   <span class="hljs-keyword"><span class="hljs-keyword">catch</span></span> (Throwable ex) {
      <span class="hljs-keyword"><span class="hljs-keyword">throw</span></span> <span class="hljs-keyword"><span class="hljs-keyword">new</span></span> BeanCreationException(mbdToUse.getResourceDescription(), beanName,
            <span class="hljs-string"><span class="hljs-string">"BeanPostProcessor before instantiation of bean failed"</span></span>, ex);
   }
   <span class="hljs-comment"><span class="hljs-comment">// 重头戏，创建 bean</span></span>
   Object beanInstance = doCreateBean(beanName, mbdToUse, args);
   <span class="hljs-keyword"><span class="hljs-keyword">if</span></span> (logger.isDebugEnabled()) {
      logger.debug(<span class="hljs-string"><span class="hljs-string">"Finished creating instance of bean '"</span></span> + beanName + <span class="hljs-string"><span class="hljs-string">"'"</span></span>);
   }
   <span class="hljs-keyword"><span class="hljs-keyword">return</span></span> beanInstance;
}</code></pre>
<h4 id="创建-bean">创建 Bean</h4>
<p>我们继续往里看 doCreateBean 这个方法：</p>
<pre><code class="language-java hljs"><span class="hljs-comment"><span class="hljs-comment">/**
 * Actually create the specified bean. Pre-creation processing has already happened
 * at this point, e.g. checking {</span><span class="hljs-doctag"><span class="hljs-comment"><span class="hljs-doctag">@code</span></span></span><span class="hljs-comment"> postProcessBeforeInstantiation} callbacks.
 * &lt;p&gt;Differentiates between default bean instantiation, use of a
 * factory method, and autowiring a constructor.
 * </span><span class="hljs-doctag"><span class="hljs-comment"><span class="hljs-doctag">@param</span></span></span><span class="hljs-comment"> beanName the name of the bean
 * </span><span class="hljs-doctag"><span class="hljs-comment"><span class="hljs-doctag">@param</span></span></span><span class="hljs-comment"> mbd the merged bean definition for the bean
 * </span><span class="hljs-doctag"><span class="hljs-comment"><span class="hljs-doctag">@param</span></span></span><span class="hljs-comment"> args explicit arguments to use for constructor or factory method invocation
 * </span><span class="hljs-doctag"><span class="hljs-comment"><span class="hljs-doctag">@return</span></span></span><span class="hljs-comment"> a new instance of the bean
 * </span><span class="hljs-doctag"><span class="hljs-comment"><span class="hljs-doctag">@throws</span></span></span><span class="hljs-comment"> BeanCreationException if the bean could not be created
 * </span><span class="hljs-doctag"><span class="hljs-comment"><span class="hljs-doctag">@see</span></span></span><span class="hljs-comment"> #instantiateBean
 * </span><span class="hljs-doctag"><span class="hljs-comment"><span class="hljs-doctag">@see</span></span></span><span class="hljs-comment"> #instantiateUsingFactoryMethod
 * </span><span class="hljs-doctag"><span class="hljs-comment"><span class="hljs-doctag">@see</span></span></span><span class="hljs-comment"> #autowireConstructor
 */</span></span>
<span class="hljs-function"><span class="hljs-keyword"><span class="hljs-function"><span class="hljs-keyword">protected</span></span></span><span class="hljs-function"> Object </span><span class="hljs-title"><span class="hljs-function"><span class="hljs-title">doCreateBean</span></span></span><span class="hljs-params"><span class="hljs-function"><span class="hljs-params">(</span></span><span class="hljs-keyword"><span class="hljs-function"><span class="hljs-params"><span class="hljs-keyword">final</span></span></span></span><span class="hljs-function"><span class="hljs-params"> String beanName, </span></span><span class="hljs-keyword"><span class="hljs-function"><span class="hljs-params"><span class="hljs-keyword">final</span></span></span></span><span class="hljs-function"><span class="hljs-params"> RootBeanDefinition mbd, </span></span><span class="hljs-keyword"><span class="hljs-function"><span class="hljs-params"><span class="hljs-keyword">final</span></span></span></span><span class="hljs-function"><span class="hljs-params"> Object[] args)</span></span></span><span class="hljs-function">
      </span><span class="hljs-keyword"><span class="hljs-function"><span class="hljs-keyword">throws</span></span></span><span class="hljs-function"> BeanCreationException </span></span>{

   <span class="hljs-comment"><span class="hljs-comment">// Instantiate the bean.</span></span>
   BeanWrapper instanceWrapper = <span class="hljs-keyword"><span class="hljs-keyword">null</span></span>;
   <span class="hljs-keyword"><span class="hljs-keyword">if</span></span> (mbd.isSingleton()) {
      instanceWrapper = <span class="hljs-keyword"><span class="hljs-keyword">this</span></span>.factoryBeanInstanceCache.remove(beanName);
   }
   <span class="hljs-keyword"><span class="hljs-keyword">if</span></span> (instanceWrapper == <span class="hljs-keyword"><span class="hljs-keyword">null</span></span>) {
      <span class="hljs-comment"><span class="hljs-comment">// 说明不是 FactoryBean，这里实例化 Bean，这里非常关键，细节之后再说</span></span>
      instanceWrapper = createBeanInstance(beanName, mbd, args);
   }
   <span class="hljs-comment"><span class="hljs-comment">// 这个就是 Bean 里面的 我们定义的类 的实例，很多地方我直接描述成 "bean 实例"</span></span>
   <span class="hljs-keyword"><span class="hljs-keyword">final</span></span> Object bean = (instanceWrapper != <span class="hljs-keyword"><span class="hljs-keyword">null</span></span> ? instanceWrapper.getWrappedInstance() : <span class="hljs-keyword"><span class="hljs-keyword">null</span></span>);
   <span class="hljs-comment"><span class="hljs-comment">// 类型</span></span>
   Class&lt;?&gt; beanType = (instanceWrapper != <span class="hljs-keyword"><span class="hljs-keyword">null</span></span> ? instanceWrapper.getWrappedClass() : <span class="hljs-keyword"><span class="hljs-keyword">null</span></span>);
   mbd.resolvedTargetType = beanType;

   <span class="hljs-comment"><span class="hljs-comment">// 建议跳过吧，涉及接口：MergedBeanDefinitionPostProcessor</span></span>
   <span class="hljs-keyword"><span class="hljs-keyword">synchronized</span></span> (mbd.postProcessingLock) {
      <span class="hljs-keyword"><span class="hljs-keyword">if</span></span> (!mbd.postProcessed) {
         <span class="hljs-keyword"><span class="hljs-keyword">try</span></span> {
            <span class="hljs-comment"><span class="hljs-comment">// MergedBeanDefinitionPostProcessor，这个我真不展开说了，直接跳过吧，很少用的</span></span>
            applyMergedBeanDefinitionPostProcessors(mbd, beanType, beanName);
         }
         <span class="hljs-keyword"><span class="hljs-keyword">catch</span></span> (Throwable ex) {
            <span class="hljs-keyword"><span class="hljs-keyword">throw</span></span> <span class="hljs-keyword"><span class="hljs-keyword">new</span></span> BeanCreationException(mbd.getResourceDescription(), beanName,
                  <span class="hljs-string"><span class="hljs-string">"Post-processing of merged bean definition failed"</span></span>, ex);
         }
         mbd.postProcessed = <span class="hljs-keyword"><span class="hljs-keyword">true</span></span>;
      }
   }

   <span class="hljs-comment"><span class="hljs-comment">// Eagerly cache singletons to be able to resolve circular references</span></span>
   <span class="hljs-comment"><span class="hljs-comment">// even when triggered by lifecycle interfaces like BeanFactoryAware.</span></span>
   <span class="hljs-comment"><span class="hljs-comment">// 下面这块代码是为了解决循环依赖的问题，以后有时间，我再对循环依赖这个问题进行解析吧</span></span>
   <span class="hljs-keyword"><span class="hljs-keyword">boolean</span></span> earlySingletonExposure = (mbd.isSingleton() &amp;&amp; <span class="hljs-keyword"><span class="hljs-keyword">this</span></span>.allowCircularReferences &amp;&amp;
         isSingletonCurrentlyInCreation(beanName));
   <span class="hljs-keyword"><span class="hljs-keyword">if</span></span> (earlySingletonExposure) {
      <span class="hljs-keyword"><span class="hljs-keyword">if</span></span> (logger.isDebugEnabled()) {
         logger.debug(<span class="hljs-string"><span class="hljs-string">"Eagerly caching bean '"</span></span> + beanName +
               <span class="hljs-string"><span class="hljs-string">"' to allow for resolving potential circular references"</span></span>);
      }
      addSingletonFactory(beanName, <span class="hljs-keyword"><span class="hljs-keyword">new</span></span> ObjectFactory&lt;Object&gt;() {
         <span class="hljs-meta"><span class="hljs-meta">@Override</span></span>
         <span class="hljs-function"><span class="hljs-keyword"><span class="hljs-function"><span class="hljs-keyword">public</span></span></span><span class="hljs-function"> Object </span><span class="hljs-title"><span class="hljs-function"><span class="hljs-title">getObject</span></span></span><span class="hljs-params"><span class="hljs-function"><span class="hljs-params">()</span></span></span><span class="hljs-function"> </span><span class="hljs-keyword"><span class="hljs-function"><span class="hljs-keyword">throws</span></span></span><span class="hljs-function"> BeansException </span></span>{
            <span class="hljs-keyword"><span class="hljs-keyword">return</span></span> getEarlyBeanReference(beanName, mbd, bean);
         }
      });
   }

   <span class="hljs-comment"><span class="hljs-comment">// Initialize the bean instance.</span></span>
   Object exposedObject = bean;
   <span class="hljs-keyword"><span class="hljs-keyword">try</span></span> {
      <span class="hljs-comment"><span class="hljs-comment">// 这一步也是非常关键的，这一步负责属性装配，因为前面的实例只是实例化了，并没有设值，这里就是设值</span></span>
      populateBean(beanName, mbd, instanceWrapper);
      <span class="hljs-keyword"><span class="hljs-keyword">if</span></span> (exposedObject != <span class="hljs-keyword"><span class="hljs-keyword">null</span></span>) {
         <span class="hljs-comment"><span class="hljs-comment">// 还记得 init-method 吗？还有 InitializingBean 接口？还有 BeanPostProcessor 接口？</span></span>
         <span class="hljs-comment"><span class="hljs-comment">// 这里就是处理 bean 初始化完成后的各种回调</span></span>
         exposedObject = initializeBean(beanName, exposedObject, mbd);
      }
   }
   <span class="hljs-keyword"><span class="hljs-keyword">catch</span></span> (Throwable ex) {
      <span class="hljs-keyword"><span class="hljs-keyword">if</span></span> (ex <span class="hljs-keyword"><span class="hljs-keyword">instanceof</span></span> BeanCreationException &amp;&amp; beanName.equals(((BeanCreationException) ex).getBeanName())) {
         <span class="hljs-keyword"><span class="hljs-keyword">throw</span></span> (BeanCreationException) ex;
      }
      <span class="hljs-keyword"><span class="hljs-keyword">else</span></span> {
         <span class="hljs-keyword"><span class="hljs-keyword">throw</span></span> <span class="hljs-keyword"><span class="hljs-keyword">new</span></span> BeanCreationException(
               mbd.getResourceDescription(), beanName, <span class="hljs-string"><span class="hljs-string">"Initialization of bean failed"</span></span>, ex);
      }
   }

   <span class="hljs-keyword"><span class="hljs-keyword">if</span></span> (earlySingletonExposure) {
      <span class="hljs-comment"><span class="hljs-comment">// </span></span>
      Object earlySingletonReference = getSingleton(beanName, <span class="hljs-keyword"><span class="hljs-keyword">false</span></span>);
      <span class="hljs-keyword"><span class="hljs-keyword">if</span></span> (earlySingletonReference != <span class="hljs-keyword"><span class="hljs-keyword">null</span></span>) {
         <span class="hljs-keyword"><span class="hljs-keyword">if</span></span> (exposedObject == bean) {
            exposedObject = earlySingletonReference;
         }
         <span class="hljs-keyword"><span class="hljs-keyword">else</span></span> <span class="hljs-keyword"><span class="hljs-keyword">if</span></span> (!<span class="hljs-keyword"><span class="hljs-keyword">this</span></span>.allowRawInjectionDespiteWrapping &amp;&amp; hasDependentBean(beanName)) {
            String[] dependentBeans = getDependentBeans(beanName);
            Set&lt;String&gt; actualDependentBeans = <span class="hljs-keyword"><span class="hljs-keyword">new</span></span> LinkedHashSet&lt;String&gt;(dependentBeans.length);
            <span class="hljs-keyword"><span class="hljs-keyword">for</span></span> (String dependentBean : dependentBeans) {
               <span class="hljs-keyword"><span class="hljs-keyword">if</span></span> (!removeSingletonIfCreatedForTypeCheckOnly(dependentBean)) {
                  actualDependentBeans.add(dependentBean);
               }
            }
            <span class="hljs-keyword"><span class="hljs-keyword">if</span></span> (!actualDependentBeans.isEmpty()) {
               <span class="hljs-keyword"><span class="hljs-keyword">throw</span></span> <span class="hljs-keyword"><span class="hljs-keyword">new</span></span> BeanCurrentlyInCreationException(beanName,
                     <span class="hljs-string"><span class="hljs-string">"Bean with name '"</span></span> + beanName + <span class="hljs-string"><span class="hljs-string">"' has been injected into other beans ["</span></span> +
                     StringUtils.collectionToCommaDelimitedString(actualDependentBeans) +
                     <span class="hljs-string"><span class="hljs-string">"] in its raw version as part of a circular reference, but has eventually been "</span></span> +
                     <span class="hljs-string"><span class="hljs-string">"wrapped. This means that said other beans do not use the final version of the "</span></span> +
                     <span class="hljs-string"><span class="hljs-string">"bean. This is often the result of over-eager type matching - consider using "</span></span> +
                     <span class="hljs-string"><span class="hljs-string">"'getBeanNamesOfType' with the 'allowEagerInit' flag turned off, for example."</span></span>);
            }
         }
      }
   }

   <span class="hljs-comment"><span class="hljs-comment">// Register bean as disposable.</span></span>
   <span class="hljs-keyword"><span class="hljs-keyword">try</span></span> {
      registerDisposableBeanIfNecessary(beanName, bean, mbd);
   }
   <span class="hljs-keyword"><span class="hljs-keyword">catch</span></span> (BeanDefinitionValidationException ex) {
      <span class="hljs-keyword"><span class="hljs-keyword">throw</span></span> <span class="hljs-keyword"><span class="hljs-keyword">new</span></span> BeanCreationException(
            mbd.getResourceDescription(), beanName, <span class="hljs-string"><span class="hljs-string">"Invalid destruction signature"</span></span>, ex);
   }

   <span class="hljs-keyword"><span class="hljs-keyword">return</span></span> exposedObject;
}</code></pre>
<p>到这里，我们已经分析完了 doCreateBean 方法，总的来说，我们已经说完了整个初始化流程。</p>
<p>接下来我们挑 doCreateBean 中的三个细节出来说说。一个是创建 Bean 实例的 createBeanInstance 方法，一个是依赖注入的 populateBean 方法，还有就是回调方法 initializeBean。 </p>
<p>注意了，接下来的这三个方法要认真说那也是极其复杂的，很多地方我就点到为止了，感兴趣的读者可以自己往里看，最好就是碰到不懂的，自己写代码去调试它。</p>
<h5 id="创建-bean-实例">创建 Bean 实例</h5>
<p>我们先看看 createBeanInstance 方法。需要说明的是，这个方法如果每个分支都分析下去，必然也是极其复杂冗长的，我们挑重点说。此方法的目的就是实例化我们指定的类。</p>
<pre><code class="language-java hljs"><span class="hljs-function"><span class="hljs-keyword"><span class="hljs-function"><span class="hljs-keyword">protected</span></span></span><span class="hljs-function"> BeanWrapper </span><span class="hljs-title"><span class="hljs-function"><span class="hljs-title">createBeanInstance</span></span></span><span class="hljs-params"><span class="hljs-function"><span class="hljs-params">(String beanName, RootBeanDefinition mbd, Object[] args)</span></span></span><span class="hljs-function"> </span></span>{
   <span class="hljs-comment"><span class="hljs-comment">// 确保已经加载了此 class</span></span>
   Class&lt;?&gt; beanClass = resolveBeanClass(mbd, beanName);

   <span class="hljs-comment"><span class="hljs-comment">// 校验一下这个类的访问权限</span></span>
   <span class="hljs-keyword"><span class="hljs-keyword">if</span></span> (beanClass != <span class="hljs-keyword"><span class="hljs-keyword">null</span></span> &amp;&amp; !Modifier.isPublic(beanClass.getModifiers()) &amp;&amp; !mbd.isNonPublicAccessAllowed()) {
      <span class="hljs-keyword"><span class="hljs-keyword">throw</span></span> <span class="hljs-keyword"><span class="hljs-keyword">new</span></span> BeanCreationException(mbd.getResourceDescription(), beanName,
            <span class="hljs-string"><span class="hljs-string">"Bean class isn't public, and non-public access not allowed: "</span></span> + beanClass.getName());
   }

   <span class="hljs-keyword"><span class="hljs-keyword">if</span></span> (mbd.getFactoryMethodName() != <span class="hljs-keyword"><span class="hljs-keyword">null</span></span>)  {
      <span class="hljs-comment"><span class="hljs-comment">// 采用工厂方法实例化，不熟悉这个概念的读者请看附录，注意，不是 FactoryBean</span></span>
      <span class="hljs-keyword"><span class="hljs-keyword">return</span></span> instantiateUsingFactoryMethod(beanName, mbd, args);
   }

   <span class="hljs-comment"><span class="hljs-comment">// 如果不是第一次创建，比如第二次创建 prototype bean。</span></span>
   <span class="hljs-comment"><span class="hljs-comment">// 这种情况下，我们可以从第一次创建知道，采用无参构造函数，还是构造函数依赖注入 来完成实例化</span></span>
   <span class="hljs-keyword"><span class="hljs-keyword">boolean</span></span> resolved = <span class="hljs-keyword"><span class="hljs-keyword">false</span></span>;
   <span class="hljs-keyword"><span class="hljs-keyword">boolean</span></span> autowireNecessary = <span class="hljs-keyword"><span class="hljs-keyword">false</span></span>;
   <span class="hljs-keyword"><span class="hljs-keyword">if</span></span> (args == <span class="hljs-keyword"><span class="hljs-keyword">null</span></span>) {
      <span class="hljs-keyword"><span class="hljs-keyword">synchronized</span></span> (mbd.constructorArgumentLock) {
         <span class="hljs-keyword"><span class="hljs-keyword">if</span></span> (mbd.resolvedConstructorOrFactoryMethod != <span class="hljs-keyword"><span class="hljs-keyword">null</span></span>) {
            resolved = <span class="hljs-keyword"><span class="hljs-keyword">true</span></span>;
            autowireNecessary = mbd.constructorArgumentsResolved;
         }
      }
   }
   <span class="hljs-keyword"><span class="hljs-keyword">if</span></span> (resolved) {
      <span class="hljs-keyword"><span class="hljs-keyword">if</span></span> (autowireNecessary) {
         <span class="hljs-comment"><span class="hljs-comment">// 构造函数依赖注入</span></span>
         <span class="hljs-keyword"><span class="hljs-keyword">return</span></span> autowireConstructor(beanName, mbd, <span class="hljs-keyword"><span class="hljs-keyword">null</span></span>, <span class="hljs-keyword"><span class="hljs-keyword">null</span></span>);
      }
      <span class="hljs-keyword"><span class="hljs-keyword">else</span></span> {
         <span class="hljs-comment"><span class="hljs-comment">// 无参构造函数</span></span>
         <span class="hljs-keyword"><span class="hljs-keyword">return</span></span> instantiateBean(beanName, mbd);
      }
   }

   <span class="hljs-comment"><span class="hljs-comment">// 判断是否采用有参构造函数</span></span>
   Constructor&lt;?&gt;[] ctors = determineConstructorsFromBeanPostProcessors(beanClass, beanName);
   <span class="hljs-keyword"><span class="hljs-keyword">if</span></span> (ctors != <span class="hljs-keyword"><span class="hljs-keyword">null</span></span> ||
         mbd.getResolvedAutowireMode() == RootBeanDefinition.AUTOWIRE_CONSTRUCTOR ||
         mbd.hasConstructorArgumentValues() || !ObjectUtils.isEmpty(args))  {
      <span class="hljs-comment"><span class="hljs-comment">// 构造函数依赖注入</span></span>
      <span class="hljs-keyword"><span class="hljs-keyword">return</span></span> autowireConstructor(beanName, mbd, ctors, args);
   }

   <span class="hljs-comment"><span class="hljs-comment">// 调用无参构造函数</span></span>
   <span class="hljs-keyword"><span class="hljs-keyword">return</span></span> instantiateBean(beanName, mbd);
}</code></pre>
<p>挑个简单的<strong>无参构造函数</strong>构造实例来看看：</p>
<pre><code class="language-java hljs"><span class="hljs-function"><span class="hljs-keyword"><span class="hljs-function"><span class="hljs-keyword">protected</span></span></span><span class="hljs-function"> BeanWrapper </span><span class="hljs-title"><span class="hljs-function"><span class="hljs-title">instantiateBean</span></span></span><span class="hljs-params"><span class="hljs-function"><span class="hljs-params">(</span></span><span class="hljs-keyword"><span class="hljs-function"><span class="hljs-params"><span class="hljs-keyword">final</span></span></span></span><span class="hljs-function"><span class="hljs-params"> String beanName, </span></span><span class="hljs-keyword"><span class="hljs-function"><span class="hljs-params"><span class="hljs-keyword">final</span></span></span></span><span class="hljs-function"><span class="hljs-params"> RootBeanDefinition mbd)</span></span></span><span class="hljs-function"> </span></span>{
   <span class="hljs-keyword"><span class="hljs-keyword">try</span></span> {
      Object beanInstance;
      <span class="hljs-keyword"><span class="hljs-keyword">final</span></span> BeanFactory parent = <span class="hljs-keyword"><span class="hljs-keyword">this</span></span>;
      <span class="hljs-keyword"><span class="hljs-keyword">if</span></span> (System.getSecurityManager() != <span class="hljs-keyword"><span class="hljs-keyword">null</span></span>) {
         beanInstance = AccessController.doPrivileged(<span class="hljs-keyword"><span class="hljs-keyword">new</span></span> PrivilegedAction&lt;Object&gt;() {
            <span class="hljs-meta"><span class="hljs-meta">@Override</span></span>
            <span class="hljs-function"><span class="hljs-keyword"><span class="hljs-function"><span class="hljs-keyword">public</span></span></span><span class="hljs-function"> Object </span><span class="hljs-title"><span class="hljs-function"><span class="hljs-title">run</span></span></span><span class="hljs-params"><span class="hljs-function"><span class="hljs-params">()</span></span></span><span class="hljs-function"> </span></span>{

               <span class="hljs-keyword"><span class="hljs-keyword">return</span></span> getInstantiationStrategy().instantiate(mbd, beanName, parent);
            }
         }, getAccessControlContext());
      }
      <span class="hljs-keyword"><span class="hljs-keyword">else</span></span> {
         <span class="hljs-comment"><span class="hljs-comment">// 实例化</span></span>
         beanInstance = getInstantiationStrategy().instantiate(mbd, beanName, parent);
      }
      <span class="hljs-comment"><span class="hljs-comment">// 包装一下，返回</span></span>
      BeanWrapper bw = <span class="hljs-keyword"><span class="hljs-keyword">new</span></span> BeanWrapperImpl(beanInstance);
      initBeanWrapper(bw);
      <span class="hljs-keyword"><span class="hljs-keyword">return</span></span> bw;
   }
   <span class="hljs-keyword"><span class="hljs-keyword">catch</span></span> (Throwable ex) {
      <span class="hljs-keyword"><span class="hljs-keyword">throw</span></span> <span class="hljs-keyword"><span class="hljs-keyword">new</span></span> BeanCreationException(
            mbd.getResourceDescription(), beanName, <span class="hljs-string"><span class="hljs-string">"Instantiation of bean failed"</span></span>, ex);
   }
}</code></pre>
<p>我们可以看到，关键的地方在于：</p>
<pre><code class="language-java hljs">beanInstance = getInstantiationStrategy().instantiate(mbd, beanName, parent);</code></pre>
<p>这里会进行实际的实例化过程，我们进去看看:</p>
<p>// SimpleInstantiationStrategy 59</p>
<pre><code class="language-java hljs"><span class="hljs-meta"><span class="hljs-meta">@Override</span></span>
<span class="hljs-function"><span class="hljs-keyword"><span class="hljs-function"><span class="hljs-keyword">public</span></span></span><span class="hljs-function"> Object </span><span class="hljs-title"><span class="hljs-function"><span class="hljs-title">instantiate</span></span></span><span class="hljs-params"><span class="hljs-function"><span class="hljs-params">(RootBeanDefinition bd, String beanName, BeanFactory owner)</span></span></span><span class="hljs-function"> </span></span>{

   <span class="hljs-comment"><span class="hljs-comment">// 如果不存在方法覆写，那就使用 java 反射进行实例化，否则使用 CGLIB,</span></span>
   <span class="hljs-comment"><span class="hljs-comment">// 方法覆写 请参见附录"方法注入"中对 lookup-method 和 replaced-method 的介绍</span></span>
   <span class="hljs-keyword"><span class="hljs-keyword">if</span></span> (bd.getMethodOverrides().isEmpty()) {
      Constructor&lt;?&gt; constructorToUse;
      <span class="hljs-keyword"><span class="hljs-keyword">synchronized</span></span> (bd.constructorArgumentLock) {
         constructorToUse = (Constructor&lt;?&gt;) bd.resolvedConstructorOrFactoryMethod;
         <span class="hljs-keyword"><span class="hljs-keyword">if</span></span> (constructorToUse == <span class="hljs-keyword"><span class="hljs-keyword">null</span></span>) {
            <span class="hljs-keyword"><span class="hljs-keyword">final</span></span> Class&lt;?&gt; clazz = bd.getBeanClass();
            <span class="hljs-keyword"><span class="hljs-keyword">if</span></span> (clazz.isInterface()) {
               <span class="hljs-keyword"><span class="hljs-keyword">throw</span></span> <span class="hljs-keyword"><span class="hljs-keyword">new</span></span> BeanInstantiationException(clazz, <span class="hljs-string"><span class="hljs-string">"Specified class is an interface"</span></span>);
            }
            <span class="hljs-keyword"><span class="hljs-keyword">try</span></span> {
               <span class="hljs-keyword"><span class="hljs-keyword">if</span></span> (System.getSecurityManager() != <span class="hljs-keyword"><span class="hljs-keyword">null</span></span>) {
                  constructorToUse = AccessController.doPrivileged(<span class="hljs-keyword"><span class="hljs-keyword">new</span></span> PrivilegedExceptionAction&lt;Constructor&lt;?&gt;&gt;() {
                     <span class="hljs-meta"><span class="hljs-meta">@Override</span></span>
                     <span class="hljs-keyword"><span class="hljs-keyword">public</span></span> Constructor&lt;?&gt; run() <span class="hljs-keyword"><span class="hljs-keyword">throws</span></span> Exception {
                        <span class="hljs-keyword"><span class="hljs-keyword">return</span></span> clazz.getDeclaredConstructor((Class[]) <span class="hljs-keyword"><span class="hljs-keyword">null</span></span>);
                     }
                  });
               }
               <span class="hljs-keyword"><span class="hljs-keyword">else</span></span> {
                  constructorToUse = clazz.getDeclaredConstructor((Class[]) <span class="hljs-keyword"><span class="hljs-keyword">null</span></span>);
               }
               bd.resolvedConstructorOrFactoryMethod = constructorToUse;
            }
            <span class="hljs-keyword"><span class="hljs-keyword">catch</span></span> (Throwable ex) {
               <span class="hljs-keyword"><span class="hljs-keyword">throw</span></span> <span class="hljs-keyword"><span class="hljs-keyword">new</span></span> BeanInstantiationException(clazz, <span class="hljs-string"><span class="hljs-string">"No default constructor found"</span></span>, ex);
            }
         }
      }
      <span class="hljs-comment"><span class="hljs-comment">// 利用构造方法进行实例化</span></span>
      <span class="hljs-keyword"><span class="hljs-keyword">return</span></span> BeanUtils.instantiateClass(constructorToUse);
   }
   <span class="hljs-keyword"><span class="hljs-keyword">else</span></span> {
      <span class="hljs-comment"><span class="hljs-comment">// 存在方法覆写，利用 CGLIB 来完成实例化，需要依赖于 CGLIB 生成子类，这里就不展开了。</span></span>
      <span class="hljs-comment"><span class="hljs-comment">// tips: 因为如果不使用 CGLIB 的话，存在 override 的情况 JDK 并没有提供相应的实例化支持</span></span>
      <span class="hljs-keyword"><span class="hljs-keyword">return</span></span> instantiateWithMethodInjection(bd, beanName, owner);
   }
}</code></pre>
<p>到这里，我们就算实例化完成了。我们开始说怎么进行属性注入。</p>
<h5 id="bean-属性注入">bean 属性注入</h5>
<p>看完了 createBeanInstance(...) 方法，我们来看看 populateBean(...) 方法，该方法负责进行属性设值，处理依赖。</p>
<p>// AbstractAutowireCapableBeanFactory 1203</p>
<pre><code class="language-java hljs"><span class="hljs-function"><span class="hljs-keyword"><span class="hljs-function"><span class="hljs-keyword">protected</span></span></span><span class="hljs-function"> </span><span class="hljs-keyword"><span class="hljs-function"><span class="hljs-keyword">void</span></span></span><span class="hljs-function"> </span><span class="hljs-title"><span class="hljs-function"><span class="hljs-title">populateBean</span></span></span><span class="hljs-params"><span class="hljs-function"><span class="hljs-params">(String beanName, RootBeanDefinition mbd, BeanWrapper bw)</span></span></span><span class="hljs-function"> </span></span>{
   <span class="hljs-comment"><span class="hljs-comment">// bean 实例的所有属性都在这里了</span></span>
   PropertyValues pvs = mbd.getPropertyValues();

   <span class="hljs-keyword"><span class="hljs-keyword">if</span></span> (bw == <span class="hljs-keyword"><span class="hljs-keyword">null</span></span>) {
      <span class="hljs-keyword"><span class="hljs-keyword">if</span></span> (!pvs.isEmpty()) {
         <span class="hljs-keyword"><span class="hljs-keyword">throw</span></span> <span class="hljs-keyword"><span class="hljs-keyword">new</span></span> BeanCreationException(
               mbd.getResourceDescription(), beanName, <span class="hljs-string"><span class="hljs-string">"Cannot apply property values to null instance"</span></span>);
      }
      <span class="hljs-keyword"><span class="hljs-keyword">else</span></span> {
         <span class="hljs-comment"><span class="hljs-comment">// Skip property population phase for null instance.</span></span>
         <span class="hljs-keyword"><span class="hljs-keyword">return</span></span>;
      }
   }

   <span class="hljs-comment"><span class="hljs-comment">// 到这步的时候，bean 实例化完成（通过工厂方法或构造方法），但是还没开始属性设值，</span></span>
   <span class="hljs-comment"><span class="hljs-comment">// InstantiationAwareBeanPostProcessor 的实现类可以在这里对 bean 进行状态修改，</span></span>
   <span class="hljs-comment"><span class="hljs-comment">// 我也没找到有实际的使用，所以我们暂且忽略这块吧</span></span>
   <span class="hljs-keyword"><span class="hljs-keyword">boolean</span></span> continueWithPropertyPopulation = <span class="hljs-keyword"><span class="hljs-keyword">true</span></span>;
   <span class="hljs-keyword"><span class="hljs-keyword">if</span></span> (!mbd.isSynthetic() &amp;&amp; hasInstantiationAwareBeanPostProcessors()) {
      <span class="hljs-keyword"><span class="hljs-keyword">for</span></span> (BeanPostProcessor bp : getBeanPostProcessors()) {
         <span class="hljs-keyword"><span class="hljs-keyword">if</span></span> (bp <span class="hljs-keyword"><span class="hljs-keyword">instanceof</span></span> InstantiationAwareBeanPostProcessor) {
            InstantiationAwareBeanPostProcessor ibp = (InstantiationAwareBeanPostProcessor) bp;
            <span class="hljs-comment"><span class="hljs-comment">// 如果返回 false，代表不需要进行后续的属性设值，也不需要再经过其他的 BeanPostProcessor 的处理</span></span>
            <span class="hljs-keyword"><span class="hljs-keyword">if</span></span> (!ibp.postProcessAfterInstantiation(bw.getWrappedInstance(), beanName)) {
               continueWithPropertyPopulation = <span class="hljs-keyword"><span class="hljs-keyword">false</span></span>;
               <span class="hljs-keyword"><span class="hljs-keyword">break</span></span>;
            }
         }
      }
   }

   <span class="hljs-keyword"><span class="hljs-keyword">if</span></span> (!continueWithPropertyPopulation) {
      <span class="hljs-keyword"><span class="hljs-keyword">return</span></span>;
   }

   <span class="hljs-keyword"><span class="hljs-keyword">if</span></span> (mbd.getResolvedAutowireMode() == RootBeanDefinition.AUTOWIRE_BY_NAME ||
         mbd.getResolvedAutowireMode() == RootBeanDefinition.AUTOWIRE_BY_TYPE) {
      MutablePropertyValues newPvs = <span class="hljs-keyword"><span class="hljs-keyword">new</span></span> MutablePropertyValues(pvs);

      <span class="hljs-comment"><span class="hljs-comment">// 通过名字找到所有属性值，如果是 bean 依赖，先初始化依赖的 bean。记录依赖关系</span></span>
      <span class="hljs-keyword"><span class="hljs-keyword">if</span></span> (mbd.getResolvedAutowireMode() == RootBeanDefinition.AUTOWIRE_BY_NAME) {
         autowireByName(beanName, mbd, bw, newPvs);
      }

      <span class="hljs-comment"><span class="hljs-comment">// 通过类型装配。复杂一些</span></span>
      <span class="hljs-keyword"><span class="hljs-keyword">if</span></span> (mbd.getResolvedAutowireMode() == RootBeanDefinition.AUTOWIRE_BY_TYPE) {
         autowireByType(beanName, mbd, bw, newPvs);
      }

      pvs = newPvs;
   }

   <span class="hljs-keyword"><span class="hljs-keyword">boolean</span></span> hasInstAwareBpps = hasInstantiationAwareBeanPostProcessors();
   <span class="hljs-keyword"><span class="hljs-keyword">boolean</span></span> needsDepCheck = (mbd.getDependencyCheck() != RootBeanDefinition.DEPENDENCY_CHECK_NONE);

   <span class="hljs-keyword"><span class="hljs-keyword">if</span></span> (hasInstAwareBpps || needsDepCheck) {
      PropertyDescriptor[] filteredPds = filterPropertyDescriptorsForDependencyCheck(bw, mbd.allowCaching);
      <span class="hljs-keyword"><span class="hljs-keyword">if</span></span> (hasInstAwareBpps) {
         <span class="hljs-keyword"><span class="hljs-keyword">for</span></span> (BeanPostProcessor bp : getBeanPostProcessors()) {
            <span class="hljs-keyword"><span class="hljs-keyword">if</span></span> (bp <span class="hljs-keyword"><span class="hljs-keyword">instanceof</span></span> InstantiationAwareBeanPostProcessor) {
               InstantiationAwareBeanPostProcessor ibp = (InstantiationAwareBeanPostProcessor) bp;
               <span class="hljs-comment"><span class="hljs-comment">// 这里有个非常有用的 BeanPostProcessor 进到这里: AutowiredAnnotationBeanPostProcessor</span></span>
               <span class="hljs-comment"><span class="hljs-comment">// 对采用 @Autowired、@Value 注解的依赖进行设值，这里的内容也是非常丰富的，不过本文不会展开说了，感兴趣的读者请自行研究</span></span>
               pvs = ibp.postProcessPropertyValues(pvs, filteredPds, bw.getWrappedInstance(), beanName);
               <span class="hljs-keyword"><span class="hljs-keyword">if</span></span> (pvs == <span class="hljs-keyword"><span class="hljs-keyword">null</span></span>) {
                  <span class="hljs-keyword"><span class="hljs-keyword">return</span></span>;
               }
            }
         }
      }
      <span class="hljs-keyword"><span class="hljs-keyword">if</span></span> (needsDepCheck) {
         checkDependencies(beanName, mbd, filteredPds, pvs);
      }
   }
   <span class="hljs-comment"><span class="hljs-comment">// 设置 bean 实例的属性值</span></span>
   applyPropertyValues(beanName, mbd, bw, pvs);
}</code></pre>
<h5 id="initializebean">initializeBean</h5>
<p>属性注入完成后，这一步其实就是处理各种回调了，这块代码比较简单。</p>
<pre><code class="language-java hljs"><span class="hljs-function"><span class="hljs-keyword"><span class="hljs-function"><span class="hljs-keyword">protected</span></span></span><span class="hljs-function"> Object </span><span class="hljs-title"><span class="hljs-function"><span class="hljs-title">initializeBean</span></span></span><span class="hljs-params"><span class="hljs-function"><span class="hljs-params">(</span></span><span class="hljs-keyword"><span class="hljs-function"><span class="hljs-params"><span class="hljs-keyword">final</span></span></span></span><span class="hljs-function"><span class="hljs-params"> String beanName, </span></span><span class="hljs-keyword"><span class="hljs-function"><span class="hljs-params"><span class="hljs-keyword">final</span></span></span></span><span class="hljs-function"><span class="hljs-params"> Object bean, RootBeanDefinition mbd)</span></span></span><span class="hljs-function"> </span></span>{
   <span class="hljs-keyword"><span class="hljs-keyword">if</span></span> (System.getSecurityManager() != <span class="hljs-keyword"><span class="hljs-keyword">null</span></span>) {
      AccessController.doPrivileged(<span class="hljs-keyword"><span class="hljs-keyword">new</span></span> PrivilegedAction&lt;Object&gt;() {
         <span class="hljs-meta"><span class="hljs-meta">@Override</span></span>
         <span class="hljs-function"><span class="hljs-keyword"><span class="hljs-function"><span class="hljs-keyword">public</span></span></span><span class="hljs-function"> Object </span><span class="hljs-title"><span class="hljs-function"><span class="hljs-title">run</span></span></span><span class="hljs-params"><span class="hljs-function"><span class="hljs-params">()</span></span></span><span class="hljs-function"> </span></span>{
            invokeAwareMethods(beanName, bean);
            <span class="hljs-keyword"><span class="hljs-keyword">return</span></span> <span class="hljs-keyword"><span class="hljs-keyword">null</span></span>;
         }
      }, getAccessControlContext());
   }
   <span class="hljs-keyword"><span class="hljs-keyword">else</span></span> {
      <span class="hljs-comment"><span class="hljs-comment">// 如果 bean 实现了 BeanNameAware、BeanClassLoaderAware 或 BeanFactoryAware 接口，回调</span></span>
      invokeAwareMethods(beanName, bean);
   }

   Object wrappedBean = bean;
   <span class="hljs-keyword"><span class="hljs-keyword">if</span></span> (mbd == <span class="hljs-keyword"><span class="hljs-keyword">null</span></span> || !mbd.isSynthetic()) {
      <span class="hljs-comment"><span class="hljs-comment">// BeanPostProcessor 的 postProcessBeforeInitialization 回调</span></span>
      wrappedBean = applyBeanPostProcessorsBeforeInitialization(wrappedBean, beanName);
   }

   <span class="hljs-keyword"><span class="hljs-keyword">try</span></span> {
      <span class="hljs-comment"><span class="hljs-comment">// 处理 bean 中定义的 init-method，</span></span>
      <span class="hljs-comment"><span class="hljs-comment">// 或者如果 bean 实现了 InitializingBean 接口，调用 afterPropertiesSet() 方法</span></span>
      invokeInitMethods(beanName, wrappedBean, mbd);
   }
   <span class="hljs-keyword"><span class="hljs-keyword">catch</span></span> (Throwable ex) {
      <span class="hljs-keyword"><span class="hljs-keyword">throw</span></span> <span class="hljs-keyword"><span class="hljs-keyword">new</span></span> BeanCreationException(
            (mbd != <span class="hljs-keyword"><span class="hljs-keyword">null</span></span> ? mbd.getResourceDescription() : <span class="hljs-keyword"><span class="hljs-keyword">null</span></span>),
            beanName, <span class="hljs-string"><span class="hljs-string">"Invocation of init method failed"</span></span>, ex);
   }

   <span class="hljs-keyword"><span class="hljs-keyword">if</span></span> (mbd == <span class="hljs-keyword"><span class="hljs-keyword">null</span></span> || !mbd.isSynthetic()) {
      <span class="hljs-comment"><span class="hljs-comment">// BeanPostProcessor 的 postProcessAfterInitialization 回调</span></span>
      wrappedBean = applyBeanPostProcessorsAfterInitialization(wrappedBean, beanName);
   }
   <span class="hljs-keyword"><span class="hljs-keyword">return</span></span> wrappedBean;
}</code></pre>
<p>大家发现没有，BeanPostProcessor 的两个回调都发生在这边，只不过中间处理了 init-method，是不是和读者原来的认知有点不一样了？</p>
<h2 id="附录">附录</h2>
<h3 id="id-和-name">id 和 name</h3>
<p>每个 Bean 在 Spring 容器中都有一个唯一的名字（beanName）和 0 个或多个别名（aliases）。</p>
<p>我们从 Spring 容器中获取 Bean 的时候，可以根据 beanName，也可以通过别名。</p>
<pre><code class="language-java hljs">beanFactory.getBean(<span class="hljs-string"><span class="hljs-string">"beanName or alias"</span></span>);</code></pre>
<p>在配置 <code>&lt;bean /&gt;</code> 的过程中，我们可以配置 id 和 name，看几个例子就知道是怎么回事了。</p>
<pre><code class="language-xml hljs"><span class="hljs-tag"><span class="hljs-tag">&lt;</span><span class="hljs-name"><span class="hljs-tag"><span class="hljs-name">bean</span></span></span><span class="hljs-tag"> </span><span class="hljs-attr"><span class="hljs-tag"><span class="hljs-attr">id</span></span></span><span class="hljs-tag">=</span><span class="hljs-string"><span class="hljs-tag"><span class="hljs-string">"messageService"</span></span></span><span class="hljs-tag"> </span><span class="hljs-attr"><span class="hljs-tag"><span class="hljs-attr">name</span></span></span><span class="hljs-tag">=</span><span class="hljs-string"><span class="hljs-tag"><span class="hljs-string">"m1, m2, m3"</span></span></span><span class="hljs-tag"> </span><span class="hljs-attr"><span class="hljs-tag"><span class="hljs-attr">class</span></span></span><span class="hljs-tag">=</span><span class="hljs-string"><span class="hljs-tag"><span class="hljs-string">"com.javadoop.example.MessageServiceImpl"</span></span></span><span class="hljs-tag">&gt;</span></span></code></pre>
<p>以上配置的结果就是：beanName 为 messageService，别名有 3 个，分别为 m1、m2、m3。</p>
<pre><code class="language-xml hljs"><span class="hljs-tag"><span class="hljs-tag">&lt;</span><span class="hljs-name"><span class="hljs-tag"><span class="hljs-name">bean</span></span></span><span class="hljs-tag"> </span><span class="hljs-attr"><span class="hljs-tag"><span class="hljs-attr">name</span></span></span><span class="hljs-tag">=</span><span class="hljs-string"><span class="hljs-tag"><span class="hljs-string">"m1, m2, m3"</span></span></span><span class="hljs-tag"> </span><span class="hljs-attr"><span class="hljs-tag"><span class="hljs-attr">class</span></span></span><span class="hljs-tag">=</span><span class="hljs-string"><span class="hljs-tag"><span class="hljs-string">"com.javadoop.example.MessageServiceImpl"</span></span></span><span class="hljs-tag"> /&gt;</span></span></code></pre>
<p>以上配置的结果就是：beanName 为 m1，别名有 2 个，分别为 m2、m3。</p>
<pre><code class="language-xml hljs"><span class="hljs-tag"><span class="hljs-tag">&lt;</span><span class="hljs-name"><span class="hljs-tag"><span class="hljs-name">bean</span></span></span><span class="hljs-tag"> </span><span class="hljs-attr"><span class="hljs-tag"><span class="hljs-attr">class</span></span></span><span class="hljs-tag">=</span><span class="hljs-string"><span class="hljs-tag"><span class="hljs-string">"com.javadoop.example.MessageServiceImpl"</span></span></span><span class="hljs-tag">&gt;</span></span></code></pre>
<p>beanName 为：com.javadoop.example.MessageServiceImpl#0，</p>
<p>别名 1 个，为： com.javadoop.example.MessageServiceImpl</p>
<pre><code class="language-xml hljs"><span class="hljs-tag"><span class="hljs-tag">&lt;</span><span class="hljs-name"><span class="hljs-tag"><span class="hljs-name">bean</span></span></span><span class="hljs-tag"> </span><span class="hljs-attr"><span class="hljs-tag"><span class="hljs-attr">id</span></span></span><span class="hljs-tag">=</span><span class="hljs-string"><span class="hljs-tag"><span class="hljs-string">"messageService"</span></span></span><span class="hljs-tag"> </span><span class="hljs-attr"><span class="hljs-tag"><span class="hljs-attr">class</span></span></span><span class="hljs-tag">=</span><span class="hljs-string"><span class="hljs-tag"><span class="hljs-string">"com.javadoop.example.MessageServiceImpl"</span></span></span><span class="hljs-tag">&gt;</span></span></code></pre>
<p>以上配置的结果就是：beanName 为 messageService，没有别名。</p>
<h3 id="配置是否允许-bean-覆盖、是否允许循环依赖">配置是否允许 Bean 覆盖、是否允许循环依赖</h3>
<p>我们说过，默认情况下，allowBeanDefinitionOverriding 属性为 null。如果在同一配置文件中 Bean id 或 name 重复了，会抛错，但是如果不是同一配置文件中，会发生覆盖。</p>
<p>可是有些时候我们希望在系统启动的过程中就严格杜绝发生 Bean 覆盖，因为万一出现这种情况，会增加我们排查问题的成本。</p>
<p>循环依赖说的是 A 依赖 B，而 B 又依赖 A。或者是 A 依赖 B，B 依赖 C，而 C 却依赖 A。默认 allowCircularReferences 也是 null。</p>
<p>它们两个属性是一起出现的，必然可以在同一个地方一起进行配置。</p>
<p>添加这两个属性的作者 Juergen Hoeller 在这个 <a href="https://jira.spring.io/browse/SPR-4374">jira</a> 的讨论中说明了怎么配置这两个属性。</p>
<pre><code class="language-java hljs"><span class="hljs-keyword"><span class="hljs-keyword">public</span></span> <span class="hljs-class"><span class="hljs-keyword"><span class="hljs-class"><span class="hljs-keyword">class</span></span></span><span class="hljs-class"> </span><span class="hljs-title"><span class="hljs-class"><span class="hljs-title">NoBeanOverridingContextLoader</span></span></span><span class="hljs-class"> </span><span class="hljs-keyword"><span class="hljs-class"><span class="hljs-keyword">extends</span></span></span><span class="hljs-class"> </span><span class="hljs-title"><span class="hljs-class"><span class="hljs-title">ContextLoader</span></span></span><span class="hljs-class"> </span></span>{

  <span class="hljs-meta"><span class="hljs-meta">@Override</span></span>
  <span class="hljs-function"><span class="hljs-keyword"><span class="hljs-function"><span class="hljs-keyword">protected</span></span></span><span class="hljs-function"> </span><span class="hljs-keyword"><span class="hljs-function"><span class="hljs-keyword">void</span></span></span><span class="hljs-function"> </span><span class="hljs-title"><span class="hljs-function"><span class="hljs-title">customizeContext</span></span></span><span class="hljs-params"><span class="hljs-function"><span class="hljs-params">(ServletContext servletContext, ConfigurableWebApplicationContext applicationContext)</span></span></span><span class="hljs-function"> </span></span>{
    <span class="hljs-keyword"><span class="hljs-keyword">super</span></span>.customizeContext(servletContext, applicationContext);
    AbstractRefreshableApplicationContext arac = (AbstractRefreshableApplicationContext) applicationContext;
    arac.setAllowBeanDefinitionOverriding(<span class="hljs-keyword"><span class="hljs-keyword">false</span></span>);
  }
}</code></pre>
<pre><code class="language-java hljs"><span class="hljs-keyword"><span class="hljs-keyword">public</span></span> <span class="hljs-class"><span class="hljs-keyword"><span class="hljs-class"><span class="hljs-keyword">class</span></span></span><span class="hljs-class"> </span><span class="hljs-title"><span class="hljs-class"><span class="hljs-title">MyContextLoaderListener</span></span></span><span class="hljs-class"> </span><span class="hljs-keyword"><span class="hljs-class"><span class="hljs-keyword">extends</span></span></span><span class="hljs-class"> </span><span class="hljs-title"><span class="hljs-class"><span class="hljs-title">org</span></span></span><span class="hljs-class">.</span><span class="hljs-title"><span class="hljs-class"><span class="hljs-title">springframework</span></span></span><span class="hljs-class">.</span><span class="hljs-title"><span class="hljs-class"><span class="hljs-title">web</span></span></span><span class="hljs-class">.</span><span class="hljs-title"><span class="hljs-class"><span class="hljs-title">context</span></span></span><span class="hljs-class">.</span><span class="hljs-title"><span class="hljs-class"><span class="hljs-title">ContextLoaderListener</span></span></span><span class="hljs-class"> </span></span>{

  <span class="hljs-meta"><span class="hljs-meta">@Override</span></span>
  <span class="hljs-function"><span class="hljs-keyword"><span class="hljs-function"><span class="hljs-keyword">protected</span></span></span><span class="hljs-function"> ContextLoader </span><span class="hljs-title"><span class="hljs-function"><span class="hljs-title">createContextLoader</span></span></span><span class="hljs-params"><span class="hljs-function"><span class="hljs-params">()</span></span></span><span class="hljs-function"> </span></span>{
    <span class="hljs-keyword"><span class="hljs-keyword">return</span></span> <span class="hljs-keyword"><span class="hljs-keyword">new</span></span> NoBeanOverridingContextLoader();
  }

}</code></pre>
<pre><code class="language-xml hljs"><span class="hljs-tag"><span class="hljs-tag">&lt;</span><span class="hljs-name"><span class="hljs-tag"><span class="hljs-name">listener</span></span></span><span class="hljs-tag">&gt;</span></span>
    <span class="hljs-tag"><span class="hljs-tag">&lt;</span><span class="hljs-name"><span class="hljs-tag"><span class="hljs-name">listener-class</span></span></span><span class="hljs-tag">&gt;</span></span>com.javadoop.MyContextLoaderListener<span class="hljs-tag"><span class="hljs-tag">&lt;/</span><span class="hljs-name"><span class="hljs-tag"><span class="hljs-name">listener-class</span></span></span><span class="hljs-tag">&gt;</span></span>  
<span class="hljs-tag"><span class="hljs-tag">&lt;/</span><span class="hljs-name"><span class="hljs-tag"><span class="hljs-name">listener</span></span></span><span class="hljs-tag">&gt;</span></span></code></pre>
<p>如果以上方式不能满足你的需求，请参考这个链接：<a href="http://blog.csdn.net/zgmzyr/article/details/39380477">解决spring中不同配置文件中存在name或者id相同的bean可能引起的问题</a></p>
<h3 id="profile">profile</h3>
<p>我们可以把不同环境的配置分别配置到单独的文件中，举个例子：</p>
<pre><code class="language-xml hljs"><span class="hljs-tag"><span class="hljs-tag">&lt;</span><span class="hljs-name"><span class="hljs-tag"><span class="hljs-name">beans</span></span></span><span class="hljs-tag"> </span><span class="hljs-attr"><span class="hljs-tag"><span class="hljs-attr">profile</span></span></span><span class="hljs-tag">=</span><span class="hljs-string"><span class="hljs-tag"><span class="hljs-string">"development"</span></span></span><span class="hljs-tag">
    </span><span class="hljs-attr"><span class="hljs-tag"><span class="hljs-attr">xmlns</span></span></span><span class="hljs-tag">=</span><span class="hljs-string"><span class="hljs-tag"><span class="hljs-string">"http://www.springframework.org/schema/beans"</span></span></span><span class="hljs-tag">
    </span><span class="hljs-attr"><span class="hljs-tag"><span class="hljs-attr">xmlns:xsi</span></span></span><span class="hljs-tag">=</span><span class="hljs-string"><span class="hljs-tag"><span class="hljs-string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><span class="hljs-tag">
    </span><span class="hljs-attr"><span class="hljs-tag"><span class="hljs-attr">xmlns:jdbc</span></span></span><span class="hljs-tag">=</span><span class="hljs-string"><span class="hljs-tag"><span class="hljs-string">"http://www.springframework.org/schema/jdbc"</span></span></span><span class="hljs-tag">
    </span><span class="hljs-attr"><span class="hljs-tag"><span class="hljs-attr">xsi:schemaLocation</span></span></span><span class="hljs-tag">=</span><span class="hljs-string"><span class="hljs-tag"><span class="hljs-string">"..."</span></span></span><span class="hljs-tag">&gt;</span></span>

    <span class="hljs-tag"><span class="hljs-tag">&lt;</span><span class="hljs-name"><span class="hljs-tag"><span class="hljs-name">jdbc:embedded-database</span></span></span><span class="hljs-tag"> </span><span class="hljs-attr"><span class="hljs-tag"><span class="hljs-attr">id</span></span></span><span class="hljs-tag">=</span><span class="hljs-string"><span class="hljs-tag"><span class="hljs-string">"dataSource"</span></span></span><span class="hljs-tag">&gt;</span></span>
        <span class="hljs-tag"><span class="hljs-tag">&lt;</span><span class="hljs-name"><span class="hljs-tag"><span class="hljs-name">jdbc:script</span></span></span><span class="hljs-tag"> </span><span class="hljs-attr"><span class="hljs-tag"><span class="hljs-attr">location</span></span></span><span class="hljs-tag">=</span><span class="hljs-string"><span class="hljs-tag"><span class="hljs-string">"classpath:com/bank/config/sql/schema.sql"</span></span></span><span class="hljs-tag">/&gt;</span></span>
        <span class="hljs-tag"><span class="hljs-tag">&lt;</span><span class="hljs-name"><span class="hljs-tag"><span class="hljs-name">jdbc:script</span></span></span><span class="hljs-tag"> </span><span class="hljs-attr"><span class="hljs-tag"><span class="hljs-attr">location</span></span></span><span class="hljs-tag">=</span><span class="hljs-string"><span class="hljs-tag"><span class="hljs-string">"classpath:com/bank/config/sql/test-data.sql"</span></span></span><span class="hljs-tag">/&gt;</span></span>
    <span class="hljs-tag"><span class="hljs-tag">&lt;/</span><span class="hljs-name"><span class="hljs-tag"><span class="hljs-name">jdbc:embedded-database</span></span></span><span class="hljs-tag">&gt;</span></span>
<span class="hljs-tag"><span class="hljs-tag">&lt;/</span><span class="hljs-name"><span class="hljs-tag"><span class="hljs-name">beans</span></span></span><span class="hljs-tag">&gt;</span></span></code></pre>
<pre><code class="language-xml hljs"><span class="hljs-tag"><span class="hljs-tag">&lt;</span><span class="hljs-name"><span class="hljs-tag"><span class="hljs-name">beans</span></span></span><span class="hljs-tag"> </span><span class="hljs-attr"><span class="hljs-tag"><span class="hljs-attr">profile</span></span></span><span class="hljs-tag">=</span><span class="hljs-string"><span class="hljs-tag"><span class="hljs-string">"production"</span></span></span><span class="hljs-tag">
    </span><span class="hljs-attr"><span class="hljs-tag"><span class="hljs-attr">xmlns</span></span></span><span class="hljs-tag">=</span><span class="hljs-string"><span class="hljs-tag"><span class="hljs-string">"http://www.springframework.org/schema/beans"</span></span></span><span class="hljs-tag">
    </span><span class="hljs-attr"><span class="hljs-tag"><span class="hljs-attr">xmlns:xsi</span></span></span><span class="hljs-tag">=</span><span class="hljs-string"><span class="hljs-tag"><span class="hljs-string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><span class="hljs-tag">
    </span><span class="hljs-attr"><span class="hljs-tag"><span class="hljs-attr">xmlns:jee</span></span></span><span class="hljs-tag">=</span><span class="hljs-string"><span class="hljs-tag"><span class="hljs-string">"http://www.springframework.org/schema/jee"</span></span></span><span class="hljs-tag">
    </span><span class="hljs-attr"><span class="hljs-tag"><span class="hljs-attr">xsi:schemaLocation</span></span></span><span class="hljs-tag">=</span><span class="hljs-string"><span class="hljs-tag"><span class="hljs-string">"..."</span></span></span><span class="hljs-tag">&gt;</span></span>

    <span class="hljs-tag"><span class="hljs-tag">&lt;</span><span class="hljs-name"><span class="hljs-tag"><span class="hljs-name">jee:jndi-lookup</span></span></span><span class="hljs-tag"> </span><span class="hljs-attr"><span class="hljs-tag"><span class="hljs-attr">id</span></span></span><span class="hljs-tag">=</span><span class="hljs-string"><span class="hljs-tag"><span class="hljs-string">"dataSource"</span></span></span><span class="hljs-tag"> </span><span class="hljs-attr"><span class="hljs-tag"><span class="hljs-attr">jndi-name</span></span></span><span class="hljs-tag">=</span><span class="hljs-string"><span class="hljs-tag"><span class="hljs-string">"java:comp/env/jdbc/datasource"</span></span></span><span class="hljs-tag">/&gt;</span></span>
<span class="hljs-tag"><span class="hljs-tag">&lt;/</span><span class="hljs-name"><span class="hljs-tag"><span class="hljs-name">beans</span></span></span><span class="hljs-tag">&gt;</span></span></code></pre>
<p>应该不必做过多解释了吧，看每个文件第一行的 profile=""。</p>
<p>当然，我们也可以在一个配置文件中使用：</p>
<pre><code class="language-xml hljs"><span class="hljs-tag"><span class="hljs-tag">&lt;</span><span class="hljs-name"><span class="hljs-tag"><span class="hljs-name">beans</span></span></span><span class="hljs-tag"> </span><span class="hljs-attr"><span class="hljs-tag"><span class="hljs-attr">xmlns</span></span></span><span class="hljs-tag">=</span><span class="hljs-string"><span class="hljs-tag"><span class="hljs-string">"http://www.springframework.org/schema/beans"</span></span></span><span class="hljs-tag">
    </span><span class="hljs-attr"><span class="hljs-tag"><span class="hljs-attr">xmlns:xsi</span></span></span><span class="hljs-tag">=</span><span class="hljs-string"><span class="hljs-tag"><span class="hljs-string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><span class="hljs-tag">
    </span><span class="hljs-attr"><span class="hljs-tag"><span class="hljs-attr">xmlns:jdbc</span></span></span><span class="hljs-tag">=</span><span class="hljs-string"><span class="hljs-tag"><span class="hljs-string">"http://www.springframework.org/schema/jdbc"</span></span></span><span class="hljs-tag">
    </span><span class="hljs-attr"><span class="hljs-tag"><span class="hljs-attr">xmlns:jee</span></span></span><span class="hljs-tag">=</span><span class="hljs-string"><span class="hljs-tag"><span class="hljs-string">"http://www.springframework.org/schema/jee"</span></span></span><span class="hljs-tag">
    </span><span class="hljs-attr"><span class="hljs-tag"><span class="hljs-attr">xsi:schemaLocation</span></span></span><span class="hljs-tag">=</span><span class="hljs-string"><span class="hljs-tag"><span class="hljs-string">"..."</span></span></span><span class="hljs-tag">&gt;</span></span>

    <span class="hljs-tag"><span class="hljs-tag">&lt;</span><span class="hljs-name"><span class="hljs-tag"><span class="hljs-name">beans</span></span></span><span class="hljs-tag"> </span><span class="hljs-attr"><span class="hljs-tag"><span class="hljs-attr">profile</span></span></span><span class="hljs-tag">=</span><span class="hljs-string"><span class="hljs-tag"><span class="hljs-string">"development"</span></span></span><span class="hljs-tag">&gt;</span></span>
        <span class="hljs-tag"><span class="hljs-tag">&lt;</span><span class="hljs-name"><span class="hljs-tag"><span class="hljs-name">jdbc:embedded-database</span></span></span><span class="hljs-tag"> </span><span class="hljs-attr"><span class="hljs-tag"><span class="hljs-attr">id</span></span></span><span class="hljs-tag">=</span><span class="hljs-string"><span class="hljs-tag"><span class="hljs-string">"dataSource"</span></span></span><span class="hljs-tag">&gt;</span></span>
            <span class="hljs-tag"><span class="hljs-tag">&lt;</span><span class="hljs-name"><span class="hljs-tag"><span class="hljs-name">jdbc:script</span></span></span><span class="hljs-tag"> </span><span class="hljs-attr"><span class="hljs-tag"><span class="hljs-attr">location</span></span></span><span class="hljs-tag">=</span><span class="hljs-string"><span class="hljs-tag"><span class="hljs-string">"classpath:com/bank/config/sql/schema.sql"</span></span></span><span class="hljs-tag">/&gt;</span></span>
            <span class="hljs-tag"><span class="hljs-tag">&lt;</span><span class="hljs-name"><span class="hljs-tag"><span class="hljs-name">jdbc:script</span></span></span><span class="hljs-tag"> </span><span class="hljs-attr"><span class="hljs-tag"><span class="hljs-attr">location</span></span></span><span class="hljs-tag">=</span><span class="hljs-string"><span class="hljs-tag"><span class="hljs-string">"classpath:com/bank/config/sql/test-data.sql"</span></span></span><span class="hljs-tag">/&gt;</span></span>
        <span class="hljs-tag"><span class="hljs-tag">&lt;/</span><span class="hljs-name"><span class="hljs-tag"><span class="hljs-name">jdbc:embedded-database</span></span></span><span class="hljs-tag">&gt;</span></span>
    <span class="hljs-tag"><span class="hljs-tag">&lt;/</span><span class="hljs-name"><span class="hljs-tag"><span class="hljs-name">beans</span></span></span><span class="hljs-tag">&gt;</span></span>

    <span class="hljs-tag"><span class="hljs-tag">&lt;</span><span class="hljs-name"><span class="hljs-tag"><span class="hljs-name">beans</span></span></span><span class="hljs-tag"> </span><span class="hljs-attr"><span class="hljs-tag"><span class="hljs-attr">profile</span></span></span><span class="hljs-tag">=</span><span class="hljs-string"><span class="hljs-tag"><span class="hljs-string">"production"</span></span></span><span class="hljs-tag">&gt;</span></span>
        <span class="hljs-tag"><span class="hljs-tag">&lt;</span><span class="hljs-name"><span class="hljs-tag"><span class="hljs-name">jee:jndi-lookup</span></span></span><span class="hljs-tag"> </span><span class="hljs-attr"><span class="hljs-tag"><span class="hljs-attr">id</span></span></span><span class="hljs-tag">=</span><span class="hljs-string"><span class="hljs-tag"><span class="hljs-string">"dataSource"</span></span></span><span class="hljs-tag"> </span><span class="hljs-attr"><span class="hljs-tag"><span class="hljs-attr">jndi-name</span></span></span><span class="hljs-tag">=</span><span class="hljs-string"><span class="hljs-tag"><span class="hljs-string">"java:comp/env/jdbc/datasource"</span></span></span><span class="hljs-tag">/&gt;</span></span>
    <span class="hljs-tag"><span class="hljs-tag">&lt;/</span><span class="hljs-name"><span class="hljs-tag"><span class="hljs-name">beans</span></span></span><span class="hljs-tag">&gt;</span></span>
<span class="hljs-tag"><span class="hljs-tag">&lt;/</span><span class="hljs-name"><span class="hljs-tag"><span class="hljs-name">beans</span></span></span><span class="hljs-tag">&gt;</span></span></code></pre>
<p>理解起来也很简单吧。</p>
<p>接下来的问题是，怎么使用特定的 profile 呢？Spring 在启动的过程中，会去寻找 “spring.profiles.active” 的属性值，根据这个属性值来的。那怎么配置这个值呢？</p>
<p>Spring 会在这几个地方寻找 spring.profiles.active 的属性值：操作系统环境变量、JVM 系统变量、web.xml 中定义的参数、JNDI。</p>
<p>最简单的方式莫过于在程序启动的时候指定：</p>
<pre><code class="language-shell hljs">-Dspring.profiles.active="profile1,profile2"</code></pre>
<blockquote>
<p>profile 可以激活多个</p>
</blockquote>
<p>当然，我们也可以通过代码的形式从 Environment 中设置 profile：</p>
<pre><code class="language-java hljs">AnnotationConfigApplicationContext ctx = <span class="hljs-keyword"><span class="hljs-keyword">new</span></span> AnnotationConfigApplicationContext();
ctx.getEnvironment().setActiveProfiles(<span class="hljs-string"><span class="hljs-string">"development"</span></span>);
ctx.register(SomeConfig.class, StandaloneDataConfig.class, JndiDataConfig.class);
ctx.refresh(); <span class="hljs-comment"><span class="hljs-comment">// 重启</span></span></code></pre>
<p>如果是 Spring Boot 的话更简单，我们一般会创建 application.properties、application-dev.properties、application-prod.properties 等文件，其中 application.properties 配置各个环境通用的配置，application-{profile}.properties 中配置特定环境的配置，然后在启动的时候指定 profile：</p>
<pre><code class="language-shell hljs">java -Dspring.profiles.active=prod -jar JavaDoop.jar</code></pre>
<p>如果是单元测试中使用的话，在测试类中使用 @ActiveProfiles 指定，这里就不展开了。</p>
<h3 id="工厂模式生成-bean">工厂模式生成 Bean</h3>
<p>请读者注意 factory-bean 和 FactoryBean 的区别。这节说的是前者，是说静态工厂或实例工厂，而后者是 Spring 中的特殊接口，代表一类特殊的 Bean，附录的下面一节会介绍 FactoryBean。</p>
<p>设计模式里，工厂方法模式分静态工厂和实例工厂，我们分别看看 Spring 中怎么配置这两个，来个代码示例就什么都清楚了。</p>
<p>静态工厂：</p>
<pre><code class="language-xml hljs"><span class="hljs-tag"><span class="hljs-tag">&lt;</span><span class="hljs-name"><span class="hljs-tag"><span class="hljs-name">bean</span></span></span><span class="hljs-tag"> </span><span class="hljs-attr"><span class="hljs-tag"><span class="hljs-attr">id</span></span></span><span class="hljs-tag">=</span><span class="hljs-string"><span class="hljs-tag"><span class="hljs-string">"clientService"</span></span></span><span class="hljs-tag">
    </span><span class="hljs-attr"><span class="hljs-tag"><span class="hljs-attr">class</span></span></span><span class="hljs-tag">=</span><span class="hljs-string"><span class="hljs-tag"><span class="hljs-string">"examples.ClientService"</span></span></span><span class="hljs-tag">
    </span><span class="hljs-attr"><span class="hljs-tag"><span class="hljs-attr">factory-method</span></span></span><span class="hljs-tag">=</span><span class="hljs-string"><span class="hljs-tag"><span class="hljs-string">"createInstance"</span></span></span><span class="hljs-tag">/&gt;</span></span></code></pre>
<pre><code class="language-java hljs"><span class="hljs-keyword"><span class="hljs-keyword">public</span></span> <span class="hljs-class"><span class="hljs-keyword"><span class="hljs-class"><span class="hljs-keyword">class</span></span></span><span class="hljs-class"> </span><span class="hljs-title"><span class="hljs-class"><span class="hljs-title">ClientService</span></span></span><span class="hljs-class"> </span></span>{
    <span class="hljs-keyword"><span class="hljs-keyword">private</span></span> <span class="hljs-keyword"><span class="hljs-keyword">static</span></span> ClientService clientService = <span class="hljs-keyword"><span class="hljs-keyword">new</span></span> ClientService();
    <span class="hljs-function"><span class="hljs-keyword"><span class="hljs-function"><span class="hljs-keyword">private</span></span></span><span class="hljs-function"> </span><span class="hljs-title"><span class="hljs-function"><span class="hljs-title">ClientService</span></span></span><span class="hljs-params"><span class="hljs-function"><span class="hljs-params">()</span></span></span><span class="hljs-function"> </span></span>{}

    <span class="hljs-comment"><span class="hljs-comment">// 静态方法</span></span>
    <span class="hljs-function"><span class="hljs-keyword"><span class="hljs-function"><span class="hljs-keyword">public</span></span></span><span class="hljs-function"> </span><span class="hljs-keyword"><span class="hljs-function"><span class="hljs-keyword">static</span></span></span><span class="hljs-function"> ClientService </span><span class="hljs-title"><span class="hljs-function"><span class="hljs-title">createInstance</span></span></span><span class="hljs-params"><span class="hljs-function"><span class="hljs-params">()</span></span></span><span class="hljs-function"> </span></span>{
        <span class="hljs-keyword"><span class="hljs-keyword">return</span></span> clientService;
    }
}</code></pre>
<p>实例工厂：</p>
<pre><code class="language-xml hljs"><span class="hljs-tag"><span class="hljs-tag">&lt;</span><span class="hljs-name"><span class="hljs-tag"><span class="hljs-name">bean</span></span></span><span class="hljs-tag"> </span><span class="hljs-attr"><span class="hljs-tag"><span class="hljs-attr">id</span></span></span><span class="hljs-tag">=</span><span class="hljs-string"><span class="hljs-tag"><span class="hljs-string">"serviceLocator"</span></span></span><span class="hljs-tag"> </span><span class="hljs-attr"><span class="hljs-tag"><span class="hljs-attr">class</span></span></span><span class="hljs-tag">=</span><span class="hljs-string"><span class="hljs-tag"><span class="hljs-string">"examples.DefaultServiceLocator"</span></span></span><span class="hljs-tag">&gt;</span></span>
    <span class="hljs-comment"><span class="hljs-comment">&lt;!-- inject any dependencies required by this locator bean --&gt;</span></span>
<span class="hljs-tag"><span class="hljs-tag">&lt;/</span><span class="hljs-name"><span class="hljs-tag"><span class="hljs-name">bean</span></span></span><span class="hljs-tag">&gt;</span></span>

<span class="hljs-tag"><span class="hljs-tag">&lt;</span><span class="hljs-name"><span class="hljs-tag"><span class="hljs-name">bean</span></span></span><span class="hljs-tag"> </span><span class="hljs-attr"><span class="hljs-tag"><span class="hljs-attr">id</span></span></span><span class="hljs-tag">=</span><span class="hljs-string"><span class="hljs-tag"><span class="hljs-string">"clientService"</span></span></span><span class="hljs-tag">
    </span><span class="hljs-attr"><span class="hljs-tag"><span class="hljs-attr">factory-bean</span></span></span><span class="hljs-tag">=</span><span class="hljs-string"><span class="hljs-tag"><span class="hljs-string">"serviceLocator"</span></span></span><span class="hljs-tag">
    </span><span class="hljs-attr"><span class="hljs-tag"><span class="hljs-attr">factory-method</span></span></span><span class="hljs-tag">=</span><span class="hljs-string"><span class="hljs-tag"><span class="hljs-string">"createClientServiceInstance"</span></span></span><span class="hljs-tag">/&gt;</span></span>

<span class="hljs-tag"><span class="hljs-tag">&lt;</span><span class="hljs-name"><span class="hljs-tag"><span class="hljs-name">bean</span></span></span><span class="hljs-tag"> </span><span class="hljs-attr"><span class="hljs-tag"><span class="hljs-attr">id</span></span></span><span class="hljs-tag">=</span><span class="hljs-string"><span class="hljs-tag"><span class="hljs-string">"accountService"</span></span></span><span class="hljs-tag">
    </span><span class="hljs-attr"><span class="hljs-tag"><span class="hljs-attr">factory-bean</span></span></span><span class="hljs-tag">=</span><span class="hljs-string"><span class="hljs-tag"><span class="hljs-string">"serviceLocator"</span></span></span><span class="hljs-tag">
    </span><span class="hljs-attr"><span class="hljs-tag"><span class="hljs-attr">factory-method</span></span></span><span class="hljs-tag">=</span><span class="hljs-string"><span class="hljs-tag"><span class="hljs-string">"createAccountServiceInstance"</span></span></span><span class="hljs-tag">/&gt;</span></span></code></pre>
<pre><code class="language-java hljs"><span class="hljs-keyword"><span class="hljs-keyword">public</span></span> <span class="hljs-class"><span class="hljs-keyword"><span class="hljs-class"><span class="hljs-keyword">class</span></span></span><span class="hljs-class"> </span><span class="hljs-title"><span class="hljs-class"><span class="hljs-title">DefaultServiceLocator</span></span></span><span class="hljs-class"> </span></span>{

    <span class="hljs-keyword"><span class="hljs-keyword">private</span></span> <span class="hljs-keyword"><span class="hljs-keyword">static</span></span> ClientService clientService = <span class="hljs-keyword"><span class="hljs-keyword">new</span></span> ClientServiceImpl();

    <span class="hljs-keyword"><span class="hljs-keyword">private</span></span> <span class="hljs-keyword"><span class="hljs-keyword">static</span></span> AccountService accountService = <span class="hljs-keyword"><span class="hljs-keyword">new</span></span> AccountServiceImpl();

    <span class="hljs-function"><span class="hljs-keyword"><span class="hljs-function"><span class="hljs-keyword">public</span></span></span><span class="hljs-function"> ClientService </span><span class="hljs-title"><span class="hljs-function"><span class="hljs-title">createClientServiceInstance</span></span></span><span class="hljs-params"><span class="hljs-function"><span class="hljs-params">()</span></span></span><span class="hljs-function"> </span></span>{
        <span class="hljs-keyword"><span class="hljs-keyword">return</span></span> clientService;
    }

    <span class="hljs-function"><span class="hljs-keyword"><span class="hljs-function"><span class="hljs-keyword">public</span></span></span><span class="hljs-function"> AccountService </span><span class="hljs-title"><span class="hljs-function"><span class="hljs-title">createAccountServiceInstance</span></span></span><span class="hljs-params"><span class="hljs-function"><span class="hljs-params">()</span></span></span><span class="hljs-function"> </span></span>{
        <span class="hljs-keyword"><span class="hljs-keyword">return</span></span> accountService;
    }
}</code></pre>
<h3 id="factorybean">FactoryBean</h3>
<p>FactoryBean 适用于 Bean 的创建过程比较复杂的场景，比如数据库连接池的创建。</p>
<pre><code class="language-java hljs"><span class="hljs-keyword"><span class="hljs-keyword">public</span></span> <span class="hljs-class"><span class="hljs-keyword"><span class="hljs-class"><span class="hljs-keyword">interface</span></span></span><span class="hljs-class"> </span><span class="hljs-title"><span class="hljs-class"><span class="hljs-title">FactoryBean</span></span></span><span class="hljs-class">&lt;</span><span class="hljs-title"><span class="hljs-class"><span class="hljs-title">T</span></span></span><span class="hljs-class">&gt; </span></span>{
    <span class="hljs-function"><span class="hljs-function">T </span><span class="hljs-title"><span class="hljs-function"><span class="hljs-title">getObject</span></span></span><span class="hljs-params"><span class="hljs-function"><span class="hljs-params">()</span></span></span><span class="hljs-function"> </span><span class="hljs-keyword"><span class="hljs-function"><span class="hljs-keyword">throws</span></span></span><span class="hljs-function"> Exception</span></span>;
    <span class="hljs-function"><span class="hljs-function">Class&lt;T&gt; </span><span class="hljs-title"><span class="hljs-function"><span class="hljs-title">getObjectType</span></span></span><span class="hljs-params"><span class="hljs-function"><span class="hljs-params">()</span></span></span></span>;
    <span class="hljs-function"><span class="hljs-keyword"><span class="hljs-function"><span class="hljs-keyword">boolean</span></span></span><span class="hljs-function"> </span><span class="hljs-title"><span class="hljs-function"><span class="hljs-title">isSingleton</span></span></span><span class="hljs-params"><span class="hljs-function"><span class="hljs-params">()</span></span></span></span>;
}</code></pre>
<pre><code class="language-java hljs"><span class="hljs-keyword"><span class="hljs-keyword">public</span></span> <span class="hljs-class"><span class="hljs-keyword"><span class="hljs-class"><span class="hljs-keyword">class</span></span></span><span class="hljs-class"> </span><span class="hljs-title"><span class="hljs-class"><span class="hljs-title">Person</span></span></span><span class="hljs-class"> </span></span>{ 
    <span class="hljs-keyword"><span class="hljs-keyword">private</span></span> Car car ;
    <span class="hljs-function"><span class="hljs-keyword"><span class="hljs-function"><span class="hljs-keyword">private</span></span></span><span class="hljs-function"> </span><span class="hljs-keyword"><span class="hljs-function"><span class="hljs-keyword">void</span></span></span><span class="hljs-function"> </span><span class="hljs-title"><span class="hljs-function"><span class="hljs-title">setCar</span></span></span><span class="hljs-params"><span class="hljs-function"><span class="hljs-params">(Car car)</span></span></span></span>{ <span class="hljs-keyword"><span class="hljs-keyword">this</span></span>.car = car;  }  
}</code></pre>
<p>我们假设现在需要创建一个 Person 的 Bean，首先我们需要一个 Car 的实例，我们这里假设 Car 的实例创建很麻烦，那么我们可以把创建 Car 的复杂过程包装起来：</p>
<pre><code class="language-java hljs"><span class="hljs-keyword"><span class="hljs-keyword">public</span></span> <span class="hljs-class"><span class="hljs-keyword"><span class="hljs-class"><span class="hljs-keyword">class</span></span></span><span class="hljs-class"> </span><span class="hljs-title"><span class="hljs-class"><span class="hljs-title">MyCarFactoryBean</span></span></span><span class="hljs-class"> </span><span class="hljs-keyword"><span class="hljs-class"><span class="hljs-keyword">implements</span></span></span><span class="hljs-class"> </span><span class="hljs-title"><span class="hljs-class"><span class="hljs-title">FactoryBean</span></span></span><span class="hljs-class">&lt;</span><span class="hljs-title"><span class="hljs-class"><span class="hljs-title">Car</span></span></span><span class="hljs-class">&gt;</span></span>{
    <span class="hljs-keyword"><span class="hljs-keyword">private</span></span> String make; 
    <span class="hljs-keyword"><span class="hljs-keyword">private</span></span> <span class="hljs-keyword"><span class="hljs-keyword">int</span></span> year ;

    <span class="hljs-function"><span class="hljs-keyword"><span class="hljs-function"><span class="hljs-keyword">public</span></span></span><span class="hljs-function"> </span><span class="hljs-keyword"><span class="hljs-function"><span class="hljs-keyword">void</span></span></span><span class="hljs-function"> </span><span class="hljs-title"><span class="hljs-function"><span class="hljs-title">setMake</span></span></span><span class="hljs-params"><span class="hljs-function"><span class="hljs-params">(String m)</span></span></span></span>{ <span class="hljs-keyword"><span class="hljs-keyword">this</span></span>.make =m ; }

    <span class="hljs-function"><span class="hljs-keyword"><span class="hljs-function"><span class="hljs-keyword">public</span></span></span><span class="hljs-function"> </span><span class="hljs-keyword"><span class="hljs-function"><span class="hljs-keyword">void</span></span></span><span class="hljs-function"> </span><span class="hljs-title"><span class="hljs-function"><span class="hljs-title">setYear</span></span></span><span class="hljs-params"><span class="hljs-function"><span class="hljs-params">(</span></span><span class="hljs-keyword"><span class="hljs-function"><span class="hljs-params"><span class="hljs-keyword">int</span></span></span></span><span class="hljs-function"><span class="hljs-params"> y)</span></span></span></span>{ <span class="hljs-keyword"><span class="hljs-keyword">this</span></span>.year = y; }

    <span class="hljs-function"><span class="hljs-keyword"><span class="hljs-function"><span class="hljs-keyword">public</span></span></span><span class="hljs-function"> Car </span><span class="hljs-title"><span class="hljs-function"><span class="hljs-title">getObject</span></span></span><span class="hljs-params"><span class="hljs-function"><span class="hljs-params">()</span></span></span></span>{ 
      <span class="hljs-comment"><span class="hljs-comment">// 这里我们假设 Car 的实例化过程非常复杂，反正就不是几行代码可以写完的那种</span></span>
      CarBuilder cb = CarBuilder.car();

      <span class="hljs-keyword"><span class="hljs-keyword">if</span></span>(year!=<span class="hljs-number"><span class="hljs-number">0</span></span>) cb.setYear(<span class="hljs-keyword"><span class="hljs-keyword">this</span></span>.year);
      <span class="hljs-keyword"><span class="hljs-keyword">if</span></span>(StringUtils.hasText(<span class="hljs-keyword"><span class="hljs-keyword">this</span></span>.make)) cb.setMake( <span class="hljs-keyword"><span class="hljs-keyword">this</span></span>.make ); 
      <span class="hljs-keyword"><span class="hljs-keyword">return</span></span> cb.factory(); 
    }

    <span class="hljs-function"><span class="hljs-keyword"><span class="hljs-function"><span class="hljs-keyword">public</span></span></span><span class="hljs-function"> Class&lt;Car&gt; </span><span class="hljs-title"><span class="hljs-function"><span class="hljs-title">getObjectType</span></span></span><span class="hljs-params"><span class="hljs-function"><span class="hljs-params">()</span></span></span><span class="hljs-function"> </span></span>{ <span class="hljs-keyword"><span class="hljs-keyword">return</span></span> Car.class ; } 

    <span class="hljs-function"><span class="hljs-keyword"><span class="hljs-function"><span class="hljs-keyword">public</span></span></span><span class="hljs-function"> </span><span class="hljs-keyword"><span class="hljs-function"><span class="hljs-keyword">boolean</span></span></span><span class="hljs-function"> </span><span class="hljs-title"><span class="hljs-function"><span class="hljs-title">isSingleton</span></span></span><span class="hljs-params"><span class="hljs-function"><span class="hljs-params">()</span></span></span><span class="hljs-function"> </span></span>{ <span class="hljs-keyword"><span class="hljs-keyword">return</span></span> <span class="hljs-keyword"><span class="hljs-keyword">false</span></span>; }
}</code></pre>
<p>我们看看装配的时候是怎么配置的：</p>
<pre><code class="language-xml hljs"><span class="hljs-tag"><span class="hljs-tag">&lt;</span><span class="hljs-name"><span class="hljs-tag"><span class="hljs-name">bean</span></span></span><span class="hljs-tag"> </span><span class="hljs-attr"><span class="hljs-tag"><span class="hljs-attr">class</span></span></span><span class="hljs-tag"> = </span><span class="hljs-string"><span class="hljs-tag"><span class="hljs-string">"com.javadoop.MyCarFactoryBean"</span></span></span><span class="hljs-tag"> </span><span class="hljs-attr"><span class="hljs-tag"><span class="hljs-attr">id</span></span></span><span class="hljs-tag"> = </span><span class="hljs-string"><span class="hljs-tag"><span class="hljs-string">"car"</span></span></span><span class="hljs-tag">&gt;</span></span>
  <span class="hljs-tag"><span class="hljs-tag">&lt;</span><span class="hljs-name"><span class="hljs-tag"><span class="hljs-name">property</span></span></span><span class="hljs-tag"> </span><span class="hljs-attr"><span class="hljs-tag"><span class="hljs-attr">name</span></span></span><span class="hljs-tag"> = </span><span class="hljs-string"><span class="hljs-tag"><span class="hljs-string">"make"</span></span></span><span class="hljs-tag"> </span><span class="hljs-attr"><span class="hljs-tag"><span class="hljs-attr">value</span></span></span><span class="hljs-tag"> =</span><span class="hljs-string"><span class="hljs-tag"><span class="hljs-string">"Honda"</span></span></span><span class="hljs-tag">/&gt;</span></span>
  <span class="hljs-tag"><span class="hljs-tag">&lt;</span><span class="hljs-name"><span class="hljs-tag"><span class="hljs-name">property</span></span></span><span class="hljs-tag"> </span><span class="hljs-attr"><span class="hljs-tag"><span class="hljs-attr">name</span></span></span><span class="hljs-tag"> = </span><span class="hljs-string"><span class="hljs-tag"><span class="hljs-string">"year"</span></span></span><span class="hljs-tag"> </span><span class="hljs-attr"><span class="hljs-tag"><span class="hljs-attr">value</span></span></span><span class="hljs-tag"> =</span><span class="hljs-string"><span class="hljs-tag"><span class="hljs-string">"1984"</span></span></span><span class="hljs-tag">/&gt;</span></span>
<span class="hljs-tag"><span class="hljs-tag">&lt;/</span><span class="hljs-name"><span class="hljs-tag"><span class="hljs-name">bean</span></span></span><span class="hljs-tag">&gt;</span></span>
<span class="hljs-tag"><span class="hljs-tag">&lt;</span><span class="hljs-name"><span class="hljs-tag"><span class="hljs-name">bean</span></span></span><span class="hljs-tag"> </span><span class="hljs-attr"><span class="hljs-tag"><span class="hljs-attr">class</span></span></span><span class="hljs-tag"> = </span><span class="hljs-string"><span class="hljs-tag"><span class="hljs-string">"com.javadoop.Person"</span></span></span><span class="hljs-tag"> </span><span class="hljs-attr"><span class="hljs-tag"><span class="hljs-attr">id</span></span></span><span class="hljs-tag"> = </span><span class="hljs-string"><span class="hljs-tag"><span class="hljs-string">"josh"</span></span></span><span class="hljs-tag">&gt;</span></span>
  <span class="hljs-tag"><span class="hljs-tag">&lt;</span><span class="hljs-name"><span class="hljs-tag"><span class="hljs-name">property</span></span></span><span class="hljs-tag"> </span><span class="hljs-attr"><span class="hljs-tag"><span class="hljs-attr">name</span></span></span><span class="hljs-tag"> = </span><span class="hljs-string"><span class="hljs-tag"><span class="hljs-string">"car"</span></span></span><span class="hljs-tag"> </span><span class="hljs-attr"><span class="hljs-tag"><span class="hljs-attr">ref</span></span></span><span class="hljs-tag"> = </span><span class="hljs-string"><span class="hljs-tag"><span class="hljs-string">"car"</span></span></span><span class="hljs-tag">/&gt;</span></span>
<span class="hljs-tag"><span class="hljs-tag">&lt;/</span><span class="hljs-name"><span class="hljs-tag"><span class="hljs-name">bean</span></span></span><span class="hljs-tag">&gt;</span></span></code></pre>
<p>看到不一样了吗？id 为 “car” 的 bean 其实指定的是一个 FactoryBean，不过配置的时候，我们直接让配置 Person 的 Bean 直接依赖于这个 FactoryBean 就可以了。中间的过程 Spring 已经封装好了。</p>
<p>说到这里，我们再来点干货。我们知道，现在还用 xml 配置 Bean 依赖的越来越少了，更多时候，我们可能会采用 java  config 的方式来配置，这里有什么不一样呢？</p>
<pre><code class="language-java hljs"><span class="hljs-meta"><span class="hljs-meta">@Configuration</span></span> 
<span class="hljs-keyword"><span class="hljs-keyword">public</span></span> <span class="hljs-class"><span class="hljs-keyword"><span class="hljs-class"><span class="hljs-keyword">class</span></span></span><span class="hljs-class"> </span><span class="hljs-title"><span class="hljs-class"><span class="hljs-title">CarConfiguration</span></span></span><span class="hljs-class"> </span></span>{ 

    <span class="hljs-meta"><span class="hljs-meta">@Bean</span></span> 
    <span class="hljs-function"><span class="hljs-keyword"><span class="hljs-function"><span class="hljs-keyword">public</span></span></span><span class="hljs-function"> MyCarFactoryBean </span><span class="hljs-title"><span class="hljs-function"><span class="hljs-title">carFactoryBean</span></span></span><span class="hljs-params"><span class="hljs-function"><span class="hljs-params">()</span></span></span></span>{ 
      MyCarFactoryBean cfb = <span class="hljs-keyword"><span class="hljs-keyword">new</span></span> MyCarFactoryBean();
      cfb.setMake(<span class="hljs-string"><span class="hljs-string">"Honda"</span></span>);
      cfb.setYear(<span class="hljs-number"><span class="hljs-number">1984</span></span>);
      <span class="hljs-keyword"><span class="hljs-keyword">return</span></span> cfb;
    }

    <span class="hljs-meta"><span class="hljs-meta">@Bean</span></span>
    <span class="hljs-function"><span class="hljs-keyword"><span class="hljs-function"><span class="hljs-keyword">public</span></span></span><span class="hljs-function"> Person </span><span class="hljs-title"><span class="hljs-function"><span class="hljs-title">aPerson</span></span></span><span class="hljs-params"><span class="hljs-function"><span class="hljs-params">()</span></span></span></span>{ 
    Person person = <span class="hljs-keyword"><span class="hljs-keyword">new</span></span> Person();
      <span class="hljs-comment"><span class="hljs-comment">// 注意这里的不同</span></span>
    person.setCar(carFactoryBean().getObject());
    <span class="hljs-keyword"><span class="hljs-keyword">return</span></span> person; 
    } 
}</code></pre>
<p>这个时候，其实我们的思路也很简单，把 MyCarFactoryBean 看成是一个简单的 Bean 就可以了，不必理会什么 FactoryBean，它是不是 FactoryBean 和我们没关系。</p>
<h3 id="初始化-bean-的回调">初始化 Bean 的回调</h3>
<p>有以下四种方案：</p>
<pre><code class="language-xml hljs"><span class="hljs-tag"><span class="hljs-tag">&lt;</span><span class="hljs-name"><span class="hljs-tag"><span class="hljs-name">bean</span></span></span><span class="hljs-tag"> </span><span class="hljs-attr"><span class="hljs-tag"><span class="hljs-attr">id</span></span></span><span class="hljs-tag">=</span><span class="hljs-string"><span class="hljs-tag"><span class="hljs-string">"exampleInitBean"</span></span></span><span class="hljs-tag"> </span><span class="hljs-attr"><span class="hljs-tag"><span class="hljs-attr">class</span></span></span><span class="hljs-tag">=</span><span class="hljs-string"><span class="hljs-tag"><span class="hljs-string">"examples.ExampleBean"</span></span></span><span class="hljs-tag"> </span><span class="hljs-attr"><span class="hljs-tag"><span class="hljs-attr">init-method</span></span></span><span class="hljs-tag">=</span><span class="hljs-string"><span class="hljs-tag"><span class="hljs-string">"init"</span></span></span><span class="hljs-tag">/&gt;</span></span></code></pre>
<pre><code class="language-java hljs"><span class="hljs-keyword"><span class="hljs-keyword">public</span></span> <span class="hljs-class"><span class="hljs-keyword"><span class="hljs-class"><span class="hljs-keyword">class</span></span></span><span class="hljs-class"> </span><span class="hljs-title"><span class="hljs-class"><span class="hljs-title">AnotherExampleBean</span></span></span><span class="hljs-class"> </span><span class="hljs-keyword"><span class="hljs-class"><span class="hljs-keyword">implements</span></span></span><span class="hljs-class"> </span><span class="hljs-title"><span class="hljs-class"><span class="hljs-title">InitializingBean</span></span></span><span class="hljs-class"> </span></span>{

    <span class="hljs-function"><span class="hljs-keyword"><span class="hljs-function"><span class="hljs-keyword">public</span></span></span><span class="hljs-function"> </span><span class="hljs-keyword"><span class="hljs-function"><span class="hljs-keyword">void</span></span></span><span class="hljs-function"> </span><span class="hljs-title"><span class="hljs-function"><span class="hljs-title">afterPropertiesSet</span></span></span><span class="hljs-params"><span class="hljs-function"><span class="hljs-params">()</span></span></span><span class="hljs-function"> </span></span>{
        <span class="hljs-comment"><span class="hljs-comment">// do some initialization work</span></span>
    }
}</code></pre>
<pre><code class="language-java hljs"><span class="hljs-meta"><span class="hljs-meta">@Bean</span></span>(initMethod = <span class="hljs-string"><span class="hljs-string">"init"</span></span>)
<span class="hljs-function"><span class="hljs-keyword"><span class="hljs-function"><span class="hljs-keyword">public</span></span></span><span class="hljs-function"> Foo </span><span class="hljs-title"><span class="hljs-function"><span class="hljs-title">foo</span></span></span><span class="hljs-params"><span class="hljs-function"><span class="hljs-params">()</span></span></span><span class="hljs-function"> </span></span>{
    <span class="hljs-keyword"><span class="hljs-keyword">return</span></span> <span class="hljs-keyword"><span class="hljs-keyword">new</span></span> Foo();
}</code></pre>
<pre><code class="language-java hljs"><span class="hljs-meta"><span class="hljs-meta">@PostConstruct</span></span>
<span class="hljs-function"><span class="hljs-keyword"><span class="hljs-function"><span class="hljs-keyword">public</span></span></span><span class="hljs-function"> </span><span class="hljs-keyword"><span class="hljs-function"><span class="hljs-keyword">void</span></span></span><span class="hljs-function"> </span><span class="hljs-title"><span class="hljs-function"><span class="hljs-title">init</span></span></span><span class="hljs-params"><span class="hljs-function"><span class="hljs-params">()</span></span></span><span class="hljs-function"> </span></span>{

}</code></pre>
<h3 id="销毁-bean-的回调">销毁 Bean 的回调</h3>
<pre><code class="language-xml hljs"><span class="hljs-tag"><span class="hljs-tag">&lt;</span><span class="hljs-name"><span class="hljs-tag"><span class="hljs-name">bean</span></span></span><span class="hljs-tag"> </span><span class="hljs-attr"><span class="hljs-tag"><span class="hljs-attr">id</span></span></span><span class="hljs-tag">=</span><span class="hljs-string"><span class="hljs-tag"><span class="hljs-string">"exampleInitBean"</span></span></span><span class="hljs-tag"> </span><span class="hljs-attr"><span class="hljs-tag"><span class="hljs-attr">class</span></span></span><span class="hljs-tag">=</span><span class="hljs-string"><span class="hljs-tag"><span class="hljs-string">"examples.ExampleBean"</span></span></span><span class="hljs-tag"> </span><span class="hljs-attr"><span class="hljs-tag"><span class="hljs-attr">destroy-method</span></span></span><span class="hljs-tag">=</span><span class="hljs-string"><span class="hljs-tag"><span class="hljs-string">"cleanup"</span></span></span><span class="hljs-tag">/&gt;</span></span></code></pre>
<pre><code class="language-java hljs"><span class="hljs-keyword"><span class="hljs-keyword">public</span></span> <span class="hljs-class"><span class="hljs-keyword"><span class="hljs-class"><span class="hljs-keyword">class</span></span></span><span class="hljs-class"> </span><span class="hljs-title"><span class="hljs-class"><span class="hljs-title">AnotherExampleBean</span></span></span><span class="hljs-class"> </span><span class="hljs-keyword"><span class="hljs-class"><span class="hljs-keyword">implements</span></span></span><span class="hljs-class"> </span><span class="hljs-title"><span class="hljs-class"><span class="hljs-title">DisposableBean</span></span></span><span class="hljs-class"> </span></span>{

    <span class="hljs-function"><span class="hljs-keyword"><span class="hljs-function"><span class="hljs-keyword">public</span></span></span><span class="hljs-function"> </span><span class="hljs-keyword"><span class="hljs-function"><span class="hljs-keyword">void</span></span></span><span class="hljs-function"> </span><span class="hljs-title"><span class="hljs-function"><span class="hljs-title">destroy</span></span></span><span class="hljs-params"><span class="hljs-function"><span class="hljs-params">()</span></span></span><span class="hljs-function"> </span></span>{
        <span class="hljs-comment"><span class="hljs-comment">// do some destruction work (like releasing pooled connections)</span></span>
    }
}</code></pre>
<pre><code class="language-java hljs"><span class="hljs-meta"><span class="hljs-meta">@Bean</span></span>(destroyMethod = <span class="hljs-string"><span class="hljs-string">"cleanup"</span></span>)
<span class="hljs-function"><span class="hljs-keyword"><span class="hljs-function"><span class="hljs-keyword">public</span></span></span><span class="hljs-function"> Bar </span><span class="hljs-title"><span class="hljs-function"><span class="hljs-title">bar</span></span></span><span class="hljs-params"><span class="hljs-function"><span class="hljs-params">()</span></span></span><span class="hljs-function"> </span></span>{
    <span class="hljs-keyword"><span class="hljs-keyword">return</span></span> <span class="hljs-keyword"><span class="hljs-keyword">new</span></span> Bar();
}</code></pre>
<pre><code class="language-java hljs"><span class="hljs-meta"><span class="hljs-meta">@PreDestroy</span></span>
<span class="hljs-function"><span class="hljs-keyword"><span class="hljs-function"><span class="hljs-keyword">public</span></span></span><span class="hljs-function"> </span><span class="hljs-keyword"><span class="hljs-function"><span class="hljs-keyword">void</span></span></span><span class="hljs-function"> </span><span class="hljs-title"><span class="hljs-function"><span class="hljs-title">cleanup</span></span></span><span class="hljs-params"><span class="hljs-function"><span class="hljs-params">()</span></span></span><span class="hljs-function"> </span></span>{

}</code></pre>
<h3 id="conversionservice">ConversionService</h3>
<p>既然文中说到了这个，顺便提一下好了。</p>
<p>最有用的场景就是，它用来将前端传过来的参数和后端的 controller 方法上的参数进行绑定的时候用。</p>
<p>像前端传过来的字符串、整数要转换为后端的 String、Integer 很容易，但是如果 controller 方法需要的是一个枚举值，或者是 Date 这些非基础类型（含基础类型包装类）值的时候，我们就可以考虑采用 ConversionService 来进行转换。</p>
<pre><code class="language-xml hljs"><span class="hljs-tag"><span class="hljs-tag">&lt;</span><span class="hljs-name"><span class="hljs-tag"><span class="hljs-name">bean</span></span></span><span class="hljs-tag"> </span><span class="hljs-attr"><span class="hljs-tag"><span class="hljs-attr">id</span></span></span><span class="hljs-tag">=</span><span class="hljs-string"><span class="hljs-tag"><span class="hljs-string">"conversionService"</span></span></span><span class="hljs-tag">
  </span><span class="hljs-attr"><span class="hljs-tag"><span class="hljs-attr">class</span></span></span><span class="hljs-tag">=</span><span class="hljs-string"><span class="hljs-tag"><span class="hljs-string">"org.springframework.context.support.ConversionServiceFactoryBean"</span></span></span><span class="hljs-tag">&gt;</span></span>
  <span class="hljs-tag"><span class="hljs-tag">&lt;</span><span class="hljs-name"><span class="hljs-tag"><span class="hljs-name">property</span></span></span><span class="hljs-tag"> </span><span class="hljs-attr"><span class="hljs-tag"><span class="hljs-attr">name</span></span></span><span class="hljs-tag">=</span><span class="hljs-string"><span class="hljs-tag"><span class="hljs-string">"converters"</span></span></span><span class="hljs-tag">&gt;</span></span>
    <span class="hljs-tag"><span class="hljs-tag">&lt;</span><span class="hljs-name"><span class="hljs-tag"><span class="hljs-name">list</span></span></span><span class="hljs-tag">&gt;</span></span>
      <span class="hljs-tag"><span class="hljs-tag">&lt;</span><span class="hljs-name"><span class="hljs-tag"><span class="hljs-name">bean</span></span></span><span class="hljs-tag"> </span><span class="hljs-attr"><span class="hljs-tag"><span class="hljs-attr">class</span></span></span><span class="hljs-tag">=</span><span class="hljs-string"><span class="hljs-tag"><span class="hljs-string">"com.javadoop.learning.utils.StringToEnumConverterFactory"</span></span></span><span class="hljs-tag">/&gt;</span></span>
    <span class="hljs-tag"><span class="hljs-tag">&lt;/</span><span class="hljs-name"><span class="hljs-tag"><span class="hljs-name">list</span></span></span><span class="hljs-tag">&gt;</span></span>
  <span class="hljs-tag"><span class="hljs-tag">&lt;/</span><span class="hljs-name"><span class="hljs-tag"><span class="hljs-name">property</span></span></span><span class="hljs-tag">&gt;</span></span>
<span class="hljs-tag"><span class="hljs-tag">&lt;/</span><span class="hljs-name"><span class="hljs-tag"><span class="hljs-name">bean</span></span></span><span class="hljs-tag">&gt;</span></span></code></pre>
<p>ConversionService 接口很简单，所以要自定义一个 convert 的话也很简单。</p>
<p>下面再说一个实现这种转换很简单的方式，那就是实现 Converter 接口。</p>
<p>来看一个很简单的例子，这样比什么都管用。</p>
<pre><code class="language-java hljs"><span class="hljs-keyword"><span class="hljs-keyword">public</span></span> <span class="hljs-class"><span class="hljs-keyword"><span class="hljs-class"><span class="hljs-keyword">class</span></span></span><span class="hljs-class"> </span><span class="hljs-title"><span class="hljs-class"><span class="hljs-title">StringToDateConverter</span></span></span><span class="hljs-class"> </span><span class="hljs-keyword"><span class="hljs-class"><span class="hljs-keyword">implements</span></span></span><span class="hljs-class"> </span><span class="hljs-title"><span class="hljs-class"><span class="hljs-title">Converter</span></span></span><span class="hljs-class">&lt;</span><span class="hljs-title"><span class="hljs-class"><span class="hljs-title">String</span></span></span><span class="hljs-class">, </span><span class="hljs-title"><span class="hljs-class"><span class="hljs-title">Date</span></span></span><span class="hljs-class">&gt; </span></span>{

    <span class="hljs-meta"><span class="hljs-meta">@Override</span></span>
    <span class="hljs-function"><span class="hljs-keyword"><span class="hljs-function"><span class="hljs-keyword">public</span></span></span><span class="hljs-function"> Date </span><span class="hljs-title"><span class="hljs-function"><span class="hljs-title">convert</span></span></span><span class="hljs-params"><span class="hljs-function"><span class="hljs-params">(String source)</span></span></span><span class="hljs-function"> </span></span>{
        <span class="hljs-keyword"><span class="hljs-keyword">try</span></span> {
            <span class="hljs-keyword"><span class="hljs-keyword">return</span></span> DateUtils.parseDate(source, <span class="hljs-string"><span class="hljs-string">"yyyy-MM-dd"</span></span>, <span class="hljs-string"><span class="hljs-string">"yyyy-MM-dd HH:mm:ss"</span></span>, <span class="hljs-string"><span class="hljs-string">"yyyy-MM-dd HH:mm"</span></span>, <span class="hljs-string"><span class="hljs-string">"HH:mm:ss"</span></span>, <span class="hljs-string"><span class="hljs-string">"HH:mm"</span></span>);
        } <span class="hljs-keyword"><span class="hljs-keyword">catch</span></span> (ParseException e) {
            <span class="hljs-keyword"><span class="hljs-keyword">return</span></span> <span class="hljs-keyword"><span class="hljs-keyword">null</span></span>;
        }
    }
}</code></pre>
<p>只要注册这个 Bean 就可以了。这样，前端往后端传的时间描述字符串就很容易绑定成 Date 类型了，不需要其他任何操作。</p>
<h3 id="bean-继承">Bean 继承</h3>
<p>在初始化 Bean 的地方，我们说过了这个：</p>
<pre><code class="language-java hljs">RootBeanDefinition bd = getMergedLocalBeanDefinition(beanName);</code></pre>
<p>这里涉及到的就是 <code>&lt;bean parent="" /&gt;</code> 中的 parent 属性，我们来看看 Spring 中是用这个来干什么的。</p>
<p>首先，我们要明白，这里的继承和 java 语法中的继承没有任何关系，不过思路是相通的。child bean 会继承 parent bean 的所有配置，也可以覆盖一些配置，当然也可以新增额外的配置。</p>
<p>Spring 中提供了继承自 AbstractBeanDefinition 的 <code>ChildBeanDefinition</code> 来表示 child bean。</p>
<p>看如下一个例子:</p>
<pre><code class="language-java hljs">&lt;bean id=<span class="hljs-string"><span class="hljs-string">"inheritedTestBean"</span></span> <span class="hljs-keyword"><span class="hljs-keyword">abstract</span></span>=<span class="hljs-string"><span class="hljs-string">"true"</span></span> <span class="hljs-class"><span class="hljs-keyword"><span class="hljs-class"><span class="hljs-keyword">class</span></span></span></span>=<span class="hljs-string"><span class="hljs-string">"org.springframework.beans.TestBean"</span></span>&gt;
    &lt;property name=<span class="hljs-string"><span class="hljs-string">"name"</span></span> value=<span class="hljs-string"><span class="hljs-string">"parent"</span></span>/&gt;
    &lt;property name=<span class="hljs-string"><span class="hljs-string">"age"</span></span> value=<span class="hljs-string"><span class="hljs-string">"1"</span></span>/&gt;
&lt;/bean&gt;

&lt;bean id=<span class="hljs-string"><span class="hljs-string">"inheritsWithDifferentClass"</span></span> <span class="hljs-class"><span class="hljs-keyword"><span class="hljs-class"><span class="hljs-keyword">class</span></span></span></span>=<span class="hljs-string"><span class="hljs-string">"org.springframework.beans.DerivedTestBean"</span></span>
        parent=<span class="hljs-string"><span class="hljs-string">"inheritedTestBean"</span></span> init-method=<span class="hljs-string"><span class="hljs-string">"initialize"</span></span>&gt;

    &lt;property name=<span class="hljs-string"><span class="hljs-string">"name"</span></span> value=<span class="hljs-string"><span class="hljs-string">"override"</span></span>/&gt;
&lt;/bean&gt;</code></pre>
<p>parent bean 设置了 <code>abstract="true"</code> 所以它不会被实例化，child bean 继承了 parent bean 的两个属性，但是对 name 属性进行了覆写。</p>
<p>child bean 会继承 scope、构造器参数值、属性值、init-method、destroy-method 等等。</p>
<p>当然，我不是说 parent bean 中的 abstract = true 在这里是必须的，只是说如果加上了以后 Spring 在实例化 singleton beans 的时候会忽略这个 bean。</p>
<p>比如下面这个极端 parent bean，它没有指定 class，所以毫无疑问，这个 bean 的作用就是用来充当模板用的 parent bean，此处就必须加上 abstract = true。</p>
<pre><code class="language-java hljs">&lt;bean id=<span class="hljs-string"><span class="hljs-string">"inheritedTestBeanWithoutClass"</span></span> <span class="hljs-keyword"><span class="hljs-keyword">abstract</span></span>=<span class="hljs-string"><span class="hljs-string">"true"</span></span>&gt;
    &lt;property name=<span class="hljs-string"><span class="hljs-string">"name"</span></span> value=<span class="hljs-string"><span class="hljs-string">"parent"</span></span>/&gt;
    &lt;property name=<span class="hljs-string"><span class="hljs-string">"age"</span></span> value=<span class="hljs-string"><span class="hljs-string">"1"</span></span>/&gt;
&lt;/bean&gt;</code></pre>
<h3 id="方法注入">方法注入</h3>
<p>一般来说，我们的应用中大多数的 Bean 都是 singleton 的。singleton 依赖 singleton，或者 prototype 依赖 prototype 都很好解决，直接设置属性依赖就可以了。</p>
<p>但是，如果是 singleton 依赖 prototype 呢？这个时候不能用属性依赖，因为如果用属性依赖的话，我们每次其实拿到的还是第一次初始化时候的 bean。</p>
<p>一种解决方案就是不要用属性依赖，每次获取依赖的 bean 的时候从 BeanFactory 中取。这个也是大家最常用的方式了吧。怎么取，我就不介绍了，大部分 Spring 项目大家都会定义那么个工具类的。</p>
<p>另一种解决方案就是这里要介绍的通过使用 Lookup method。</p>
<h4 id="lookup-method">lookup-method</h4>
<p>我们来看一下 Spring Reference 中提供的一个例子：</p>
<pre><code class="language-java hljs"><span class="hljs-keyword"><span class="hljs-keyword">package</span></span> fiona.apple;

<span class="hljs-comment"><span class="hljs-comment">// no more Spring imports!</span></span>

<span class="hljs-keyword"><span class="hljs-keyword">public</span></span> <span class="hljs-keyword"><span class="hljs-keyword">abstract</span></span> <span class="hljs-class"><span class="hljs-keyword"><span class="hljs-class"><span class="hljs-keyword">class</span></span></span><span class="hljs-class"> </span><span class="hljs-title"><span class="hljs-class"><span class="hljs-title">CommandManager</span></span></span><span class="hljs-class"> </span></span>{

    <span class="hljs-function"><span class="hljs-keyword"><span class="hljs-function"><span class="hljs-keyword">public</span></span></span><span class="hljs-function"> Object </span><span class="hljs-title"><span class="hljs-function"><span class="hljs-title">process</span></span></span><span class="hljs-params"><span class="hljs-function"><span class="hljs-params">(Object commandState)</span></span></span><span class="hljs-function"> </span></span>{
        <span class="hljs-comment"><span class="hljs-comment">// grab a new instance of the appropriate Command interface</span></span>
        Command command = createCommand();
        <span class="hljs-comment"><span class="hljs-comment">// set the state on the (hopefully brand new) Command instance</span></span>
        command.setState(commandState);
        <span class="hljs-keyword"><span class="hljs-keyword">return</span></span> command.execute();
    }

    <span class="hljs-comment"><span class="hljs-comment">// okay... but where is the implementation of this method?</span></span>
    <span class="hljs-function"><span class="hljs-keyword"><span class="hljs-function"><span class="hljs-keyword">protected</span></span></span><span class="hljs-function"> </span><span class="hljs-keyword"><span class="hljs-function"><span class="hljs-keyword">abstract</span></span></span><span class="hljs-function"> Command </span><span class="hljs-title"><span class="hljs-function"><span class="hljs-title">createCommand</span></span></span><span class="hljs-params"><span class="hljs-function"><span class="hljs-params">()</span></span></span></span>;
}</code></pre>
<p>xml 配置 <code>&lt;lookup-method /&gt;</code>：</p>
<pre><code class="language-xml hljs"><span class="hljs-comment"><span class="hljs-comment">&lt;!-- a stateful bean deployed as a prototype (non-singleton) --&gt;</span></span>
<span class="hljs-tag"><span class="hljs-tag">&lt;</span><span class="hljs-name"><span class="hljs-tag"><span class="hljs-name">bean</span></span></span><span class="hljs-tag"> </span><span class="hljs-attr"><span class="hljs-tag"><span class="hljs-attr">id</span></span></span><span class="hljs-tag">=</span><span class="hljs-string"><span class="hljs-tag"><span class="hljs-string">"myCommand"</span></span></span><span class="hljs-tag"> </span><span class="hljs-attr"><span class="hljs-tag"><span class="hljs-attr">class</span></span></span><span class="hljs-tag">=</span><span class="hljs-string"><span class="hljs-tag"><span class="hljs-string">"fiona.apple.AsyncCommand"</span></span></span><span class="hljs-tag"> </span><span class="hljs-attr"><span class="hljs-tag"><span class="hljs-attr">scope</span></span></span><span class="hljs-tag">=</span><span class="hljs-string"><span class="hljs-tag"><span class="hljs-string">"prototype"</span></span></span><span class="hljs-tag">&gt;</span></span>
    <span class="hljs-comment"><span class="hljs-comment">&lt;!-- inject dependencies here as required --&gt;</span></span>
<span class="hljs-tag"><span class="hljs-tag">&lt;/</span><span class="hljs-name"><span class="hljs-tag"><span class="hljs-name">bean</span></span></span><span class="hljs-tag">&gt;</span></span>

<span class="hljs-comment"><span class="hljs-comment">&lt;!-- commandProcessor uses statefulCommandHelper --&gt;</span></span>
<span class="hljs-tag"><span class="hljs-tag">&lt;</span><span class="hljs-name"><span class="hljs-tag"><span class="hljs-name">bean</span></span></span><span class="hljs-tag"> </span><span class="hljs-attr"><span class="hljs-tag"><span class="hljs-attr">id</span></span></span><span class="hljs-tag">=</span><span class="hljs-string"><span class="hljs-tag"><span class="hljs-string">"commandManager"</span></span></span><span class="hljs-tag"> </span><span class="hljs-attr"><span class="hljs-tag"><span class="hljs-attr">class</span></span></span><span class="hljs-tag">=</span><span class="hljs-string"><span class="hljs-tag"><span class="hljs-string">"fiona.apple.CommandManager"</span></span></span><span class="hljs-tag">&gt;</span></span>
    <span class="hljs-tag"><span class="hljs-tag">&lt;</span><span class="hljs-name"><span class="hljs-tag"><span class="hljs-name">lookup-method</span></span></span><span class="hljs-tag"> </span><span class="hljs-attr"><span class="hljs-tag"><span class="hljs-attr">name</span></span></span><span class="hljs-tag">=</span><span class="hljs-string"><span class="hljs-tag"><span class="hljs-string">"createCommand"</span></span></span><span class="hljs-tag"> </span><span class="hljs-attr"><span class="hljs-tag"><span class="hljs-attr">bean</span></span></span><span class="hljs-tag">=</span><span class="hljs-string"><span class="hljs-tag"><span class="hljs-string">"myCommand"</span></span></span><span class="hljs-tag">/&gt;</span></span>
<span class="hljs-tag"><span class="hljs-tag">&lt;/</span><span class="hljs-name"><span class="hljs-tag"><span class="hljs-name">bean</span></span></span><span class="hljs-tag">&gt;</span></span></code></pre>
<p>Spring 采用 <strong>CGLIB 生成字节码</strong>的方式来生成一个子类。我们定义的类不能定义为 final class，抽象方法上也不能加 final。</p>
<p>lookup-method 上的配置也可以采用注解来完成，这样就可以不用配置 <code>&lt;lookup-method /&gt;</code> 了，其他不变：</p>
<pre><code class="language-java hljs"><span class="hljs-keyword"><span class="hljs-keyword">public</span></span> <span class="hljs-keyword"><span class="hljs-keyword">abstract</span></span> <span class="hljs-class"><span class="hljs-keyword"><span class="hljs-class"><span class="hljs-keyword">class</span></span></span><span class="hljs-class"> </span><span class="hljs-title"><span class="hljs-class"><span class="hljs-title">CommandManager</span></span></span><span class="hljs-class"> </span></span>{

    <span class="hljs-function"><span class="hljs-keyword"><span class="hljs-function"><span class="hljs-keyword">public</span></span></span><span class="hljs-function"> Object </span><span class="hljs-title"><span class="hljs-function"><span class="hljs-title">process</span></span></span><span class="hljs-params"><span class="hljs-function"><span class="hljs-params">(Object commandState)</span></span></span><span class="hljs-function"> </span></span>{
        MyCommand command = createCommand();
        command.setState(commandState);
        <span class="hljs-keyword"><span class="hljs-keyword">return</span></span> command.execute();
    }

    <span class="hljs-meta"><span class="hljs-meta">@Lookup</span></span>(<span class="hljs-string"><span class="hljs-string">"myCommand"</span></span>)
    <span class="hljs-function"><span class="hljs-keyword"><span class="hljs-function"><span class="hljs-keyword">protected</span></span></span><span class="hljs-function"> </span><span class="hljs-keyword"><span class="hljs-function"><span class="hljs-keyword">abstract</span></span></span><span class="hljs-function"> Command </span><span class="hljs-title"><span class="hljs-function"><span class="hljs-title">createCommand</span></span></span><span class="hljs-params"><span class="hljs-function"><span class="hljs-params">()</span></span></span></span>;
}</code></pre>
<blockquote>
<p>注意，既然用了注解，要配置注解扫描：<code>&lt;context:component-scan base-package="com.javadoop" /&gt;</code></p>
</blockquote>
<p>甚至，我们可以像下面这样：</p>
<pre><code class="language-java hljs"><span class="hljs-keyword"><span class="hljs-keyword">public</span></span> <span class="hljs-keyword"><span class="hljs-keyword">abstract</span></span> <span class="hljs-class"><span class="hljs-keyword"><span class="hljs-class"><span class="hljs-keyword">class</span></span></span><span class="hljs-class"> </span><span class="hljs-title"><span class="hljs-class"><span class="hljs-title">CommandManager</span></span></span><span class="hljs-class"> </span></span>{

    <span class="hljs-function"><span class="hljs-keyword"><span class="hljs-function"><span class="hljs-keyword">public</span></span></span><span class="hljs-function"> Object </span><span class="hljs-title"><span class="hljs-function"><span class="hljs-title">process</span></span></span><span class="hljs-params"><span class="hljs-function"><span class="hljs-params">(Object commandState)</span></span></span><span class="hljs-function"> </span></span>{
        MyCommand command = createCommand();
        command.setState(commandState);
        <span class="hljs-keyword"><span class="hljs-keyword">return</span></span> command.execute();
    }

    <span class="hljs-meta"><span class="hljs-meta">@Lookup</span></span>
    <span class="hljs-function"><span class="hljs-keyword"><span class="hljs-function"><span class="hljs-keyword">protected</span></span></span><span class="hljs-function"> </span><span class="hljs-keyword"><span class="hljs-function"><span class="hljs-keyword">abstract</span></span></span><span class="hljs-function"> MyCommand </span><span class="hljs-title"><span class="hljs-function"><span class="hljs-title">createCommand</span></span></span><span class="hljs-params"><span class="hljs-function"><span class="hljs-params">()</span></span></span></span>;
}</code></pre>
<blockquote>
<p>上面的返回值用了 MyCommand，当然，如果 Command 只有一个实现类，那返回值也可以写 Command。</p>
</blockquote>
<h4 id="replaced-method">replaced-method</h4>
<p>记住它的功能，就是替换掉 bean 中的一些方法。</p>
<pre><code class="language-java hljs"><span class="hljs-keyword"><span class="hljs-keyword">public</span></span> <span class="hljs-class"><span class="hljs-keyword"><span class="hljs-class"><span class="hljs-keyword">class</span></span></span><span class="hljs-class"> </span><span class="hljs-title"><span class="hljs-class"><span class="hljs-title">MyValueCalculator</span></span></span><span class="hljs-class"> </span></span>{

    <span class="hljs-function"><span class="hljs-keyword"><span class="hljs-function"><span class="hljs-keyword">public</span></span></span><span class="hljs-function"> String </span><span class="hljs-title"><span class="hljs-function"><span class="hljs-title">computeValue</span></span></span><span class="hljs-params"><span class="hljs-function"><span class="hljs-params">(String input)</span></span></span><span class="hljs-function"> </span></span>{
        <span class="hljs-comment"><span class="hljs-comment">// some real code...</span></span>
    }

    <span class="hljs-comment"><span class="hljs-comment">// some other methods...</span></span>
}</code></pre>
<p>方法覆写，注意要实现 MethodReplacer 接口：</p>
<pre><code class="language-java hljs"><span class="hljs-keyword"><span class="hljs-keyword">public</span></span> <span class="hljs-class"><span class="hljs-keyword"><span class="hljs-class"><span class="hljs-keyword">class</span></span></span><span class="hljs-class"> </span><span class="hljs-title"><span class="hljs-class"><span class="hljs-title">ReplacementComputeValue</span></span></span><span class="hljs-class"> </span><span class="hljs-keyword"><span class="hljs-class"><span class="hljs-keyword">implements</span></span></span><span class="hljs-class"> </span><span class="hljs-title"><span class="hljs-class"><span class="hljs-title">org</span></span></span><span class="hljs-class">.</span><span class="hljs-title"><span class="hljs-class"><span class="hljs-title">springframework</span></span></span><span class="hljs-class">.</span><span class="hljs-title"><span class="hljs-class"><span class="hljs-title">beans</span></span></span><span class="hljs-class">.</span><span class="hljs-title"><span class="hljs-class"><span class="hljs-title">factory</span></span></span><span class="hljs-class">.</span><span class="hljs-title"><span class="hljs-class"><span class="hljs-title">support</span></span></span><span class="hljs-class">.</span><span class="hljs-title"><span class="hljs-class"><span class="hljs-title">MethodReplacer</span></span></span><span class="hljs-class"> </span></span>{

    <span class="hljs-function"><span class="hljs-keyword"><span class="hljs-function"><span class="hljs-keyword">public</span></span></span><span class="hljs-function"> Object </span><span class="hljs-title"><span class="hljs-function"><span class="hljs-title">reimplement</span></span></span><span class="hljs-params"><span class="hljs-function"><span class="hljs-params">(Object o, Method m, Object[] args)</span></span></span><span class="hljs-function"> </span><span class="hljs-keyword"><span class="hljs-function"><span class="hljs-keyword">throws</span></span></span><span class="hljs-function"> Throwable </span></span>{
        <span class="hljs-comment"><span class="hljs-comment">// get the input value, work with it, and return a computed result</span></span>
        String input = (String) args[<span class="hljs-number"><span class="hljs-number">0</span></span>];
        ...
        <span class="hljs-keyword"><span class="hljs-keyword">return</span></span> ...;
    }
}</code></pre>
<p>配置也很简单：</p>
<pre><code class="language-xml hljs"><span class="hljs-tag"><span class="hljs-tag">&lt;</span><span class="hljs-name"><span class="hljs-tag"><span class="hljs-name">bean</span></span></span><span class="hljs-tag"> </span><span class="hljs-attr"><span class="hljs-tag"><span class="hljs-attr">id</span></span></span><span class="hljs-tag">=</span><span class="hljs-string"><span class="hljs-tag"><span class="hljs-string">"myValueCalculator"</span></span></span><span class="hljs-tag"> </span><span class="hljs-attr"><span class="hljs-tag"><span class="hljs-attr">class</span></span></span><span class="hljs-tag">=</span><span class="hljs-string"><span class="hljs-tag"><span class="hljs-string">"x.y.z.MyValueCalculator"</span></span></span><span class="hljs-tag">&gt;</span></span>
    <span class="hljs-comment"><span class="hljs-comment">&lt;!-- 定义 computeValue 这个方法要被替换掉 --&gt;</span></span>
    <span class="hljs-tag"><span class="hljs-tag">&lt;</span><span class="hljs-name"><span class="hljs-tag"><span class="hljs-name">replaced-method</span></span></span><span class="hljs-tag"> </span><span class="hljs-attr"><span class="hljs-tag"><span class="hljs-attr">name</span></span></span><span class="hljs-tag">=</span><span class="hljs-string"><span class="hljs-tag"><span class="hljs-string">"computeValue"</span></span></span><span class="hljs-tag"> </span><span class="hljs-attr"><span class="hljs-tag"><span class="hljs-attr">replacer</span></span></span><span class="hljs-tag">=</span><span class="hljs-string"><span class="hljs-tag"><span class="hljs-string">"replacementComputeValue"</span></span></span><span class="hljs-tag">&gt;</span></span>
        <span class="hljs-tag"><span class="hljs-tag">&lt;</span><span class="hljs-name"><span class="hljs-tag"><span class="hljs-name">arg-type</span></span></span><span class="hljs-tag">&gt;</span></span>String<span class="hljs-tag"><span class="hljs-tag">&lt;/</span><span class="hljs-name"><span class="hljs-tag"><span class="hljs-name">arg-type</span></span></span><span class="hljs-tag">&gt;</span></span>
    <span class="hljs-tag"><span class="hljs-tag">&lt;/</span><span class="hljs-name"><span class="hljs-tag"><span class="hljs-name">replaced-method</span></span></span><span class="hljs-tag">&gt;</span></span>
<span class="hljs-tag"><span class="hljs-tag">&lt;/</span><span class="hljs-name"><span class="hljs-tag"><span class="hljs-name">bean</span></span></span><span class="hljs-tag">&gt;</span></span>

<span class="hljs-tag"><span class="hljs-tag">&lt;</span><span class="hljs-name"><span class="hljs-tag"><span class="hljs-name">bean</span></span></span><span class="hljs-tag"> </span><span class="hljs-attr"><span class="hljs-tag"><span class="hljs-attr">id</span></span></span><span class="hljs-tag">=</span><span class="hljs-string"><span class="hljs-tag"><span class="hljs-string">"replacementComputeValue"</span></span></span><span class="hljs-tag"> </span><span class="hljs-attr"><span class="hljs-tag"><span class="hljs-attr">class</span></span></span><span class="hljs-tag">=</span><span class="hljs-string"><span class="hljs-tag"><span class="hljs-string">"a.b.c.ReplacementComputeValue"</span></span></span><span class="hljs-tag">/&gt;</span></span></code></pre>
<blockquote>
<p>arg-type 明显不是必须的，除非存在方法重载，这样必须通过参数类型列表来判断这里要覆盖哪个方法。</p>
</blockquote>
<h3 id="beanpostprocessor">BeanPostProcessor</h3>
<p>应该说 BeanPostProcessor 概念在 Spring 中也是比较重要的。我们看下接口定义：</p>
<pre><code class="language-java hljs"><span class="hljs-keyword"><span class="hljs-keyword">public</span></span> <span class="hljs-class"><span class="hljs-keyword"><span class="hljs-class"><span class="hljs-keyword">interface</span></span></span><span class="hljs-class"> </span><span class="hljs-title"><span class="hljs-class"><span class="hljs-title">BeanPostProcessor</span></span></span><span class="hljs-class"> </span></span>{

   <span class="hljs-function"><span class="hljs-function">Object </span><span class="hljs-title"><span class="hljs-function"><span class="hljs-title">postProcessBeforeInitialization</span></span></span><span class="hljs-params"><span class="hljs-function"><span class="hljs-params">(Object bean, String beanName)</span></span></span><span class="hljs-function"> </span><span class="hljs-keyword"><span class="hljs-function"><span class="hljs-keyword">throws</span></span></span><span class="hljs-function"> BeansException</span></span>;

   <span class="hljs-function"><span class="hljs-function">Object </span><span class="hljs-title"><span class="hljs-function"><span class="hljs-title">postProcessAfterInitialization</span></span></span><span class="hljs-params"><span class="hljs-function"><span class="hljs-params">(Object bean, String beanName)</span></span></span><span class="hljs-function"> </span><span class="hljs-keyword"><span class="hljs-function"><span class="hljs-keyword">throws</span></span></span><span class="hljs-function"> BeansException</span></span>;

}</code></pre>
<p>看这个接口中的两个方法名字我们大体上可以猜测 bean 在初始化之前会执行 postProcessBeforeInitialization 这个方法，初始化完成之后会执行 postProcessAfterInitialization 这个方法。但是，这么理解是非常片面的。</p>
<p>首先，我们要明白，除了我们自己定义的 BeanPostProcessor 实现外，Spring 容器在启动时自动给我们也加了几个。如在获取 BeanFactory 的 obtainFactory() 方法结束后的 prepareBeanFactory(factory)，大家仔细看会发现，Spring 往容器中添加了这两个 BeanPostProcessor：ApplicationContextAwareProcessor、ApplicationListenerDetector。</p>
<p>我们回到这个接口本身，读者请看第一个方法，这个方法接受的第一个参数是 bean 实例，第二个参数是 bean 的名字，重点在返回值将会作为新的 bean 实例，所以，没事的话这里不能随便返回个 null。</p>
<p>那意味着什么呢？我们很容易想到的就是，我们这里可以对一些我们想要修饰的 bean 实例做一些事情。但是对于 Spring 框架来说，它会决定是不是要在这个方法中返回 bean 实例的代理，这样就有更大的想象空间了。</p>
<p>最后，我们说说如果我们自己定义一个 bean 实现 BeanPostProcessor 的话，它的执行时机是什么时候？</p>
<p>如果仔细看了代码分析的话，其实很容易知道了，在 bean 实例化完成、属性注入完成之后，会执行回调方法，具体请参见类 AbstractAutowireCapableBeanFactory#initBean 方法。</p>
<p>首先会回调几个实现了 Aware 接口的 bean，然后就开始回调 BeanPostProcessor 的 postProcessBeforeInitialization 方法，之后是回调 init-method，然后再回调 BeanPostProcessor 的 postProcessAfterInitialization 方法。</p>
<h2 id="总结">总结</h2>
<p>按理说，总结应该写在附录前面，我就不讲究了。</p>
<p>在花了那么多时间后，这篇文章终于算是基本写完了，大家在惊叹 Spring 给我们做了那么多的事的时候，应该透过现象看本质，去理解 Spring 写得好的地方，去理解它的设计思想。</p>
<p>本文的缺陷在于对 Spring 预初始化 singleton beans 的过程分析不够，主要是代码量真的比较大，分支旁路众多。同时，虽然附录条目不少，但是庞大的 Spring 真的引出了很多的概念，希望日后有精力可以慢慢补充一些。</p>
<p>（全文完）</p>
</div><div><div class="c" style="display: block; margin-bottom: 30px;"><h4>留下你的评论</h4><div class="anonymous"><input type="text" placeholder="[ 游客 ] 昵称" value=""><input type="text" placeholder="[ 游客 ] email" value=""><a href="javascript:;">--&gt; 使用 GitHub 登录</a></div><div class="preview" id="bca48435" style="display: none;"><div class="bg"><span class="txt"> 评论预览 </span></div><div class="marked"></div></div><div class="ant-spin-nested-loading"><div class="ant-spin-container"><div style="position: relative;"><textarea type="text" class="ant-input comment-textarea" placeholder="请使用 markdown 语法编辑，读者可开启预览功能"></textarea><span class="togglePreview"> 开启预览</span><span class="cancel" style="display: none;">取消</span><button type="button" class="ant-btn submit"><span>提 交</span></button></div></div></div></div><div class="commentTitle"><h4>评论区</h4><div class="ant-btn-group btns"><button type="button" class="ant-btn ant-btn-primary ant-btn-sm"><span>最 早</span></button><button type="button" class="ant-btn ant-btn-default ant-btn-sm"><span>最 新</span></button></div></div><div class="comment-item"><div style="display: none;"><div class="animationload"><div class="osahanloading"></div></div></div><div class="media"><div class="media-left"><img src="./Spring IOC 容器源码分析_files/8.png" class="media-object img-circle"><i class="vertical-line"></i></div><div class="media-body" id="comment_head_28"><h5 class="media-heading">~ <span style="font-weight: normal;"> 2017-11-21 01:41:21 </span></h5><div class="comment-content-wrapper"><div class="" id="comment_body_28" style="margin: 8px 0px;"><p>有点长，需要点力气才能消化，干货很多~</p>
</div><div class=""></div></div><span class="operation">回复</span><div class="c" id="comment_textarea_28" style="display: none;"><div class="anonymous"><input type="text" placeholder="[ 游客 ] 昵称" value=""><input type="text" placeholder="[ 游客 ] email" value=""><a href="javascript:;">--&gt; 使用 GitHub 登录</a></div><div class="preview" id="cacddda9" style="display: none;"><div class="bg"><span class="txt"> 评论预览 </span></div><div class="marked"></div></div><div class="ant-spin-nested-loading"><div class="ant-spin-container"><div style="position: relative;"><textarea type="text" class="ant-input comment-textarea" placeholder="请使用 markdown 语法编辑，读者可开启预览功能"></textarea><span class="togglePreview"> 开启预览</span><span class="cancel">取消</span><button type="button" class="ant-btn submit"><span>提 交</span></button></div></div></div></div></div></div></div><div class="comment-item"><div style="display: none;"><div class="animationload"><div class="osahanloading"></div></div></div><div class="media"><div class="media-left" style="cursor: pointer;"><img src="./Spring IOC 容器源码分析_files/4.png" class="media-object img-circle"><i class="vertical-line"></i></div><div class="media-body" id="comment_head_45"><h5 class="media-heading">Narutow <span style="font-weight: normal;"> 2017-12-12 04:46:22 </span></h5><div class="comment-content-wrapper"><div class="" id="comment_body_45" style="margin: 8px 0px;"><p>很用心的文章，如果能在前面概述下大致的启动过程就太好啦。另外问下可以转载到CSND不</p>
</div><div class=""></div></div><span class="operation">回复</span><div class="comment-item" style="display: block;"><div style="display: none;"><div class="animationload"><div class="osahanloading"></div></div></div><div class="media"><div class="media-left"><img src="./Spring IOC 容器源码分析_files/0.png" class="media-object img-circle"><i class="vertical-line"></i></div><div class="media-body" id="comment_head_46"><h5 class="media-heading">HongJie <span style="font-weight: normal;"> 2017-12-12 04:48:53 </span></h5><div class="comment-content-wrapper"><div class="" id="comment_body_46" style="margin: 8px 0px;"><p>可以的，欢迎转载</p>
</div><div class=""></div></div><span class="operation">回复</span><div class="c" id="comment_textarea_46" style="display: none;"><div class="anonymous"><input type="text" placeholder="[ 游客 ] 昵称" value=""><input type="text" placeholder="[ 游客 ] email" value=""><a href="javascript:;">--&gt; 使用 GitHub 登录</a></div><div class="preview" id="bae466d5" style="display: none;"><div class="bg"><span class="txt"> 评论预览 </span></div><div class="marked"></div></div><div class="ant-spin-nested-loading"><div class="ant-spin-container"><div style="position: relative;"><textarea type="text" class="ant-input comment-textarea" placeholder="请使用 markdown 语法编辑，读者可开启预览功能"></textarea><span class="togglePreview"> 开启预览</span><span class="cancel">取消</span><button type="button" class="ant-btn submit"><span>提 交</span></button></div></div></div></div></div></div></div><div class="c" id="comment_textarea_45" style="display: none;"><div class="anonymous"><input type="text" placeholder="[ 游客 ] 昵称" value=""><input type="text" placeholder="[ 游客 ] email" value=""><a href="javascript:;">--&gt; 使用 GitHub 登录</a></div><div class="preview" id="dd5b0124" style="display: none;"><div class="bg"><span class="txt"> 评论预览 </span></div><div class="marked"></div></div><div class="ant-spin-nested-loading"><div class="ant-spin-container"><div style="position: relative;"><textarea type="text" class="ant-input comment-textarea" placeholder="请使用 markdown 语法编辑，读者可开启预览功能"></textarea><span class="togglePreview"> 开启预览</span><span class="cancel">取消</span><button type="button" class="ant-btn submit"><span>提 交</span></button></div></div></div></div></div></div></div><div class="comment-item"><div style="display: none;"><div class="animationload"><div class="osahanloading"></div></div></div><div class="media"><div class="media-left" style="cursor: pointer;"><img src="./Spring IOC 容器源码分析_files/9.png" class="media-object img-circle"><i class="vertical-line"></i></div><div class="media-body" id="comment_head_58"><h5 class="media-heading">BIN <span style="font-weight: normal;"> 2017-12-19 10:19:17 </span></h5><div class="comment-content-wrapper"><div class="" id="comment_body_58" style="margin: 8px 0px;"><p>ClassPathXmlApplicationContext构造函数中，this.setConfigLocations(configLocations);此方法是将资源文件放到父类的configLocations这个变量中，并不是configResources。还是我理解的问题？源码包是4.3.11</p>
</div><div class=""></div></div><span class="operation">回复</span><div class="comment-item" style="display: block;"><div style="display: none;"><div class="animationload"><div class="osahanloading"></div></div></div><div class="media"><div class="media-left"><img src="./Spring IOC 容器源码分析_files/0.png" class="media-object img-circle"><i class="vertical-line"></i></div><div class="media-body" id="comment_head_59"><h5 class="media-heading">HongJie <span style="font-weight: normal;"> 2017-12-19 10:58:31 </span></h5><div class="comment-content-wrapper"><div class="" id="comment_body_59" style="margin: 8px 0px;"><p>嗯嗯，你说的是对的，是我搞错了，抱歉。</p>
</div><div class=""></div></div><span class="operation">回复</span><div class="c" id="comment_textarea_59" style="display: none;"><div class="anonymous"><input type="text" placeholder="[ 游客 ] 昵称" value=""><input type="text" placeholder="[ 游客 ] email" value=""><a href="javascript:;">--&gt; 使用 GitHub 登录</a></div><div class="preview" id="e573c24b" style="display: none;"><div class="bg"><span class="txt"> 评论预览 </span></div><div class="marked"></div></div><div class="ant-spin-nested-loading"><div class="ant-spin-container"><div style="position: relative;"><textarea type="text" class="ant-input comment-textarea" placeholder="请使用 markdown 语法编辑，读者可开启预览功能"></textarea><span class="togglePreview"> 开启预览</span><span class="cancel">取消</span><button type="button" class="ant-btn submit"><span>提 交</span></button></div></div></div></div></div></div></div><div class="c" id="comment_textarea_58" style="display: none;"><div class="anonymous"><input type="text" placeholder="[ 游客 ] 昵称" value=""><input type="text" placeholder="[ 游客 ] email" value=""><a href="javascript:;">--&gt; 使用 GitHub 登录</a></div><div class="preview" id="48143a7" style="display: none;"><div class="bg"><span class="txt"> 评论预览 </span></div><div class="marked"></div></div><div class="ant-spin-nested-loading"><div class="ant-spin-container"><div style="position: relative;"><textarea type="text" class="ant-input comment-textarea" placeholder="请使用 markdown 语法编辑，读者可开启预览功能"></textarea><span class="togglePreview"> 开启预览</span><span class="cancel">取消</span><button type="button" class="ant-btn submit"><span>提 交</span></button></div></div></div></div></div></div></div><div class="comment-item"><div style="display: none;"><div class="animationload"><div class="osahanloading"></div></div></div><div class="media"><div class="media-left"><img src="./Spring IOC 容器源码分析_files/10.png" class="media-object img-circle"><i class="vertical-line"></i></div><div class="media-body" id="comment_head_60"><h5 class="media-heading">LiuQiHang <span style="font-weight: normal;"> 2017-12-21 05:17:08 </span></h5><div class="comment-content-wrapper"><div class="" id="comment_body_60" style="margin: 8px 0px;"><p>看完了一遍对IOC大致有点了解了，看第二编开始注重具体类具体方法，真心累，但是对Spring的了解越来越充实了。感谢作者，估计得消化一阵子了我</p>
</div><div class=""></div></div><span class="operation">回复</span><div class="c" id="comment_textarea_60" style="display: none;"><div class="anonymous"><input type="text" placeholder="[ 游客 ] 昵称" value=""><input type="text" placeholder="[ 游客 ] email" value=""><a href="javascript:;">--&gt; 使用 GitHub 登录</a></div><div class="preview" id="d334833" style="display: none;"><div class="bg"><span class="txt"> 评论预览 </span></div><div class="marked"></div></div><div class="ant-spin-nested-loading"><div class="ant-spin-container"><div style="position: relative;"><textarea type="text" class="ant-input comment-textarea" placeholder="请使用 markdown 语法编辑，读者可开启预览功能"></textarea><span class="togglePreview"> 开启预览</span><span class="cancel">取消</span><button type="button" class="ant-btn submit"><span>提 交</span></button></div></div></div></div></div></div></div><div class="comment-item"><div style="display: none;"><div class="animationload"><div class="osahanloading"></div></div></div><div class="media"><div class="media-left" style="cursor: pointer;"><img src="./Spring IOC 容器源码分析_files/10.png" class="media-object img-circle"><i class="vertical-line"></i></div><div class="media-body" id="comment_head_64"><h5 class="media-heading">angiie <span style="font-weight: normal;"> 2017-12-22 05:23:55 </span></h5><div class="comment-content-wrapper"><div class="" id="comment_body_64" style="margin: 8px 0px;"><p>感谢博主，看了你站里大半的文章，写的都非常用心，需要再研磨研磨，得吸收一下。</p>
</div><div class=""></div></div><span class="operation">回复</span><div class="comment-item" style="display: block;"><div style="display: none;"><div class="animationload"><div class="osahanloading"></div></div></div><div class="media"><div class="media-left" style="cursor: pointer;"><img src="./Spring IOC 容器源码分析_files/0.png" class="media-object img-circle"><i class="vertical-line"></i></div><div class="media-body" id="comment_head_65"><h5 class="media-heading">HongJie <span style="font-weight: normal;"> 2017-12-22 05:34:04 </span></h5><div class="comment-content-wrapper"><div class="" id="comment_body_65" style="margin: 8px 0px;"><p>谢谢你的肯定，如果我的文字能给像你这样的读者带来些什么的话，我觉得这件事情就是值得好好去做的。</p>
<p>另外，非常希望大家可以指出各篇文章中写得不好的地方，我会不断进行更新，希望能帮到更多的读者。</p>
</div><div class=""></div></div><span class="operation">回复</span><div class="comment-item" style="display: block;"><div style="display: none;"><div class="animationload"><div class="osahanloading"></div></div></div><div class="media"><div class="media-left" style="cursor: pointer;"><img src="./Spring IOC 容器源码分析_files/10.png" class="media-object img-circle"><i class="vertical-line"></i></div><div class="media-body" id="comment_head_66"><h5 class="media-heading">angiie <span style="font-weight: normal;"> 2017-12-22 05:37:08 </span></h5><div class="comment-content-wrapper"><div class="" id="comment_body_66" style="margin: 8px 0px;"><p>其实博主可以贴上支付宝或者是微信的账号，从经济学角度说，好的东西就是需要发扬。看了这么多文章，请你喝杯咖啡不是什么过分的请求吧？</p>
</div><div class=""></div></div><span class="operation">回复</span><div class="comment-item" style="display: block;"><div style="display: none;"><div class="animationload"><div class="osahanloading"></div></div></div><div class="media"><div class="media-left"><img src="./Spring IOC 容器源码分析_files/0.png" class="media-object img-circle"><i class="vertical-line"></i></div><div class="media-body" id="comment_head_67"><h5 class="media-heading">HongJie <span style="font-weight: normal;"> 2017-12-22 05:47:27 </span></h5><div class="comment-content-wrapper"><div class="" id="comment_body_67" style="margin: 8px 0px;"><p>程序员中还有很多人没有知识付费的意识，从心理层面来说，这样做可能会降低这部分人对我文章的好感。</p>
</div><div class=""></div></div><span class="operation">回复</span><div class="c" id="comment_textarea_67" style="display: none;"><div class="anonymous"><input type="text" placeholder="[ 游客 ] 昵称" value=""><input type="text" placeholder="[ 游客 ] email" value=""><a href="javascript:;">--&gt; 使用 GitHub 登录</a></div><div class="preview" id="a6cad073" style="display: none;"><div class="bg"><span class="txt"> 评论预览 </span></div><div class="marked"></div></div><div class="ant-spin-nested-loading"><div class="ant-spin-container"><div style="position: relative;"><textarea type="text" class="ant-input comment-textarea" placeholder="请使用 markdown 语法编辑，读者可开启预览功能"></textarea><span class="togglePreview"> 开启预览</span><span class="cancel">取消</span><button type="button" class="ant-btn submit"><span>提 交</span></button></div></div></div></div></div></div></div><div class="c" id="comment_textarea_66" style="display: none;"><div class="anonymous"><input type="text" placeholder="[ 游客 ] 昵称" value=""><input type="text" placeholder="[ 游客 ] email" value=""><a href="javascript:;">--&gt; 使用 GitHub 登录</a></div><div class="preview" id="471bb97b5" style="display: none;"><div class="bg"><span class="txt"> 评论预览 </span></div><div class="marked"></div></div><div class="ant-spin-nested-loading"><div class="ant-spin-container"><div style="position: relative;"><textarea type="text" class="ant-input comment-textarea" placeholder="请使用 markdown 语法编辑，读者可开启预览功能"></textarea><span class="togglePreview"> 开启预览</span><span class="cancel">取消</span><button type="button" class="ant-btn submit"><span>提 交</span></button></div></div></div></div></div></div></div><div class="c" id="comment_textarea_65" style="display: none;"><div class="anonymous"><input type="text" placeholder="[ 游客 ] 昵称" value=""><input type="text" placeholder="[ 游客 ] email" value=""><a href="javascript:;">--&gt; 使用 GitHub 登录</a></div><div class="preview" id="05381068a" style="display: none;"><div class="bg"><span class="txt"> 评论预览 </span></div><div class="marked"></div></div><div class="ant-spin-nested-loading"><div class="ant-spin-container"><div style="position: relative;"><textarea type="text" class="ant-input comment-textarea" placeholder="请使用 markdown 语法编辑，读者可开启预览功能"></textarea><span class="togglePreview"> 开启预览</span><span class="cancel">取消</span><button type="button" class="ant-btn submit"><span>提 交</span></button></div></div></div></div></div></div></div><div class="c" id="comment_textarea_64" style="display: none;"><div class="anonymous"><input type="text" placeholder="[ 游客 ] 昵称" value=""><input type="text" placeholder="[ 游客 ] email" value=""><a href="javascript:;">--&gt; 使用 GitHub 登录</a></div><div class="preview" id="565a8b97" style="display: none;"><div class="bg"><span class="txt"> 评论预览 </span></div><div class="marked"></div></div><div class="ant-spin-nested-loading"><div class="ant-spin-container"><div style="position: relative;"><textarea type="text" class="ant-input comment-textarea" placeholder="请使用 markdown 语法编辑，读者可开启预览功能"></textarea><span class="togglePreview"> 开启预览</span><span class="cancel">取消</span><button type="button" class="ant-btn submit"><span>提 交</span></button></div></div></div></div></div></div></div><div class="comment-item"><div style="display: none;"><div class="animationload"><div class="osahanloading"></div></div></div><div class="media"><div class="media-left" style="cursor: pointer;"><img src="./Spring IOC 容器源码分析_files/20.png" class="media-object img-circle"><i class="vertical-line"></i></div><div class="media-body" id="comment_head_74"><h5 class="media-heading">Yao <span style="font-weight: normal;"> 2018-01-05 11:56:46 </span></h5><div class="comment-content-wrapper"><div class="" id="comment_body_74" style="margin: 8px 0px;"><p>博主能否加个导航栏呢，文章太长体验不好呢</p>
</div><div class=""></div></div><span class="operation">回复</span><div class="comment-item" style="display: block;"><div style="display: none;"><div class="animationload"><div class="osahanloading"></div></div></div><div class="media"><div class="media-left"><img src="./Spring IOC 容器源码分析_files/0.png" class="media-object img-circle"><i class="vertical-line"></i></div><div class="media-body" id="comment_head_75"><h5 class="media-heading">HongJie <span style="font-weight: normal;"> 2018-01-05 12:01:07 </span></h5><div class="comment-content-wrapper"><div class="" id="comment_body_75" style="margin: 8px 0px;"><p>嗯嗯，后面有时间的话搞一个侧边导航栏?</p>
</div><div class=""></div></div><span class="operation">回复</span><div class="c" id="comment_textarea_75" style="display: none;"><div class="anonymous"><input type="text" placeholder="[ 游客 ] 昵称" value=""><input type="text" placeholder="[ 游客 ] email" value=""><a href="javascript:;">--&gt; 使用 GitHub 登录</a></div><div class="preview" id="43e596b99" style="display: none;"><div class="bg"><span class="txt"> 评论预览 </span></div><div class="marked"></div></div><div class="ant-spin-nested-loading"><div class="ant-spin-container"><div style="position: relative;"><textarea type="text" class="ant-input comment-textarea" placeholder="请使用 markdown 语法编辑，读者可开启预览功能"></textarea><span class="togglePreview"> 开启预览</span><span class="cancel">取消</span><button type="button" class="ant-btn submit"><span>提 交</span></button></div></div></div></div></div></div></div><div class="c" id="comment_textarea_74" style="display: none;"><div class="anonymous"><input type="text" placeholder="[ 游客 ] 昵称" value=""><input type="text" placeholder="[ 游客 ] email" value=""><a href="javascript:;">--&gt; 使用 GitHub 登录</a></div><div class="preview" id="4d486758" style="display: none;"><div class="bg"><span class="txt"> 评论预览 </span></div><div class="marked"></div></div><div class="ant-spin-nested-loading"><div class="ant-spin-container"><div style="position: relative;"><textarea type="text" class="ant-input comment-textarea" placeholder="请使用 markdown 语法编辑，读者可开启预览功能"></textarea><span class="togglePreview"> 开启预览</span><span class="cancel">取消</span><button type="button" class="ant-btn submit"><span>提 交</span></button></div></div></div></div></div></div></div><div class="comment-item"><div style="display: none;"><div class="animationload"><div class="osahanloading"></div></div></div><div class="media"><div class="media-left"><img src="./Spring IOC 容器源码分析_files/11.png" class="media-object img-circle"><i class="vertical-line"></i></div><div class="media-body" id="comment_head_94"><h5 class="media-heading">JerryMk <span style="font-weight: normal;"> 2018-01-15 12:11:45 </span></h5><div class="comment-content-wrapper"><div class="" id="comment_body_94" style="margin: 8px 0px;"><p>赞，受益匪浅~</p>
</div><div class=""></div></div><span class="operation">回复</span><div class="c" id="comment_textarea_94" style="display: none;"><div class="anonymous"><input type="text" placeholder="[ 游客 ] 昵称" value=""><input type="text" placeholder="[ 游客 ] email" value=""><a href="javascript:;">--&gt; 使用 GitHub 登录</a></div><div class="preview" id="a74aae" style="display: none;"><div class="bg"><span class="txt"> 评论预览 </span></div><div class="marked"></div></div><div class="ant-spin-nested-loading"><div class="ant-spin-container"><div style="position: relative;"><textarea type="text" class="ant-input comment-textarea" placeholder="请使用 markdown 语法编辑，读者可开启预览功能"></textarea><span class="togglePreview"> 开启预览</span><span class="cancel">取消</span><button type="button" class="ant-btn submit"><span>提 交</span></button></div></div></div></div></div></div></div><div class="comment-item"><div style="display: none;"><div class="animationload"><div class="osahanloading"></div></div></div><div class="media"><div class="media-left" style="cursor: pointer;"><img src="./Spring IOC 容器源码分析_files/6.png" class="media-object img-circle"><i class="vertical-line"></i></div><div class="media-body" id="comment_head_100"><h5 class="media-heading">MM <span style="font-weight: normal;"> 2018-01-18 07:20:44 </span></h5><div class="comment-content-wrapper"><div class="" id="comment_body_100" style="margin: 8px 0px;"><p>神手啊！！！目前消化中。。。再多一點spring的源碼～～～（（興奮！！</p>
</div><div class=""></div></div><span class="operation">回复</span><div class="comment-item" style="display: block;"><div style="display: none;"><div class="animationload"><div class="osahanloading"></div></div></div><div class="media"><div class="media-left" style="cursor: pointer;"><img src="./Spring IOC 容器源码分析_files/0.png" class="media-object img-circle"><i class="vertical-line"></i></div><div class="media-body" id="comment_head_101"><h5 class="media-heading">HongJie <span style="font-weight: normal;"> 2018-01-18 07:26:34 </span></h5><div class="comment-content-wrapper"><div class="" id="comment_body_101" style="margin: 8px 0px;"><p>你是要我这篇文章多贴点代码吗 ???</p>
</div><div class=""></div></div><span class="operation">回复</span><div class="comment-item" style="display: block;"><div style="display: none;"><div class="animationload"><div class="osahanloading"></div></div></div><div class="media"><div class="media-left"><img src="./Spring IOC 容器源码分析_files/6.png" class="media-object img-circle"><i class="vertical-line"></i></div><div class="media-body" id="comment_head_102"><h5 class="media-heading">MM <span style="font-weight: normal;"> 2018-01-18 09:09:51 </span></h5><div class="comment-content-wrapper"><div class="" id="comment_body_102" style="margin: 8px 0px;"><p>哈哈哈 好希望能多介紹spring的其他模組～～～（（跪求orz</p>
</div><div class=""></div></div><span class="operation">回复</span><div class="c" id="comment_textarea_102" style="display: none;"><div class="anonymous"><input type="text" placeholder="[ 游客 ] 昵称" value=""><input type="text" placeholder="[ 游客 ] email" value=""><a href="javascript:;">--&gt; 使用 GitHub 登录</a></div><div class="preview" id="9d9a80a4" style="display: none;"><div class="bg"><span class="txt"> 评论预览 </span></div><div class="marked"></div></div><div class="ant-spin-nested-loading"><div class="ant-spin-container"><div style="position: relative;"><textarea type="text" class="ant-input comment-textarea" placeholder="请使用 markdown 语法编辑，读者可开启预览功能"></textarea><span class="togglePreview"> 开启预览</span><span class="cancel">取消</span><button type="button" class="ant-btn submit"><span>提 交</span></button></div></div></div></div></div></div></div><div class="c" id="comment_textarea_101" style="display: none;"><div class="anonymous"><input type="text" placeholder="[ 游客 ] 昵称" value=""><input type="text" placeholder="[ 游客 ] email" value=""><a href="javascript:;">--&gt; 使用 GitHub 登录</a></div><div class="preview" id="8558c95a" style="display: none;"><div class="bg"><span class="txt"> 评论预览 </span></div><div class="marked"></div></div><div class="ant-spin-nested-loading"><div class="ant-spin-container"><div style="position: relative;"><textarea type="text" class="ant-input comment-textarea" placeholder="请使用 markdown 语法编辑，读者可开启预览功能"></textarea><span class="togglePreview"> 开启预览</span><span class="cancel">取消</span><button type="button" class="ant-btn submit"><span>提 交</span></button></div></div></div></div></div></div></div><div class="c" id="comment_textarea_100" style="display: none;"><div class="anonymous"><input type="text" placeholder="[ 游客 ] 昵称" value=""><input type="text" placeholder="[ 游客 ] email" value=""><a href="javascript:;">--&gt; 使用 GitHub 登录</a></div><div class="preview" id="103676e94" style="display: none;"><div class="bg"><span class="txt"> 评论预览 </span></div><div class="marked"></div></div><div class="ant-spin-nested-loading"><div class="ant-spin-container"><div style="position: relative;"><textarea type="text" class="ant-input comment-textarea" placeholder="请使用 markdown 语法编辑，读者可开启预览功能"></textarea><span class="togglePreview"> 开启预览</span><span class="cancel">取消</span><button type="button" class="ant-btn submit"><span>提 交</span></button></div></div></div></div></div></div></div><div class="comment-item"><div style="display: none;"><div class="animationload"><div class="osahanloading"></div></div></div><div class="media"><div class="media-left" style="cursor: pointer;"><img src="./Spring IOC 容器源码分析_files/10.png" class="media-object img-circle"><i class="vertical-line"></i></div><div class="media-body" id="comment_head_198"><h5 class="media-heading">yhh <span style="font-weight: normal;"> 2018-02-28 11:59:48 </span></h5><div class="comment-content-wrapper"><div class="" id="comment_body_198" style="margin: 8px 0px;"><p>赞，受益匪浅~</p>
</div><div class=""></div></div><span class="operation">回复</span><div class="comment-item" style="display: block;"><div style="display: none;"><div class="animationload"><div class="osahanloading"></div></div></div><div class="media"><div class="media-left"><img src="./Spring IOC 容器源码分析_files/0.png" class="media-object img-circle"><i class="vertical-line"></i></div><div class="media-body" id="comment_head_200"><h5 class="media-heading">HongJie <span style="font-weight: normal;"> 2018-02-28 12:03:13 </span></h5><div class="comment-content-wrapper"><div class="" id="comment_body_200" style="margin: 8px 0px;"><p>也不知道自己当初怎么就写了这么一篇这么长的文章，现在看看都吓死人<del>~</del></p>
</div><div class=""></div></div><span class="operation">回复</span><div class="c" id="comment_textarea_200" style="display: none;"><div class="anonymous"><input type="text" placeholder="[ 游客 ] 昵称" value=""><input type="text" placeholder="[ 游客 ] email" value=""><a href="javascript:;">--&gt; 使用 GitHub 登录</a></div><div class="preview" id="75dd2ec" style="display: none;"><div class="bg"><span class="txt"> 评论预览 </span></div><div class="marked"></div></div><div class="ant-spin-nested-loading"><div class="ant-spin-container"><div style="position: relative;"><textarea type="text" class="ant-input comment-textarea" placeholder="请使用 markdown 语法编辑，读者可开启预览功能"></textarea><span class="togglePreview"> 开启预览</span><span class="cancel">取消</span><button type="button" class="ant-btn submit"><span>提 交</span></button></div></div></div></div></div></div></div><div class="c" id="comment_textarea_198" style="display: none;"><div class="anonymous"><input type="text" placeholder="[ 游客 ] 昵称" value=""><input type="text" placeholder="[ 游客 ] email" value=""><a href="javascript:;">--&gt; 使用 GitHub 登录</a></div><div class="preview" id="a556d0ac" style="display: none;"><div class="bg"><span class="txt"> 评论预览 </span></div><div class="marked"></div></div><div class="ant-spin-nested-loading"><div class="ant-spin-container"><div style="position: relative;"><textarea type="text" class="ant-input comment-textarea" placeholder="请使用 markdown 语法编辑，读者可开启预览功能"></textarea><span class="togglePreview"> 开启预览</span><span class="cancel">取消</span><button type="button" class="ant-btn submit"><span>提 交</span></button></div></div></div></div></div></div></div><div class="comment-item"><div style="display: none;"><div class="animationload"><div class="osahanloading"></div></div></div><div class="media"><div class="media-left"><img src="./Spring IOC 容器源码分析_files/6.png" class="media-object img-circle"><i class="vertical-line"></i></div><div class="media-body" id="comment_head_213"><h5 class="media-heading">七夜 <span style="font-weight: normal;"> 2018-03-05 10:28:15 </span></h5><div class="comment-content-wrapper"><div class="" id="comment_body_213" style="margin: 8px 0px;"><p>文章读了两三遍，收益非浅，谢谢
啥时候分享一下spring aop的源码解析呢？</p>
</div><div class=""></div></div><span class="operation">回复</span><div class="c" id="comment_textarea_213" style="display: none;"><div class="anonymous"><input type="text" placeholder="[ 游客 ] 昵称" value=""><input type="text" placeholder="[ 游客 ] email" value=""><a href="javascript:;">--&gt; 使用 GitHub 登录</a></div><div class="preview" id="a0177717" style="display: none;"><div class="bg"><span class="txt"> 评论预览 </span></div><div class="marked"></div></div><div class="ant-spin-nested-loading"><div class="ant-spin-container"><div style="position: relative;"><textarea type="text" class="ant-input comment-textarea" placeholder="请使用 markdown 语法编辑，读者可开启预览功能"></textarea><span class="togglePreview"> 开启预览</span><span class="cancel">取消</span><button type="button" class="ant-btn submit"><span>提 交</span></button></div></div></div></div></div></div></div><div class="comment-item"><div style="display: none;"><div class="animationload"><div class="osahanloading"></div></div></div><div class="media"><div class="media-left"><img src="./Spring IOC 容器源码分析_files/0.png" class="media-object img-circle"><i class="vertical-line"></i></div><div class="media-body" id="comment_head_235"><h5 class="media-heading">HongJie <span style="font-weight: normal;"> 2018-03-12 10:19:06 </span></h5><div class="comment-content-wrapper"><div class="" id="comment_body_235" style="margin: 8px 0px;"><p>非常抱歉，刚刚在做数据迁移，有一个读者的评论“消失”了~</p>
</div><div class=""></div></div><span class="operation">回复</span><div class="c" id="comment_textarea_235" style="display: none;"><div class="anonymous"><input type="text" placeholder="[ 游客 ] 昵称" value=""><input type="text" placeholder="[ 游客 ] email" value=""><a href="javascript:;">--&gt; 使用 GitHub 登录</a></div><div class="preview" id="6d8d0794" style="display: none;"><div class="bg"><span class="txt"> 评论预览 </span></div><div class="marked"></div></div><div class="ant-spin-nested-loading"><div class="ant-spin-container"><div style="position: relative;"><textarea type="text" class="ant-input comment-textarea" placeholder="请使用 markdown 语法编辑，读者可开启预览功能"></textarea><span class="togglePreview"> 开启预览</span><span class="cancel">取消</span><button type="button" class="ant-btn submit"><span>提 交</span></button></div></div></div></div></div></div></div><div class="comment-item"><div style="display: none;"><div class="animationload"><div class="osahanloading"></div></div></div><div class="media"><div class="media-left" style="cursor: pointer;"><img src="./Spring IOC 容器源码分析_files/10.png" class="media-object img-circle"><i class="vertical-line"></i></div><div class="media-body" id="comment_head_238"><h5 class="media-heading">M2 <span style="font-weight: normal;"> 2018-03-13 11:34:33 </span></h5><div class="comment-content-wrapper"><div class="" id="comment_body_238" style="margin: 8px 0px;"><p>已看了3遍了 每次感覺都不一樣
希望有annotation的源碼分析
版主果然是強者</p>
</div><div class=""></div></div><span class="operation">回复</span><div class="comment-item" style="display: block;"><div style="display: none;"><div class="animationload"><div class="osahanloading"></div></div></div><div class="media"><div class="media-left"><img src="./Spring IOC 容器源码分析_files/0.png" class="media-object img-circle"><i class="vertical-line"></i></div><div class="media-body" id="comment_head_239"><h5 class="media-heading">HongJie <span style="font-weight: normal;"> 2018-03-13 11:45:11 </span></h5><div class="comment-content-wrapper"><div class="" id="comment_body_239" style="margin: 8px 0px;"><p>你这要求太多了，得寸进尺啊，写文章很辛苦的???</p>
<p>以后吧，有机会再写一些 Spring 相关的，近期比较忙?</p>
</div><div class=""></div></div><span class="operation">回复</span><div class="c" id="comment_textarea_239" style="display: none;"><div class="anonymous"><input type="text" placeholder="[ 游客 ] 昵称" value=""><input type="text" placeholder="[ 游客 ] email" value=""><a href="javascript:;">--&gt; 使用 GitHub 登录</a></div><div class="preview" id="81725a27" style="display: none;"><div class="bg"><span class="txt"> 评论预览 </span></div><div class="marked"></div></div><div class="ant-spin-nested-loading"><div class="ant-spin-container"><div style="position: relative;"><textarea type="text" class="ant-input comment-textarea" placeholder="请使用 markdown 语法编辑，读者可开启预览功能"></textarea><span class="togglePreview"> 开启预览</span><span class="cancel">取消</span><button type="button" class="ant-btn submit"><span>提 交</span></button></div></div></div></div></div></div></div><div class="c" id="comment_textarea_238" style="display: none;"><div class="anonymous"><input type="text" placeholder="[ 游客 ] 昵称" value=""><input type="text" placeholder="[ 游客 ] email" value=""><a href="javascript:;">--&gt; 使用 GitHub 登录</a></div><div class="preview" id="8a8b8a5c" style="display: none;"><div class="bg"><span class="txt"> 评论预览 </span></div><div class="marked"></div></div><div class="ant-spin-nested-loading"><div class="ant-spin-container"><div style="position: relative;"><textarea type="text" class="ant-input comment-textarea" placeholder="请使用 markdown 语法编辑，读者可开启预览功能"></textarea><span class="togglePreview"> 开启预览</span><span class="cancel">取消</span><button type="button" class="ant-btn submit"><span>提 交</span></button></div></div></div></div></div></div></div><div class="comment-item"><div style="display: none;"><div class="animationload"><div class="osahanloading"></div></div></div><div class="media"><div class="media-left"><img src="./Spring IOC 容器源码分析_files/10.png" class="media-object img-circle"><i class="vertical-line"></i></div><div class="media-body" id="comment_head_240"><h5 class="media-heading">M2 <span style="font-weight: normal;"> 2018-03-13 11:49:50 </span></h5><div class="comment-content-wrapper"><div class="" id="comment_body_240" style="margin: 8px 0px;"><p>哈哈哈  我倒是每兩三天就會來刷你的博客 看有沒更新???</p>
</div><div class=""></div></div><span class="operation">回复</span><div class="c" id="comment_textarea_240" style="display: none;"><div class="anonymous"><input type="text" placeholder="[ 游客 ] 昵称" value=""><input type="text" placeholder="[ 游客 ] email" value=""><a href="javascript:;">--&gt; 使用 GitHub 登录</a></div><div class="preview" id="529205ec" style="display: none;"><div class="bg"><span class="txt"> 评论预览 </span></div><div class="marked"></div></div><div class="ant-spin-nested-loading"><div class="ant-spin-container"><div style="position: relative;"><textarea type="text" class="ant-input comment-textarea" placeholder="请使用 markdown 语法编辑，读者可开启预览功能"></textarea><span class="togglePreview"> 开启预览</span><span class="cancel">取消</span><button type="button" class="ant-btn submit"><span>提 交</span></button></div></div></div></div></div></div></div><div class="comment-item"><div style="display: none;"><div class="animationload"><div class="osahanloading"></div></div></div><div class="media"><div class="media-left"><img src="./Spring IOC 容器源码分析_files/7.png" class="media-object img-circle"><i class="vertical-line"></i></div><div class="media-body" id="comment_head_268"><h5 class="media-heading">javasos <span style="font-weight: normal;"> 2018-03-16 03:43:43 </span></h5><div class="comment-content-wrapper"><div class="collapse" id="comment_body_268" style="margin: 8px 0px;"><p>protected void loadBeanDefinitions(XmlBeanDefinitionReader reader) throws BeansException, IOException {
    Resource[] configResources = getConfigResources();
    if (configResources != null) {
        reader.loadBeanDefinitions(configResources);
    }
    String[] configLocations = getConfigLocations();
    if (configLocations != null) {
        reader.loadBeanDefinitions(configLocations);
    }
}
```
// 上面虽然有两个分支，不过第二个分支很快通过解析路径转换为 Resource 以后也会进到这里
@Override
public int loadBeanDefinitions(Resource... resources)
这里跳的不对啊啊  public int loadBeanDefinitions(Resource... resources) 这个方法在哪个类下呢</p>
</div><div class="shade"></div></div><span class="operation">回复</span><div class="c" id="comment_textarea_268" style="display: none;"><div class="anonymous"><input type="text" placeholder="[ 游客 ] 昵称" value=""><input type="text" placeholder="[ 游客 ] email" value=""><a href="javascript:;">--&gt; 使用 GitHub 登录</a></div><div class="preview" id="321a140c" style="display: none;"><div class="bg"><span class="txt"> 评论预览 </span></div><div class="marked"></div></div><div class="ant-spin-nested-loading"><div class="ant-spin-container"><div style="position: relative;"><textarea type="text" class="ant-input comment-textarea" placeholder="请使用 markdown 语法编辑，读者可开启预览功能"></textarea><span class="togglePreview"> 开启预览</span><span class="cancel">取消</span><button type="button" class="ant-btn submit"><span>提 交</span></button></div></div></div></div></div></div></div><div class="comment-item"><div style="display: none;"><div class="animationload"><div class="osahanloading"></div></div></div><div class="media"><div class="media-left" style="cursor: pointer;"><img src="./Spring IOC 容器源码分析_files/7.png" class="media-object img-circle"><i class="vertical-line"></i></div><div class="media-body" id="comment_head_271"><h5 class="media-heading">javasos <span style="font-weight: normal;"> 2018-03-16 03:47:28 </span></h5><div class="comment-content-wrapper"><div class="" id="comment_body_271" style="margin: 8px 0px;"><p>是我看错了 找到了，不好意思。?</p>
</div><div class=""></div></div><span class="operation">回复</span><div class="comment-item" style="display: block;"><div style="display: none;"><div class="animationload"><div class="osahanloading"></div></div></div><div class="media"><div class="media-left"><img src="./Spring IOC 容器源码分析_files/0.png" class="media-object img-circle"><i class="vertical-line"></i></div><div class="media-body" id="comment_head_272"><h5 class="media-heading">HongJie <span style="font-weight: normal;"> 2018-03-16 03:48:53 </span></h5><div class="comment-content-wrapper"><div class="" id="comment_body_272" style="margin: 8px 0px;"><p>好好看，后面篇幅还大着呢<del>~</del></p>
</div><div class=""></div></div><span class="operation">回复</span><div class="c" id="comment_textarea_272" style="display: none;"><div class="anonymous"><input type="text" placeholder="[ 游客 ] 昵称" value=""><input type="text" placeholder="[ 游客 ] email" value=""><a href="javascript:;">--&gt; 使用 GitHub 登录</a></div><div class="preview" id="9625ebd4" style="display: none;"><div class="bg"><span class="txt"> 评论预览 </span></div><div class="marked"></div></div><div class="ant-spin-nested-loading"><div class="ant-spin-container"><div style="position: relative;"><textarea type="text" class="ant-input comment-textarea" placeholder="请使用 markdown 语法编辑，读者可开启预览功能"></textarea><span class="togglePreview"> 开启预览</span><span class="cancel">取消</span><button type="button" class="ant-btn submit"><span>提 交</span></button></div></div></div></div></div></div></div><div class="c" id="comment_textarea_271" style="display: none;"><div class="anonymous"><input type="text" placeholder="[ 游客 ] 昵称" value=""><input type="text" placeholder="[ 游客 ] email" value=""><a href="javascript:;">--&gt; 使用 GitHub 登录</a></div><div class="preview" id="4ad1e11c" style="display: none;"><div class="bg"><span class="txt"> 评论预览 </span></div><div class="marked"></div></div><div class="ant-spin-nested-loading"><div class="ant-spin-container"><div style="position: relative;"><textarea type="text" class="ant-input comment-textarea" placeholder="请使用 markdown 语法编辑，读者可开启预览功能"></textarea><span class="togglePreview"> 开启预览</span><span class="cancel">取消</span><button type="button" class="ant-btn submit"><span>提 交</span></button></div></div></div></div></div></div></div><div class="comment-item"><div style="display: none;"><div class="animationload"><div class="osahanloading"></div></div></div><div class="media"><div class="media-left" style="cursor: pointer;"><img src="./Spring IOC 容器源码分析_files/6.png" class="media-object img-circle"><i class="vertical-line"></i></div><div class="media-body" id="comment_head_355"><h5 class="media-heading">swqwer <span style="font-weight: normal;"> 2018-03-31 00:22:53 </span></h5><div class="comment-content-wrapper"><div class="" id="comment_body_355" style="margin: 8px 0px;"><p>确实蛮长，看完的感觉spring 将beanFactory初始化的生成分成两个大的部分，解耦吧感觉。一个是 xml映射load成BeanDefinitions然后register到beanFactory，然后就是大头bean的初始化。有的bean是启动时候可以初始化。有的bean是懒初始化 getBean的时候初始化</p>
</div><div class=""></div></div><span class="operation">回复</span><div class="comment-item" style="display: block;"><div style="display: none;"><div class="animationload"><div class="osahanloading"></div></div></div><div class="media"><div class="media-left" style="cursor: pointer;"><img src="./Spring IOC 容器源码分析_files/0.png" class="media-object img-circle"><i class="vertical-line"></i></div><div class="media-body" id="comment_head_356"><h5 class="media-heading">HongJie <span style="font-weight: normal;"> 2018-03-31 00:27:22 </span></h5><div class="comment-content-wrapper"><div class="" id="comment_body_356" style="margin: 8px 0px;"><p>嗯嗯，少年你抓住了精华<del>~</del> 写这么长是为了让初学者能自己一层一层揭开 Spring IOC 的面纱，慢慢了解到核心</p>
</div><div class=""></div></div><span class="operation">回复</span><div class="comment-item" style="display: block;"><div style="display: none;"><div class="animationload"><div class="osahanloading"></div></div></div><div class="media"><div class="media-left"><img src="./Spring IOC 容器源码分析_files/6.png" class="media-object img-circle"><i class="vertical-line"></i></div><div class="media-body" id="comment_head_357"><h5 class="media-heading">swqwer <span style="font-weight: normal;"> 2018-03-31 00:51:52 </span></h5><div class="comment-content-wrapper"><div class="" id="comment_body_357" style="margin: 8px 0px;"><p>继续讲解 aop的，  aop相关概念，aop代理对象，aop拦截器 ，深入浅出，称热打铁</p>
</div><div class=""></div></div><span class="operation">回复</span><div class="c" id="comment_textarea_357" style="display: none;"><div class="anonymous"><input type="text" placeholder="[ 游客 ] 昵称" value=""><input type="text" placeholder="[ 游客 ] email" value=""><a href="javascript:;">--&gt; 使用 GitHub 登录</a></div><div class="preview" id="334c7982" style="display: none;"><div class="bg"><span class="txt"> 评论预览 </span></div><div class="marked"></div></div><div class="ant-spin-nested-loading"><div class="ant-spin-container"><div style="position: relative;"><textarea type="text" class="ant-input comment-textarea" placeholder="请使用 markdown 语法编辑，读者可开启预览功能"></textarea><span class="togglePreview"> 开启预览</span><span class="cancel">取消</span><button type="button" class="ant-btn submit"><span>提 交</span></button></div></div></div></div></div></div></div><div class="c" id="comment_textarea_356" style="display: none;"><div class="anonymous"><input type="text" placeholder="[ 游客 ] 昵称" value=""><input type="text" placeholder="[ 游客 ] email" value=""><a href="javascript:;">--&gt; 使用 GitHub 登录</a></div><div class="preview" id="d71a36a9" style="display: none;"><div class="bg"><span class="txt"> 评论预览 </span></div><div class="marked"></div></div><div class="ant-spin-nested-loading"><div class="ant-spin-container"><div style="position: relative;"><textarea type="text" class="ant-input comment-textarea" placeholder="请使用 markdown 语法编辑，读者可开启预览功能"></textarea><span class="togglePreview"> 开启预览</span><span class="cancel">取消</span><button type="button" class="ant-btn submit"><span>提 交</span></button></div></div></div></div></div></div></div><div class="c" id="comment_textarea_355" style="display: none;"><div class="anonymous"><input type="text" placeholder="[ 游客 ] 昵称" value=""><input type="text" placeholder="[ 游客 ] email" value=""><a href="javascript:;">--&gt; 使用 GitHub 登录</a></div><div class="preview" id="7e3c263a" style="display: none;"><div class="bg"><span class="txt"> 评论预览 </span></div><div class="marked"></div></div><div class="ant-spin-nested-loading"><div class="ant-spin-container"><div style="position: relative;"><textarea type="text" class="ant-input comment-textarea" placeholder="请使用 markdown 语法编辑，读者可开启预览功能"></textarea><span class="togglePreview"> 开启预览</span><span class="cancel">取消</span><button type="button" class="ant-btn submit"><span>提 交</span></button></div></div></div></div></div></div></div><div class="comment-item"><div style="display: none;"><div class="animationload"><div class="osahanloading"></div></div></div><div class="media"><div class="media-left"><img src="./Spring IOC 容器源码分析_files/1(1).png" class="media-object img-circle"><i class="vertical-line"></i></div><div class="media-body" id="comment_head_375"><h5 class="media-heading">mnjcqwi <span style="font-weight: normal;"> 2018-04-05 16:18:27 </span></h5><div class="comment-content-wrapper"><div class="" id="comment_body_375" style="margin: 8px 0px;"><p>有一个问题，在ioc容器实例化bean的时候，是单线程的呢？还是多线程的？看到源码里面有一些synchronized，但是并没有看到有线程的启动，那么是说tomcat这种web容器可以配置启动多线程来初始化IOC容器？ 还是这些同步是为了实例化后，可以有多线程来获取这些实例化bean时候保证顺序和正确性呢？比如getSingleton方法里面就有同步</p>
</div><div class=""></div></div><span class="operation">回复</span><div class="c" id="comment_textarea_375" style="display: none;"><div class="anonymous"><input type="text" placeholder="[ 游客 ] 昵称" value=""><input type="text" placeholder="[ 游客 ] email" value=""><a href="javascript:;">--&gt; 使用 GitHub 登录</a></div><div class="preview" id="2056bd08" style="display: none;"><div class="bg"><span class="txt"> 评论预览 </span></div><div class="marked"></div></div><div class="ant-spin-nested-loading"><div class="ant-spin-container"><div style="position: relative;"><textarea type="text" class="ant-input comment-textarea" placeholder="请使用 markdown 语法编辑，读者可开启预览功能"></textarea><span class="togglePreview"> 开启预览</span><span class="cancel">取消</span><button type="button" class="ant-btn submit"><span>提 交</span></button></div></div></div></div></div></div></div><div class="comment-item"><div style="display: none;"><div class="animationload"><div class="osahanloading"></div></div></div><div class="media"><div class="media-left"><img src="./Spring IOC 容器源码分析_files/10.png" class="media-object img-circle"><i class="vertical-line"></i></div><div class="media-body" id="comment_head_468"><h5 class="media-heading">lion <span style="font-weight: normal;"> 2018-05-13 03:44:41 </span></h5><div class="comment-content-wrapper"><div class="" id="comment_body_468" style="margin: 8px 0px;"><p>博主真的牛，我看到xml解析就头皮发麻了，先消化消化，过段时间再看，受教受教</p>
</div><div class=""></div></div><span class="operation">回复</span><div class="c" id="comment_textarea_468" style="display: none;"><div class="anonymous"><input type="text" placeholder="[ 游客 ] 昵称" value=""><input type="text" placeholder="[ 游客 ] email" value=""><a href="javascript:;">--&gt; 使用 GitHub 登录</a></div><div class="preview" id="a657e9b" style="display: none;"><div class="bg"><span class="txt"> 评论预览 </span></div><div class="marked"></div></div><div class="ant-spin-nested-loading"><div class="ant-spin-container"><div style="position: relative;"><textarea type="text" class="ant-input comment-textarea" placeholder="请使用 markdown 语法编辑，读者可开启预览功能"></textarea><span class="togglePreview"> 开启预览</span><span class="cancel">取消</span><button type="button" class="ant-btn submit"><span>提 交</span></button></div></div></div></div></div></div></div><div class="comment-item"><div style="display: none;"><div class="animationload"><div class="osahanloading"></div></div></div><div class="media"><div class="media-left"><img src="./Spring IOC 容器源码分析_files/6.png" class="media-object img-circle"><i class="vertical-line"></i></div><div class="media-body" id="comment_head_519"><h5 class="media-heading">愤怒的苹果 <span style="font-weight: normal;"> 2018-05-31 07:11:26 </span></h5><div class="comment-content-wrapper"><div class="" id="comment_body_519" style="margin: 8px 0px;"><p>大赞,看了郝佳那本书再看看这篇理解感觉更透彻了。</p>
</div><div class=""></div></div><span class="operation">回复</span><div class="c" id="comment_textarea_519" style="display: none;"><div class="anonymous"><input type="text" placeholder="[ 游客 ] 昵称" value=""><input type="text" placeholder="[ 游客 ] email" value=""><a href="javascript:;">--&gt; 使用 GitHub 登录</a></div><div class="preview" id="c068dec18" style="display: none;"><div class="bg"><span class="txt"> 评论预览 </span></div><div class="marked"></div></div><div class="ant-spin-nested-loading"><div class="ant-spin-container"><div style="position: relative;"><textarea type="text" class="ant-input comment-textarea" placeholder="请使用 markdown 语法编辑，读者可开启预览功能"></textarea><span class="togglePreview"> 开启预览</span><span class="cancel">取消</span><button type="button" class="ant-btn submit"><span>提 交</span></button></div></div></div></div></div></div></div><div class="comment-item"><div style="display: none;"><div class="animationload"><div class="osahanloading"></div></div></div><div class="media"><div class="media-left"><img src="./Spring IOC 容器源码分析_files/9.png" class="media-object img-circle"><i class="vertical-line"></i></div><div class="media-body" id="comment_head_523"><h5 class="media-heading">abuzhi <span style="font-weight: normal;"> 2018-06-02 08:08:23 </span></h5><div class="comment-content-wrapper"><div class="" id="comment_body_523" style="margin: 8px 0px;"><p>我这一边看spring技术内幕，一边研究博主的文章，这部分真的好长，要好好研究。另外博主有没有计划分享讨论一下jvm优化在工作中的相关应用？</p>
</div><div class=""></div></div><span class="operation">回复</span><div class="c" id="comment_textarea_523" style="display: none;"><div class="anonymous"><input type="text" placeholder="[ 游客 ] 昵称" value=""><input type="text" placeholder="[ 游客 ] email" value=""><a href="javascript:;">--&gt; 使用 GitHub 登录</a></div><div class="preview" id="ba62e427" style="display: none;"><div class="bg"><span class="txt"> 评论预览 </span></div><div class="marked"></div></div><div class="ant-spin-nested-loading"><div class="ant-spin-container"><div style="position: relative;"><textarea type="text" class="ant-input comment-textarea" placeholder="请使用 markdown 语法编辑，读者可开启预览功能"></textarea><span class="togglePreview"> 开启预览</span><span class="cancel">取消</span><button type="button" class="ant-btn submit"><span>提 交</span></button></div></div></div></div></div></div></div><div class="comment-item"><div style="display: none;"><div class="animationload"><div class="osahanloading"></div></div></div><div class="media"><div class="media-left"><img src="./Spring IOC 容器源码分析_files/12.png" class="media-object img-circle"><i class="vertical-line"></i></div><div class="media-body" id="comment_head_533"><h5 class="media-heading">经年 <span style="font-weight: normal;"> 2018-06-15 04:28:49 </span></h5><div class="comment-content-wrapper"><div class="" id="comment_body_533" style="margin: 8px 0px;"><p>读完了，大致了解了，细节还得慢慢琢磨，佩服楼主这么厉害</p>
</div><div class=""></div></div><span class="operation">回复</span><div class="c" id="comment_textarea_533" style="display: none;"><div class="anonymous"><input type="text" placeholder="[ 游客 ] 昵称" value=""><input type="text" placeholder="[ 游客 ] email" value=""><a href="javascript:;">--&gt; 使用 GitHub 登录</a></div><div class="preview" id="6e839123" style="display: none;"><div class="bg"><span class="txt"> 评论预览 </span></div><div class="marked"></div></div><div class="ant-spin-nested-loading"><div class="ant-spin-container"><div style="position: relative;"><textarea type="text" class="ant-input comment-textarea" placeholder="请使用 markdown 语法编辑，读者可开启预览功能"></textarea><span class="togglePreview"> 开启预览</span><span class="cancel">取消</span><button type="button" class="ant-btn submit"><span>提 交</span></button></div></div></div></div></div></div></div><div class="comment-item"><div style="display: none;"><div class="animationload"><div class="osahanloading"></div></div></div><div class="media"><div class="media-left"><img src="./Spring IOC 容器源码分析_files/13.png" class="media-object img-circle"><i class="vertical-line"></i></div><div class="media-body" id="comment_head_597"><h5 class="media-heading">Alan <span style="font-weight: normal;"> 2018-07-07 03:53:01 </span></h5><div class="comment-content-wrapper"><div class="" id="comment_body_597" style="margin: 8px 0px;"><p>BeanPostProcessor.postProcessBeforeInitialization(...)是在实例化之后初始化之前调后的吧，，，一直被实例化和初始化这个概念混淆</p>
</div><div class=""></div></div><span class="operation">回复</span><div class="c" id="comment_textarea_597" style="display: none;"><div class="anonymous"><input type="text" placeholder="[ 游客 ] 昵称" value=""><input type="text" placeholder="[ 游客 ] email" value=""><a href="javascript:;">--&gt; 使用 GitHub 登录</a></div><div class="preview" id="55786a63" style="display: none;"><div class="bg"><span class="txt"> 评论预览 </span></div><div class="marked"></div></div><div class="ant-spin-nested-loading"><div class="ant-spin-container"><div style="position: relative;"><textarea type="text" class="ant-input comment-textarea" placeholder="请使用 markdown 语法编辑，读者可开启预览功能"></textarea><span class="togglePreview"> 开启预览</span><span class="cancel">取消</span><button type="button" class="ant-btn submit"><span>提 交</span></button></div></div></div></div></div></div></div><div class="comment-item"><div style="display: none;"><div class="animationload"><div class="osahanloading"></div></div></div><div class="media"><div class="media-left" style="cursor: pointer;"><img src="./Spring IOC 容器源码分析_files/8.png" class="media-object img-circle"><i class="vertical-line"></i></div><div class="media-body" id="comment_head_602"><h5 class="media-heading">fuyi <span style="font-weight: normal;"> 2018-07-11 23:40:25 </span></h5><div class="comment-content-wrapper"><div class="" id="comment_body_602" style="margin: 8px 0px;"><p>实例化—-实例化的过程是一个创建Bean的过程，即调用Bean的构造函数，单例的Bean放入单例池中。
初始化—-初始化的过程是一个赋值的过程，即调用Bean的setter，设置Bean的属性。
InstantiationAwareBeanPostProcessor是针对bean实例化前后的接口。
BeanPostProcessor是针对bean初始化前后的接口。</p>
</div><div class=""></div></div><span class="operation">回复</span><div class="comment-item" style="display: block;"><div style="display: none;"><div class="animationload"><div class="osahanloading"></div></div></div><div class="media"><div class="media-left" style="cursor: pointer;"><img src="./Spring IOC 容器源码分析_files/0.png" class="media-object img-circle"><i class="vertical-line"></i></div><div class="media-body" id="comment_head_603"><h5 class="media-heading">HongJie <span style="font-weight: normal;"> 2018-07-12 00:58:42 </span></h5><div class="comment-content-wrapper"><div class="" id="comment_body_603" style="margin: 8px 0px;"><p>好像 BeanPostProcessor 包装在 init-method 前后，而不是 setter（populateBean） 前后吧?</p>
</div><div class=""></div></div><span class="operation">回复</span><div class="comment-item" style="display: block;"><div style="display: none;"><div class="animationload"><div class="osahanloading"></div></div></div><div class="media"><div class="media-left"><img src="./Spring IOC 容器源码分析_files/8.png" class="media-object img-circle"><i class="vertical-line"></i></div><div class="media-body" id="comment_head_604"><h5 class="media-heading">fuyi <span style="font-weight: normal;"> 2018-07-12 02:15:20 </span></h5><div class="comment-content-wrapper"><div class="" id="comment_body_604" style="margin: 8px 0px;"><p>是的呢，我用词不准，只是想突出它俩区别?</p>
</div><div class=""></div></div><span class="operation">回复</span><div class="c" id="comment_textarea_604" style="display: none;"><div class="anonymous"><input type="text" placeholder="[ 游客 ] 昵称" value=""><input type="text" placeholder="[ 游客 ] email" value=""><a href="javascript:;">--&gt; 使用 GitHub 登录</a></div><div class="preview" id="7a9867089" style="display: none;"><div class="bg"><span class="txt"> 评论预览 </span></div><div class="marked"></div></div><div class="ant-spin-nested-loading"><div class="ant-spin-container"><div style="position: relative;"><textarea type="text" class="ant-input comment-textarea" placeholder="请使用 markdown 语法编辑，读者可开启预览功能"></textarea><span class="togglePreview"> 开启预览</span><span class="cancel">取消</span><button type="button" class="ant-btn submit"><span>提 交</span></button></div></div></div></div></div></div></div><div class="c" id="comment_textarea_603" style="display: none;"><div class="anonymous"><input type="text" placeholder="[ 游客 ] 昵称" value=""><input type="text" placeholder="[ 游客 ] email" value=""><a href="javascript:;">--&gt; 使用 GitHub 登录</a></div><div class="preview" id="6a6c47ce" style="display: none;"><div class="bg"><span class="txt"> 评论预览 </span></div><div class="marked"></div></div><div class="ant-spin-nested-loading"><div class="ant-spin-container"><div style="position: relative;"><textarea type="text" class="ant-input comment-textarea" placeholder="请使用 markdown 语法编辑，读者可开启预览功能"></textarea><span class="togglePreview"> 开启预览</span><span class="cancel">取消</span><button type="button" class="ant-btn submit"><span>提 交</span></button></div></div></div></div></div></div></div><div class="c" id="comment_textarea_602" style="display: none;"><div class="anonymous"><input type="text" placeholder="[ 游客 ] 昵称" value=""><input type="text" placeholder="[ 游客 ] email" value=""><a href="javascript:;">--&gt; 使用 GitHub 登录</a></div><div class="preview" id="148c72b7" style="display: none;"><div class="bg"><span class="txt"> 评论预览 </span></div><div class="marked"></div></div><div class="ant-spin-nested-loading"><div class="ant-spin-container"><div style="position: relative;"><textarea type="text" class="ant-input comment-textarea" placeholder="请使用 markdown 语法编辑，读者可开启预览功能"></textarea><span class="togglePreview"> 开启预览</span><span class="cancel">取消</span><button type="button" class="ant-btn submit"><span>提 交</span></button></div></div></div></div></div></div></div><div class="comment-item"><div style="display: none;"><div class="animationload"><div class="osahanloading"></div></div></div><div class="media"><div class="media-left"><img src="./Spring IOC 容器源码分析_files/14.png" class="media-object img-circle"><i class="vertical-line"></i></div><div class="media-body" id="comment_head_608"><h5 class="media-heading">Air <span style="font-weight: normal;"> 2018-07-17 08:54:27 </span></h5><div class="comment-content-wrapper"><div class="" id="comment_body_608" style="margin: 8px 0px;"><p>从ImportNew而来，期待更新</p>
</div><div class=""></div></div><span class="operation">回复</span><div class="c" id="comment_textarea_608" style="display: none;"><div class="anonymous"><input type="text" placeholder="[ 游客 ] 昵称" value=""><input type="text" placeholder="[ 游客 ] email" value=""><a href="javascript:;">--&gt; 使用 GitHub 登录</a></div><div class="preview" id="e8dcbd5a8" style="display: none;"><div class="bg"><span class="txt"> 评论预览 </span></div><div class="marked"></div></div><div class="ant-spin-nested-loading"><div class="ant-spin-container"><div style="position: relative;"><textarea type="text" class="ant-input comment-textarea" placeholder="请使用 markdown 语法编辑，读者可开启预览功能"></textarea><span class="togglePreview"> 开启预览</span><span class="cancel">取消</span><button type="button" class="ant-btn submit"><span>提 交</span></button></div></div></div></div></div></div></div><div class="comment-item"><div style="display: none;"><div class="animationload"><div class="osahanloading"></div></div></div><div class="media"><div class="media-left"><img src="./Spring IOC 容器源码分析_files/10.png" class="media-object img-circle"><i class="vertical-line"></i></div><div class="media-body" id="comment_head_644"><h5 class="media-heading">吴哥的微笑 <span style="font-weight: normal;"> 2018-07-30 00:53:32 </span></h5><div class="comment-content-wrapper"><div class="" id="comment_body_644" style="margin: 8px 0px;"><p>博主是用什么软件做的博客呀，想了解一下</p>
</div><div class=""></div></div><span class="operation">回复</span><div class="c" id="comment_textarea_644" style="display: none;"><div class="anonymous"><input type="text" placeholder="[ 游客 ] 昵称" value=""><input type="text" placeholder="[ 游客 ] email" value=""><a href="javascript:;">--&gt; 使用 GitHub 登录</a></div><div class="preview" id="a6e62d99" style="display: none;"><div class="bg"><span class="txt"> 评论预览 </span></div><div class="marked"></div></div><div class="ant-spin-nested-loading"><div class="ant-spin-container"><div style="position: relative;"><textarea type="text" class="ant-input comment-textarea" placeholder="请使用 markdown 语法编辑，读者可开启预览功能"></textarea><span class="togglePreview"> 开启预览</span><span class="cancel">取消</span><button type="button" class="ant-btn submit"><span>提 交</span></button></div></div></div></div></div></div></div><div class="comment-item"><div style="display: none;"><div class="animationload"><div class="osahanloading"></div></div></div><div class="media"><div class="media-left"><img src="./Spring IOC 容器源码分析_files/14.png" class="media-object img-circle"><i class="vertical-line"></i></div><div class="media-body" id="comment_head_699"><h5 class="media-heading">柒鲤鱼，一起飞 <span style="font-weight: normal;"> 2018-08-28 00:36:56 </span></h5><div class="comment-content-wrapper"><div class="" id="comment_body_699" style="margin: 8px 0px;"><p>讲的很透彻，需要看好几遍好好消化，请求转载到公众号</p>
</div><div class=""></div></div><span class="operation">回复</span><div class="c" id="comment_textarea_699" style="display: none;"><div class="anonymous"><input type="text" placeholder="[ 游客 ] 昵称" value=""><input type="text" placeholder="[ 游客 ] email" value=""><a href="javascript:;">--&gt; 使用 GitHub 登录</a></div><div class="preview" id="24cba5e" style="display: none;"><div class="bg"><span class="txt"> 评论预览 </span></div><div class="marked"></div></div><div class="ant-spin-nested-loading"><div class="ant-spin-container"><div style="position: relative;"><textarea type="text" class="ant-input comment-textarea" placeholder="请使用 markdown 语法编辑，读者可开启预览功能"></textarea><span class="togglePreview"> 开启预览</span><span class="cancel">取消</span><button type="button" class="ant-btn submit"><span>提 交</span></button></div></div></div></div></div></div></div><div class="comment-item"><div style="display: none;"><div class="animationload"><div class="osahanloading"></div></div></div><div class="media"><div class="media-left"><img src="./Spring IOC 容器源码分析_files/3(1).png" class="media-object img-circle"><i class="vertical-line"></i></div><div class="media-body" id="comment_head_705"><h5 class="media-heading">港岛妹夫 <span style="font-weight: normal;"> 2018-09-03 23:57:11 </span></h5><div class="comment-content-wrapper"><div class="" id="comment_body_705" style="margin: 8px 0px;"><p>平时自己也写一点东西, 就是一些总结性的基础知识.
刚刚用了一个半月的时间, 看完&lt;Spring技术内幕&gt;的IOC, AOP, 和事务管理. 
就发现了博主的文章. 自己学习过之后更能体会到博主NB啊.  看懂和成文之间, 差了N*N个层次的理解..</p>
</div><div class=""></div></div><span class="operation">回复</span><div class="c" id="comment_textarea_705" style="display: none;"><div class="anonymous"><input type="text" placeholder="[ 游客 ] 昵称" value=""><input type="text" placeholder="[ 游客 ] email" value=""><a href="javascript:;">--&gt; 使用 GitHub 登录</a></div><div class="preview" id="c4b24385" style="display: none;"><div class="bg"><span class="txt"> 评论预览 </span></div><div class="marked"></div></div><div class="ant-spin-nested-loading"><div class="ant-spin-container"><div style="position: relative;"><textarea type="text" class="ant-input comment-textarea" placeholder="请使用 markdown 语法编辑，读者可开启预览功能"></textarea><span class="togglePreview"> 开启预览</span><span class="cancel">取消</span><button type="button" class="ant-btn submit"><span>提 交</span></button></div></div></div></div></div></div></div><div class="comment-item"><div style="display: none;"><div class="animationload"><div class="osahanloading"></div></div></div><div class="media"><div class="media-left"><img src="./Spring IOC 容器源码分析_files/8.png" class="media-object img-circle"><i class="vertical-line"></i></div><div class="media-body" id="comment_head_715"><h5 class="media-heading">蓝先生 <span style="font-weight: normal;"> 2018-09-05 10:12:31 </span></h5><div class="comment-content-wrapper"><div class="" id="comment_body_715" style="margin: 8px 0px;"><p>请问下大佬，如果不通过xml配置文件，通过注解配置的bean注入到ioc容器的源码也是本文这种方式吗</p>
</div><div class=""></div></div><span class="operation">回复</span><div class="c" id="comment_textarea_715" style="display: none;"><div class="anonymous"><input type="text" placeholder="[ 游客 ] 昵称" value=""><input type="text" placeholder="[ 游客 ] email" value=""><a href="javascript:;">--&gt; 使用 GitHub 登录</a></div><div class="preview" id="394d0bd8" style="display: none;"><div class="bg"><span class="txt"> 评论预览 </span></div><div class="marked"></div></div><div class="ant-spin-nested-loading"><div class="ant-spin-container"><div style="position: relative;"><textarea type="text" class="ant-input comment-textarea" placeholder="请使用 markdown 语法编辑，读者可开启预览功能"></textarea><span class="togglePreview"> 开启预览</span><span class="cancel">取消</span><button type="button" class="ant-btn submit"><span>提 交</span></button></div></div></div></div></div></div></div><div class="comment-item"><div style="display: none;"><div class="animationload"><div class="osahanloading"></div></div></div><div class="media"><div class="media-left" style="cursor: pointer;"><img src="./Spring IOC 容器源码分析_files/18.png" class="media-object img-circle"><i class="vertical-line"></i></div><div class="media-body" id="comment_head_744"><h5 class="media-heading">728077832 <span style="font-weight: normal;"> 2018-09-18 23:09:58 </span></h5><div class="comment-content-wrapper"><div class="" id="comment_body_744" style="margin: 8px 0px;"><p>hello, 博主你文章用什么编辑器写的啊？
我用的markdown代码没有颜色</p>
</div><div class=""></div></div><span class="operation">回复</span><div class="comment-item" style="display: block;"><div style="display: none;"><div class="animationload"><div class="osahanloading"></div></div></div><div class="media"><div class="media-left"><img src="./Spring IOC 容器源码分析_files/11.png" class="media-object img-circle"><i class="vertical-line"></i></div><div class="media-body" id="comment_head_745"><h5 class="media-heading">HongJie <span style="font-weight: normal;"> 2018-09-18 23:38:24 </span></h5><div class="comment-content-wrapper"><div class="" id="comment_body_745" style="margin: 8px 0px;"><p>用个插件 &lt;a href="https://highlightjs.org/"&gt;highlight.js&lt;/a&gt;</p>
</div><div class=""></div></div><span class="operation">回复</span><div class="c" id="comment_textarea_745" style="display: none;"><div class="anonymous"><input type="text" placeholder="[ 游客 ] 昵称" value=""><input type="text" placeholder="[ 游客 ] email" value=""><a href="javascript:;">--&gt; 使用 GitHub 登录</a></div><div class="preview" id="534ccd4" style="display: none;"><div class="bg"><span class="txt"> 评论预览 </span></div><div class="marked"></div></div><div class="ant-spin-nested-loading"><div class="ant-spin-container"><div style="position: relative;"><textarea type="text" class="ant-input comment-textarea" placeholder="请使用 markdown 语法编辑，读者可开启预览功能"></textarea><span class="togglePreview"> 开启预览</span><span class="cancel">取消</span><button type="button" class="ant-btn submit"><span>提 交</span></button></div></div></div></div></div></div></div><div class="c" id="comment_textarea_744" style="display: none;"><div class="anonymous"><input type="text" placeholder="[ 游客 ] 昵称" value=""><input type="text" placeholder="[ 游客 ] email" value=""><a href="javascript:;">--&gt; 使用 GitHub 登录</a></div><div class="preview" id="59181822" style="display: none;"><div class="bg"><span class="txt"> 评论预览 </span></div><div class="marked"></div></div><div class="ant-spin-nested-loading"><div class="ant-spin-container"><div style="position: relative;"><textarea type="text" class="ant-input comment-textarea" placeholder="请使用 markdown 语法编辑，读者可开启预览功能"></textarea><span class="togglePreview"> 开启预览</span><span class="cancel">取消</span><button type="button" class="ant-btn submit"><span>提 交</span></button></div></div></div></div></div></div></div><div class="comment-item"><div style="display: none;"><div class="animationload"><div class="osahanloading"></div></div></div><div class="media"><div class="media-left"><img src="./Spring IOC 容器源码分析_files/7.png" class="media-object img-circle"><i class="vertical-line"></i></div><div class="media-body" id="comment_head_768"><h5 class="media-heading">小张 <span style="font-weight: normal;"> 2018-10-09 00:27:03 </span></h5><div class="comment-content-wrapper"><div class="" id="comment_body_768" style="margin: 8px 0px;"><p>很nice,就是太长了，看起来有点痛苦了，可以尝试缩短篇幅，多写几篇，这样效果应该更好的</p>
</div><div class=""></div></div><span class="operation">回复</span><div class="c" id="comment_textarea_768" style="display: none;"><div class="anonymous"><input type="text" placeholder="[ 游客 ] 昵称" value=""><input type="text" placeholder="[ 游客 ] email" value=""><a href="javascript:;">--&gt; 使用 GitHub 登录</a></div><div class="preview" id="8057a024" style="display: none;"><div class="bg"><span class="txt"> 评论预览 </span></div><div class="marked"></div></div><div class="ant-spin-nested-loading"><div class="ant-spin-container"><div style="position: relative;"><textarea type="text" class="ant-input comment-textarea" placeholder="请使用 markdown 语法编辑，读者可开启预览功能"></textarea><span class="togglePreview"> 开启预览</span><span class="cancel">取消</span><button type="button" class="ant-btn submit"><span>提 交</span></button></div></div></div></div></div></div></div><div class="comment-item"><div style="display: none;"><div class="animationload"><div class="osahanloading"></div></div></div><div class="media"><div class="media-left"><img src="./Spring IOC 容器源码分析_files/16.png" class="media-object img-circle"><i class="vertical-line"></i></div><div class="media-body" id="comment_head_784"><h5 class="media-heading">Barry <span style="font-weight: normal;"> 2018-10-24 10:49:38 </span></h5><div class="comment-content-wrapper"><div class="" id="comment_body_784" style="margin: 8px 0px;"><p>annotation 方式下bean的注册貌似不是在postProcessBeanFactory里做的，而是在registerBeanPostProcessors里，是吧博主大大~</p>
</div><div class=""></div></div><span class="operation">回复</span><div class="c" id="comment_textarea_784" style="display: none;"><div class="anonymous"><input type="text" placeholder="[ 游客 ] 昵称" value=""><input type="text" placeholder="[ 游客 ] email" value=""><a href="javascript:;">--&gt; 使用 GitHub 登录</a></div><div class="preview" id="01229801" style="display: none;"><div class="bg"><span class="txt"> 评论预览 </span></div><div class="marked"></div></div><div class="ant-spin-nested-loading"><div class="ant-spin-container"><div style="position: relative;"><textarea type="text" class="ant-input comment-textarea" placeholder="请使用 markdown 语法编辑，读者可开启预览功能"></textarea><span class="togglePreview"> 开启预览</span><span class="cancel">取消</span><button type="button" class="ant-btn submit"><span>提 交</span></button></div></div></div></div></div></div></div><div class="comment-item"><div style="display: none;"><div class="animationload"><div class="osahanloading"></div></div></div><div class="media"><div class="media-left"><img src="./Spring IOC 容器源码分析_files/6.png" class="media-object img-circle"><i class="vertical-line"></i></div><div class="media-body" id="comment_head_791"><h5 class="media-heading">小胡 <span style="font-weight: normal;"> 2018-10-27 00:17:57 </span></h5><div class="comment-content-wrapper"><div class="" id="comment_body_791" style="margin: 8px 0px;"><p>博主很强大，看了一遍还是有点懵，准备看第二遍了</p>
</div><div class=""></div></div><span class="operation">回复</span><div class="c" id="comment_textarea_791" style="display: none;"><div class="anonymous"><input type="text" placeholder="[ 游客 ] 昵称" value=""><input type="text" placeholder="[ 游客 ] email" value=""><a href="javascript:;">--&gt; 使用 GitHub 登录</a></div><div class="preview" id="916893ac" style="display: none;"><div class="bg"><span class="txt"> 评论预览 </span></div><div class="marked"></div></div><div class="ant-spin-nested-loading"><div class="ant-spin-container"><div style="position: relative;"><textarea type="text" class="ant-input comment-textarea" placeholder="请使用 markdown 语法编辑，读者可开启预览功能"></textarea><span class="togglePreview"> 开启预览</span><span class="cancel">取消</span><button type="button" class="ant-btn submit"><span>提 交</span></button></div></div></div></div></div></div></div><div class="comment-item"><div style="display: none;"><div class="animationload"><div class="osahanloading"></div></div></div><div class="media"><div class="media-left"><img src="./Spring IOC 容器源码分析_files/6.png" class="media-object img-circle"><i class="vertical-line"></i></div><div class="media-body" id="comment_head_823"><h5 class="media-heading">leo <span style="font-weight: normal;"> 2018-11-15 01:15:55 </span></h5><div class="comment-content-wrapper"><div class="" id="comment_body_823" style="margin: 8px 0px;"><p>大佬，转载一下可以吗？觉得挺不错的，我也是一步一步debug源码过来的，写自己手写一篇，但限于篇幅</p>
</div><div class=""></div></div><span class="operation">回复</span><div class="c" id="comment_textarea_823" style="display: none;"><div class="anonymous"><input type="text" placeholder="[ 游客 ] 昵称" value=""><input type="text" placeholder="[ 游客 ] email" value=""><a href="javascript:;">--&gt; 使用 GitHub 登录</a></div><div class="preview" id="b2ab58859" style="display: none;"><div class="bg"><span class="txt"> 评论预览 </span></div><div class="marked"></div></div><div class="ant-spin-nested-loading"><div class="ant-spin-container"><div style="position: relative;"><textarea type="text" class="ant-input comment-textarea" placeholder="请使用 markdown 语法编辑，读者可开启预览功能"></textarea><span class="togglePreview"> 开启预览</span><span class="cancel">取消</span><button type="button" class="ant-btn submit"><span>提 交</span></button></div></div></div></div></div></div></div><div class="comment-item"><div style="display: none;"><div class="animationload"><div class="osahanloading"></div></div></div><div class="media"><div class="media-left"><img src="./Spring IOC 容器源码分析_files/10.png" class="media-object img-circle"><i class="vertical-line"></i></div><div class="media-body" id="comment_head_870"><h5 class="media-heading">撒都 <span style="font-weight: normal;"> 2018-12-05 05:57:13 </span></h5><div class="comment-content-wrapper"><div class="" id="comment_body_870" style="margin: 8px 0px;"><p>好多啊好难弄明白啊</p>
</div><div class=""></div></div><span class="operation">回复</span><div class="c" id="comment_textarea_870" style="display: none;"><div class="anonymous"><input type="text" placeholder="[ 游客 ] 昵称" value=""><input type="text" placeholder="[ 游客 ] email" value=""><a href="javascript:;">--&gt; 使用 GitHub 登录</a></div><div class="preview" id="602ad568" style="display: none;"><div class="bg"><span class="txt"> 评论预览 </span></div><div class="marked"></div></div><div class="ant-spin-nested-loading"><div class="ant-spin-container"><div style="position: relative;"><textarea type="text" class="ant-input comment-textarea" placeholder="请使用 markdown 语法编辑，读者可开启预览功能"></textarea><span class="togglePreview"> 开启预览</span><span class="cancel">取消</span><button type="button" class="ant-btn submit"><span>提 交</span></button></div></div></div></div></div></div></div><div class="comment-item"><div style="display: none;"><div class="animationload"><div class="osahanloading"></div></div></div><div class="media"><div class="media-left"><img src="./Spring IOC 容器源码分析_files/12.png" class="media-object img-circle"><i class="vertical-line"></i></div><div class="media-body" id="comment_head_898"><h5 class="media-heading">diao <span style="font-weight: normal;"> 2018-12-14 05:51:29 </span></h5><div class="comment-content-wrapper"><div class="" id="comment_body_898" style="margin: 8px 0px;"><p>可以说非常的nice</p>
</div><div class=""></div></div><span class="operation">回复</span><div class="c" id="comment_textarea_898" style="display: none;"><div class="anonymous"><input type="text" placeholder="[ 游客 ] 昵称" value=""><input type="text" placeholder="[ 游客 ] email" value=""><a href="javascript:;">--&gt; 使用 GitHub 登录</a></div><div class="preview" id="1c2c64a4" style="display: none;"><div class="bg"><span class="txt"> 评论预览 </span></div><div class="marked"></div></div><div class="ant-spin-nested-loading"><div class="ant-spin-container"><div style="position: relative;"><textarea type="text" class="ant-input comment-textarea" placeholder="请使用 markdown 语法编辑，读者可开启预览功能"></textarea><span class="togglePreview"> 开启预览</span><span class="cancel">取消</span><button type="button" class="ant-btn submit"><span>提 交</span></button></div></div></div></div></div></div></div><div class="comment-item"><div style="display: none;"><div class="animationload"><div class="osahanloading"></div></div></div><div class="media"><div class="media-left"><img src="./Spring IOC 容器源码分析_files/8.png" class="media-object img-circle"><i class="vertical-line"></i></div><div class="media-body" id="comment_head_917"><h5 class="media-heading">小亮子 <span style="font-weight: normal;"> 2018-12-26 00:30:53 </span></h5><div class="comment-content-wrapper"><div class="" id="comment_body_917" style="margin: 8px 0px;"><p>默默支持一下</p>
</div><div class=""></div></div><span class="operation">回复</span><div class="c" id="comment_textarea_917" style="display: none;"><div class="anonymous"><input type="text" placeholder="[ 游客 ] 昵称" value=""><input type="text" placeholder="[ 游客 ] email" value=""><a href="javascript:;">--&gt; 使用 GitHub 登录</a></div><div class="preview" id="c8e94a06" style="display: none;"><div class="bg"><span class="txt"> 评论预览 </span></div><div class="marked"></div></div><div class="ant-spin-nested-loading"><div class="ant-spin-container"><div style="position: relative;"><textarea type="text" class="ant-input comment-textarea" placeholder="请使用 markdown 语法编辑，读者可开启预览功能"></textarea><span class="togglePreview"> 开启预览</span><span class="cancel">取消</span><button type="button" class="ant-btn submit"><span>提 交</span></button></div></div></div></div></div></div></div><div class="comment-item"><div style="display: none;"><div class="animationload"><div class="osahanloading"></div></div></div><div class="media"><div class="media-left"><img src="./Spring IOC 容器源码分析_files/13.png" class="media-object img-circle"><i class="vertical-line"></i></div><div class="media-body" id="comment_head_942"><h5 class="media-heading">yuechen323 <span style="font-weight: normal;"> 2019-01-06 13:23:43 </span></h5><div class="comment-content-wrapper"><div class="" id="comment_body_942" style="margin: 8px 0px;"><p>lz总结的真不错, 对我帮助很大, 说声 " 我爱你 "</p>
</div><div class=""></div></div><span class="operation">回复</span><div class="c" id="comment_textarea_942" style="display: none;"><div class="anonymous"><input type="text" placeholder="[ 游客 ] 昵称" value=""><input type="text" placeholder="[ 游客 ] email" value=""><a href="javascript:;">--&gt; 使用 GitHub 登录</a></div><div class="preview" id="175a2cb" style="display: none;"><div class="bg"><span class="txt"> 评论预览 </span></div><div class="marked"></div></div><div class="ant-spin-nested-loading"><div class="ant-spin-container"><div style="position: relative;"><textarea type="text" class="ant-input comment-textarea" placeholder="请使用 markdown 语法编辑，读者可开启预览功能"></textarea><span class="togglePreview"> 开启预览</span><span class="cancel">取消</span><button type="button" class="ant-btn submit"><span>提 交</span></button></div></div></div></div></div></div></div><div class="comment-item"><div style="display: none;"><div class="animationload"><div class="osahanloading"></div></div></div><div class="media"><div class="media-left"><img src="./Spring IOC 容器源码分析_files/12.png" class="media-object img-circle"><i class="vertical-line"></i></div><div class="media-body" id="comment_head_943"><h5 class="media-heading">spilledyear <span style="font-weight: normal;"> 2019-01-07 03:13:04 </span></h5><div class="comment-content-wrapper"><div class="" id="comment_body_943" style="margin: 8px 0px;"><p>很强</p>
</div><div class=""></div></div><span class="operation">回复</span><div class="c" id="comment_textarea_943" style="display: none;"><div class="anonymous"><input type="text" placeholder="[ 游客 ] 昵称" value=""><input type="text" placeholder="[ 游客 ] email" value=""><a href="javascript:;">--&gt; 使用 GitHub 登录</a></div><div class="preview" id="da6b4e55c9" style="display: none;"><div class="bg"><span class="txt"> 评论预览 </span></div><div class="marked"></div></div><div class="ant-spin-nested-loading"><div class="ant-spin-container"><div style="position: relative;"><textarea type="text" class="ant-input comment-textarea" placeholder="请使用 markdown 语法编辑，读者可开启预览功能"></textarea><span class="togglePreview"> 开启预览</span><span class="cancel">取消</span><button type="button" class="ant-btn submit"><span>提 交</span></button></div></div></div></div></div></div></div><div class="comment-item"><div style="display: none;"><div class="animationload"><div class="osahanloading"></div></div></div><div class="media"><div class="media-left"><img src="./Spring IOC 容器源码分析_files/2(1).png" class="media-object img-circle"><i class="vertical-line"></i></div><div class="media-body" id="comment_head_946"><h5 class="media-heading">东方佳木 <span style="font-weight: normal;"> 2019-01-10 03:24:24 </span></h5><div class="comment-content-wrapper"><div class="" id="comment_body_946" style="margin: 8px 0px;"><p>最近再看分布式事务框架TCC源码（cangmingxie版本的）,感觉有点吃力。期待楼主分享Spring事务源码的解析。</p>
</div><div class=""></div></div><span class="operation">回复</span><div class="c" id="comment_textarea_946" style="display: none;"><div class="anonymous"><input type="text" placeholder="[ 游客 ] 昵称" value=""><input type="text" placeholder="[ 游客 ] email" value=""><a href="javascript:;">--&gt; 使用 GitHub 登录</a></div><div class="preview" id="6c441038" style="display: none;"><div class="bg"><span class="txt"> 评论预览 </span></div><div class="marked"></div></div><div class="ant-spin-nested-loading"><div class="ant-spin-container"><div style="position: relative;"><textarea type="text" class="ant-input comment-textarea" placeholder="请使用 markdown 语法编辑，读者可开启预览功能"></textarea><span class="togglePreview"> 开启预览</span><span class="cancel">取消</span><button type="button" class="ant-btn submit"><span>提 交</span></button></div></div></div></div></div></div></div><div class="comment-item"><div style="display: none;"><div class="animationload"><div class="osahanloading"></div></div></div><div class="media"><div class="media-left"><img src="./Spring IOC 容器源码分析_files/16.png" class="media-object img-circle"><i class="vertical-line"></i></div><div class="media-body" id="comment_head_947"><h5 class="media-heading">quliang <span style="font-weight: normal;"> 2019-01-10 03:33:40 </span></h5><div class="comment-content-wrapper"><div class="" id="comment_body_947" style="margin: 8px 0px;"><p>谢谢博主分享,但文章内容可能是因为篇幅过长的原因,似乎有重复内容,还是我眼花了.</p>
</div><div class=""></div></div><span class="operation">回复</span><div class="c" id="comment_textarea_947" style="display: none;"><div class="anonymous"><input type="text" placeholder="[ 游客 ] 昵称" value=""><input type="text" placeholder="[ 游客 ] email" value=""><a href="javascript:;">--&gt; 使用 GitHub 登录</a></div><div class="preview" id="68c19a59" style="display: none;"><div class="bg"><span class="txt"> 评论预览 </span></div><div class="marked"></div></div><div class="ant-spin-nested-loading"><div class="ant-spin-container"><div style="position: relative;"><textarea type="text" class="ant-input comment-textarea" placeholder="请使用 markdown 语法编辑，读者可开启预览功能"></textarea><span class="togglePreview"> 开启预览</span><span class="cancel">取消</span><button type="button" class="ant-btn submit"><span>提 交</span></button></div></div></div></div></div></div></div><div class="comment-item"><div style="display: none;"><div class="animationload"><div class="osahanloading"></div></div></div><div class="media"><div class="media-left"><img src="./Spring IOC 容器源码分析_files/14.png" class="media-object img-circle"><i class="vertical-line"></i></div><div class="media-body" id="comment_head_956"><h5 class="media-heading">向南以北 <span style="font-weight: normal;"> 2019-01-15 13:15:22 </span></h5><div class="comment-content-wrapper"><div class="" id="comment_body_956" style="margin: 8px 0px;"><p>谢谢楼主的分享，绝对的干货，希望楼主再出篇注解加载类型的文章。</p>
</div><div class=""></div></div><span class="operation">回复</span><div class="c" id="comment_textarea_956" style="display: none;"><div class="anonymous"><input type="text" placeholder="[ 游客 ] 昵称" value=""><input type="text" placeholder="[ 游客 ] email" value=""><a href="javascript:;">--&gt; 使用 GitHub 登录</a></div><div class="preview" id="cd737682" style="display: none;"><div class="bg"><span class="txt"> 评论预览 </span></div><div class="marked"></div></div><div class="ant-spin-nested-loading"><div class="ant-spin-container"><div style="position: relative;"><textarea type="text" class="ant-input comment-textarea" placeholder="请使用 markdown 语法编辑，读者可开启预览功能"></textarea><span class="togglePreview"> 开启预览</span><span class="cancel">取消</span><button type="button" class="ant-btn submit"><span>提 交</span></button></div></div></div></div></div></div></div><div class="comment-item"><div style="display: none;"><div class="animationload"><div class="osahanloading"></div></div></div><div class="media"><div class="media-left"><img src="./Spring IOC 容器源码分析_files/17.png" class="media-object img-circle"><i class="vertical-line"></i></div><div class="media-body" id="comment_head_966"><h5 class="media-heading">步行者 <span style="font-weight: normal;"> 2019-01-22 07:36:20 </span></h5><div class="comment-content-wrapper"><div class="" id="comment_body_966" style="margin: 8px 0px;"><p>我看了五六遍了，希望作者来个注解的版本</p>
</div><div class=""></div></div><span class="operation">回复</span><div class="c" id="comment_textarea_966" style="display: none;"><div class="anonymous"><input type="text" placeholder="[ 游客 ] 昵称" value=""><input type="text" placeholder="[ 游客 ] email" value=""><a href="javascript:;">--&gt; 使用 GitHub 登录</a></div><div class="preview" id="c7118e7b" style="display: none;"><div class="bg"><span class="txt"> 评论预览 </span></div><div class="marked"></div></div><div class="ant-spin-nested-loading"><div class="ant-spin-container"><div style="position: relative;"><textarea type="text" class="ant-input comment-textarea" placeholder="请使用 markdown 语法编辑，读者可开启预览功能"></textarea><span class="togglePreview"> 开启预览</span><span class="cancel">取消</span><button type="button" class="ant-btn submit"><span>提 交</span></button></div></div></div></div></div></div></div><div class="comment-item"><div style="display: none;"><div class="animationload"><div class="osahanloading"></div></div></div><div class="media"><div class="media-left"><img src="./Spring IOC 容器源码分析_files/16.png" class="media-object img-circle"><i class="vertical-line"></i></div><div class="media-body" id="comment_head_996"><h5 class="media-heading">qian <span style="font-weight: normal;"> 2019-02-15 04:56:30 </span></h5><div class="comment-content-wrapper"><div class="" id="comment_body_996" style="margin: 8px 0px;"><p>这未免也太良心了吧</p>
</div><div class=""></div></div><span class="operation">回复</span><div class="c" id="comment_textarea_996" style="display: none;"><div class="anonymous"><input type="text" placeholder="[ 游客 ] 昵称" value=""><input type="text" placeholder="[ 游客 ] email" value=""><a href="javascript:;">--&gt; 使用 GitHub 登录</a></div><div class="preview" id="7e6bb64b" style="display: none;"><div class="bg"><span class="txt"> 评论预览 </span></div><div class="marked"></div></div><div class="ant-spin-nested-loading"><div class="ant-spin-container"><div style="position: relative;"><textarea type="text" class="ant-input comment-textarea" placeholder="请使用 markdown 语法编辑，读者可开启预览功能"></textarea><span class="togglePreview"> 开启预览</span><span class="cancel">取消</span><button type="button" class="ant-btn submit"><span>提 交</span></button></div></div></div></div></div></div></div><div class="comment-item"><div style="display: none;"><div class="animationload"><div class="osahanloading"></div></div></div><div class="media"><div class="media-left"><img src="./Spring IOC 容器源码分析_files/4.png" class="media-object img-circle"><i class="vertical-line"></i></div><div class="media-body" id="comment_head_1000"><h5 class="media-heading">小雨 <span style="font-weight: normal;"> 2019-02-16 04:38:40 </span></h5><div class="comment-content-wrapper"><div class="" id="comment_body_1000" style="margin: 8px 0px;"><p>博主很厉害，期待博主继续，期待aop的文章</p>
</div><div class=""></div></div><span class="operation">回复</span><div class="c" id="comment_textarea_1000" style="display: none;"><div class="anonymous"><input type="text" placeholder="[ 游客 ] 昵称" value=""><input type="text" placeholder="[ 游客 ] email" value=""><a href="javascript:;">--&gt; 使用 GitHub 登录</a></div><div class="preview" id="77ce5512" style="display: none;"><div class="bg"><span class="txt"> 评论预览 </span></div><div class="marked"></div></div><div class="ant-spin-nested-loading"><div class="ant-spin-container"><div style="position: relative;"><textarea type="text" class="ant-input comment-textarea" placeholder="请使用 markdown 语法编辑，读者可开启预览功能"></textarea><span class="togglePreview"> 开启预览</span><span class="cancel">取消</span><button type="button" class="ant-btn submit"><span>提 交</span></button></div></div></div></div></div></div></div><div class="comment-item"><div style="display: none;"><div class="animationload"><div class="osahanloading"></div></div></div><div class="media"><div class="media-left"><img src="./Spring IOC 容器源码分析_files/13.png" class="media-object img-circle"><i class="vertical-line"></i></div><div class="media-body" id="comment_head_1003"><h5 class="media-heading">gang <span style="font-weight: normal;"> 2019-02-20 05:45:43 </span></h5><div class="comment-content-wrapper"><div class="" id="comment_body_1003" style="margin: 8px 0px;"><p>太良心了</p>
</div><div class=""></div></div><span class="operation">回复</span><div class="c" id="comment_textarea_1003" style="display: none;"><div class="anonymous"><input type="text" placeholder="[ 游客 ] 昵称" value=""><input type="text" placeholder="[ 游客 ] email" value=""><a href="javascript:;">--&gt; 使用 GitHub 登录</a></div><div class="preview" id="deb5cacc" style="display: none;"><div class="bg"><span class="txt"> 评论预览 </span></div><div class="marked"></div></div><div class="ant-spin-nested-loading"><div class="ant-spin-container"><div style="position: relative;"><textarea type="text" class="ant-input comment-textarea" placeholder="请使用 markdown 语法编辑，读者可开启预览功能"></textarea><span class="togglePreview"> 开启预览</span><span class="cancel">取消</span><button type="button" class="ant-btn submit"><span>提 交</span></button></div></div></div></div></div></div></div><div class="comment-item"><div style="display: none;"><div class="animationload"><div class="osahanloading"></div></div></div><div class="media"><div class="media-left" style="cursor: pointer;"><img src="./Spring IOC 容器源码分析_files/6.png" class="media-object img-circle"><i class="vertical-line"></i></div><div class="media-body" id="comment_head_1037"><h5 class="media-heading">userheng <span style="font-weight: normal;"> 2019-03-05 00:40:13 </span></h5><div class="comment-content-wrapper"><div class="" id="comment_body_1037" style="margin: 8px 0px;"><blockquote>
</blockquote>
<p>如果仔细看了代码分析的话，其实很容易知道了，在 bean 实例化完成、属性注入完成之后，会执行回调方法，具体请参见类 AbstractAutowireCapableBeanFactory#initBean 方法。
应该是 AbstractAutowireCapableBeanFactory#initializeBean方法</p>
</div><div class=""></div></div><span class="operation">回复</span><div class="comment-item" style="display: block;"><div style="display: none;"><div class="animationload"><div class="osahanloading"></div></div></div><div class="media"><div class="media-left"><img src="./Spring IOC 容器源码分析_files/0.png" class="media-object img-circle"><i class="vertical-line"></i></div><div class="media-body" id="comment_head_1040"><h5 class="media-heading">HongJie <span style="font-weight: normal;"> 2019-03-05 03:38:23 </span></h5><div class="comment-content-wrapper"><div class="" id="comment_body_1040" style="margin: 8px 0px;"><p>细心，点赞</p>
</div><div class=""></div></div><span class="operation">回复</span><div class="c" id="comment_textarea_1040" style="display: none;"><div class="anonymous"><input type="text" placeholder="[ 游客 ] 昵称" value=""><input type="text" placeholder="[ 游客 ] email" value=""><a href="javascript:;">--&gt; 使用 GitHub 登录</a></div><div class="preview" id="b7a7ad09" style="display: none;"><div class="bg"><span class="txt"> 评论预览 </span></div><div class="marked"></div></div><div class="ant-spin-nested-loading"><div class="ant-spin-container"><div style="position: relative;"><textarea type="text" class="ant-input comment-textarea" placeholder="请使用 markdown 语法编辑，读者可开启预览功能"></textarea><span class="togglePreview"> 开启预览</span><span class="cancel">取消</span><button type="button" class="ant-btn submit"><span>提 交</span></button></div></div></div></div></div></div></div><div class="c" id="comment_textarea_1037" style="display: none;"><div class="anonymous"><input type="text" placeholder="[ 游客 ] 昵称" value=""><input type="text" placeholder="[ 游客 ] email" value=""><a href="javascript:;">--&gt; 使用 GitHub 登录</a></div><div class="preview" id="84059dec" style="display: none;"><div class="bg"><span class="txt"> 评论预览 </span></div><div class="marked"></div></div><div class="ant-spin-nested-loading"><div class="ant-spin-container"><div style="position: relative;"><textarea type="text" class="ant-input comment-textarea" placeholder="请使用 markdown 语法编辑，读者可开启预览功能"></textarea><span class="togglePreview"> 开启预览</span><span class="cancel">取消</span><button type="button" class="ant-btn submit"><span>提 交</span></button></div></div></div></div></div></div></div><div class="comment-item"><div style="display: none;"><div class="animationload"><div class="osahanloading"></div></div></div><div class="media"><div class="media-left"><img src="./Spring IOC 容器源码分析_files/18.png" class="media-object img-circle"><i class="vertical-line"></i></div><div class="media-body" id="comment_head_1038"><h5 class="media-heading">guest <span style="font-weight: normal;"> 2019-03-05 03:26:28 </span></h5><div class="comment-content-wrapper"><div class="" id="comment_body_1038" style="margin: 8px 0px;"><p>&lt;h2 id="configurablelistablebeanfactory-applicationcontext-"&gt;ConfigurableListableBeanFactory 也是一个特殊的接口，看图，特殊之处在于它继承了第二层所有的三个接口，而 ApplicationContext 没有。这点之后会用到。&lt;/h2&gt;
博主你好，上面的ConfigurableListableBeanFactory是不是笔误了，指的是DefaultListableBeanFactory继承了AbstractAutowireCapableBeanFactory、AbstractBeanFactory、ConfigurableBeanFactory吗</p>
</div><div class=""></div></div><span class="operation">回复</span><div class="c" id="comment_textarea_1038" style="display: none;"><div class="anonymous"><input type="text" placeholder="[ 游客 ] 昵称" value=""><input type="text" placeholder="[ 游客 ] email" value=""><a href="javascript:;">--&gt; 使用 GitHub 登录</a></div><div class="preview" id="a1cbcc74" style="display: none;"><div class="bg"><span class="txt"> 评论预览 </span></div><div class="marked"></div></div><div class="ant-spin-nested-loading"><div class="ant-spin-container"><div style="position: relative;"><textarea type="text" class="ant-input comment-textarea" placeholder="请使用 markdown 语法编辑，读者可开启预览功能"></textarea><span class="togglePreview"> 开启预览</span><span class="cancel">取消</span><button type="button" class="ant-btn submit"><span>提 交</span></button></div></div></div></div></div></div></div><div class="comment-item"><div style="display: none;"><div class="animationload"><div class="osahanloading"></div></div></div><div class="media"><div class="media-left" style="cursor: pointer;"><img src="./Spring IOC 容器源码分析_files/18.png" class="media-object img-circle"><i class="vertical-line"></i></div><div class="media-body" id="comment_head_1039"><h5 class="media-heading">guest <span style="font-weight: normal;"> 2019-03-05 03:37:27 </span></h5><div class="comment-content-wrapper"><div class="" id="comment_body_1039" style="margin: 8px 0px;"><p>看明白了😂</p>
</div><div class=""></div></div><span class="operation">回复</span><div class="comment-item" style="display: block;"><div style="display: none;"><div class="animationload"><div class="osahanloading"></div></div></div><div class="media"><div class="media-left"><img src="./Spring IOC 容器源码分析_files/0.png" class="media-object img-circle"><i class="vertical-line"></i></div><div class="media-body" id="comment_head_1041"><h5 class="media-heading">HongJie <span style="font-weight: normal;"> 2019-03-05 03:38:37 </span></h5><div class="comment-content-wrapper"><div class="" id="comment_body_1041" style="margin: 8px 0px;"><p>😭😭😭</p>
</div><div class=""></div></div><span class="operation">回复</span><div class="c" id="comment_textarea_1041" style="display: none;"><div class="anonymous"><input type="text" placeholder="[ 游客 ] 昵称" value=""><input type="text" placeholder="[ 游客 ] email" value=""><a href="javascript:;">--&gt; 使用 GitHub 登录</a></div><div class="preview" id="5dba61222" style="display: none;"><div class="bg"><span class="txt"> 评论预览 </span></div><div class="marked"></div></div><div class="ant-spin-nested-loading"><div class="ant-spin-container"><div style="position: relative;"><textarea type="text" class="ant-input comment-textarea" placeholder="请使用 markdown 语法编辑，读者可开启预览功能"></textarea><span class="togglePreview"> 开启预览</span><span class="cancel">取消</span><button type="button" class="ant-btn submit"><span>提 交</span></button></div></div></div></div></div></div></div><div class="c" id="comment_textarea_1039" style="display: none;"><div class="anonymous"><input type="text" placeholder="[ 游客 ] 昵称" value=""><input type="text" placeholder="[ 游客 ] email" value=""><a href="javascript:;">--&gt; 使用 GitHub 登录</a></div><div class="preview" id="abb6ed42" style="display: none;"><div class="bg"><span class="txt"> 评论预览 </span></div><div class="marked"></div></div><div class="ant-spin-nested-loading"><div class="ant-spin-container"><div style="position: relative;"><textarea type="text" class="ant-input comment-textarea" placeholder="请使用 markdown 语法编辑，读者可开启预览功能"></textarea><span class="togglePreview"> 开启预览</span><span class="cancel">取消</span><button type="button" class="ant-btn submit"><span>提 交</span></button></div></div></div></div></div></div></div><div class="comment-item"><div style="display: none;"><div class="animationload"><div class="osahanloading"></div></div></div><div class="media"><div class="media-left"><img src="./Spring IOC 容器源码分析_files/13.png" class="media-object img-circle"><i class="vertical-line"></i></div><div class="media-body" id="comment_head_1073"><h5 class="media-heading">蜗牛随风在奔跑 <span style="font-weight: normal;"> 2019-03-10 23:17:56 </span></h5><div class="comment-content-wrapper"><div class="" id="comment_body_1073" style="margin: 8px 0px;"><p>以前粗略看了几次，这次认认真真的看了几个小时，getBean那块还没完全完全看透，下次继续</p>
</div><div class=""></div></div><span class="operation">回复</span><div class="c" id="comment_textarea_1073" style="display: none;"><div class="anonymous"><input type="text" placeholder="[ 游客 ] 昵称" value=""><input type="text" placeholder="[ 游客 ] email" value=""><a href="javascript:;">--&gt; 使用 GitHub 登录</a></div><div class="preview" id="3b28d504" style="display: none;"><div class="bg"><span class="txt"> 评论预览 </span></div><div class="marked"></div></div><div class="ant-spin-nested-loading"><div class="ant-spin-container"><div style="position: relative;"><textarea type="text" class="ant-input comment-textarea" placeholder="请使用 markdown 语法编辑，读者可开启预览功能"></textarea><span class="togglePreview"> 开启预览</span><span class="cancel">取消</span><button type="button" class="ant-btn submit"><span>提 交</span></button></div></div></div></div></div></div></div><div class="comment-item"><div style="display: none;"><div class="animationload"><div class="osahanloading"></div></div></div><div class="media"><div class="media-left"><img src="./Spring IOC 容器源码分析_files/9.png" class="media-object img-circle"><i class="vertical-line"></i></div><div class="media-body" id="comment_head_1075"><h5 class="media-heading">小亮子 <span style="font-weight: normal;"> 2019-03-11 10:55:15 </span></h5><div class="comment-content-wrapper"><div class="" id="comment_body_1075" style="margin: 8px 0px;"><p>好文章，支持一下，感谢楼主</p>
</div><div class=""></div></div><span class="operation">回复</span><div class="c" id="comment_textarea_1075" style="display: none;"><div class="anonymous"><input type="text" placeholder="[ 游客 ] 昵称" value=""><input type="text" placeholder="[ 游客 ] email" value=""><a href="javascript:;">--&gt; 使用 GitHub 登录</a></div><div class="preview" id="5133367d" style="display: none;"><div class="bg"><span class="txt"> 评论预览 </span></div><div class="marked"></div></div><div class="ant-spin-nested-loading"><div class="ant-spin-container"><div style="position: relative;"><textarea type="text" class="ant-input comment-textarea" placeholder="请使用 markdown 语法编辑，读者可开启预览功能"></textarea><span class="togglePreview"> 开启预览</span><span class="cancel">取消</span><button type="button" class="ant-btn submit"><span>提 交</span></button></div></div></div></div></div></div></div><div class="comment-item"><div style="display: none;"><div class="animationload"><div class="osahanloading"></div></div></div><div class="media"><div class="media-left"><img src="./Spring IOC 容器源码分析_files/22806936" class="media-object img-circle"><i class="vertical-line"></i></div><div class="media-body" id="comment_head_1100"><h5 class="media-heading"> <span style="font-weight: normal;"> 2019-03-21 15:32:25 </span></h5><div class="comment-content-wrapper"><div class="" id="comment_body_1100" style="margin: 8px 0px;"><p>有个小建议  某些功能楼主可以围绕着接口来展开说，比如说BeanPostProcessor和ApplicationContextAware接口</p>
</div><div class=""></div></div><span class="operation">回复</span><div class="c" id="comment_textarea_1100" style="display: none;"><div class="anonymous"><input type="text" placeholder="[ 游客 ] 昵称" value=""><input type="text" placeholder="[ 游客 ] email" value=""><a href="javascript:;">--&gt; 使用 GitHub 登录</a></div><div class="preview" id="27953946" style="display: none;"><div class="bg"><span class="txt"> 评论预览 </span></div><div class="marked"></div></div><div class="ant-spin-nested-loading"><div class="ant-spin-container"><div style="position: relative;"><textarea type="text" class="ant-input comment-textarea" placeholder="请使用 markdown 语法编辑，读者可开启预览功能"></textarea><span class="togglePreview"> 开启预览</span><span class="cancel">取消</span><button type="button" class="ant-btn submit"><span>提 交</span></button></div></div></div></div></div></div></div><div class="comment-item"><div style="display: none;"><div class="animationload"><div class="osahanloading"></div></div></div><div class="media"><div class="media-left"><img src="./Spring IOC 容器源码分析_files/44514718" class="media-object img-circle"><i class="vertical-line"></i></div><div class="media-body" id="comment_head_1103"><h5 class="media-heading">BodomLake <span style="font-weight: normal;"> 2019-03-25 00:48:45 </span></h5><div class="comment-content-wrapper"><div class="" id="comment_body_1103" style="margin: 8px 0px;"><p>太狠了,要是可以从设计模式来概述下spring的设计构思就好了,期待!!!!</p>
</div><div class=""></div></div><span class="operation">回复</span><div class="c" id="comment_textarea_1103" style="display: none;"><div class="anonymous"><input type="text" placeholder="[ 游客 ] 昵称" value=""><input type="text" placeholder="[ 游客 ] email" value=""><a href="javascript:;">--&gt; 使用 GitHub 登录</a></div><div class="preview" id="59c6dac1c" style="display: none;"><div class="bg"><span class="txt"> 评论预览 </span></div><div class="marked"></div></div><div class="ant-spin-nested-loading"><div class="ant-spin-container"><div style="position: relative;"><textarea type="text" class="ant-input comment-textarea" placeholder="请使用 markdown 语法编辑，读者可开启预览功能"></textarea><span class="togglePreview"> 开启预览</span><span class="cancel">取消</span><button type="button" class="ant-btn submit"><span>提 交</span></button></div></div></div></div></div></div></div><div class="comment-item"><div style="display: none;"><div class="animationload"><div class="osahanloading"></div></div></div><div class="media"><div class="media-left"><img src="./Spring IOC 容器源码分析_files/16720834" class="media-object img-circle"><i class="vertical-line"></i></div><div class="media-body" id="comment_head_1116"><h5 class="media-heading">jiangtao <span style="font-weight: normal;"> 2019-03-28 14:00:28 </span></h5><div class="comment-content-wrapper"><div class="" id="comment_body_1116" style="margin: 8px 0px;"><p>优秀</p>
</div><div class=""></div></div><span class="operation">回复</span><div class="c" id="comment_textarea_1116" style="display: none;"><div class="anonymous"><input type="text" placeholder="[ 游客 ] 昵称" value=""><input type="text" placeholder="[ 游客 ] email" value=""><a href="javascript:;">--&gt; 使用 GitHub 登录</a></div><div class="preview" id="e953c1bc" style="display: none;"><div class="bg"><span class="txt"> 评论预览 </span></div><div class="marked"></div></div><div class="ant-spin-nested-loading"><div class="ant-spin-container"><div style="position: relative;"><textarea type="text" class="ant-input comment-textarea" placeholder="请使用 markdown 语法编辑，读者可开启预览功能"></textarea><span class="togglePreview"> 开启预览</span><span class="cancel">取消</span><button type="button" class="ant-btn submit"><span>提 交</span></button></div></div></div></div></div></div></div><div class="comment-item"><div style="display: none;"><div class="animationload"><div class="osahanloading"></div></div></div><div class="media"><div class="media-left"><img src="./Spring IOC 容器源码分析_files/4.png" class="media-object img-circle"><i class="vertical-line"></i></div><div class="media-body" id="comment_head_1134"><h5 class="media-heading">在下龙傲天 <span style="font-weight: normal;"> 2019-04-04 10:43:04 </span></h5><div class="comment-content-wrapper"><div class="" id="comment_body_1134" style="margin: 8px 0px;"><p>大神，顶呱呱，请收下小弟的膝盖。</p>
</div><div class=""></div></div><span class="operation">回复</span><div class="c" id="comment_textarea_1134" style="display: none;"><div class="anonymous"><input type="text" placeholder="[ 游客 ] 昵称" value=""><input type="text" placeholder="[ 游客 ] email" value=""><a href="javascript:;">--&gt; 使用 GitHub 登录</a></div><div class="preview" id="e1a7ddcd" style="display: none;"><div class="bg"><span class="txt"> 评论预览 </span></div><div class="marked"></div></div><div class="ant-spin-nested-loading"><div class="ant-spin-container"><div style="position: relative;"><textarea type="text" class="ant-input comment-textarea" placeholder="请使用 markdown 语法编辑，读者可开启预览功能"></textarea><span class="togglePreview"> 开启预览</span><span class="cancel">取消</span><button type="button" class="ant-btn submit"><span>提 交</span></button></div></div></div></div></div></div></div><div class="comment-item"><div style="display: none;"><div class="animationload"><div class="osahanloading"></div></div></div><div class="media"><div class="media-left"><img src="./Spring IOC 容器源码分析_files/18048426" class="media-object img-circle"><i class="vertical-line"></i></div><div class="media-body" id="comment_head_1138"><h5 class="media-heading">Draper <span style="font-weight: normal;"> 2019-04-05 23:52:21 </span></h5><div class="comment-content-wrapper"><div class="" id="comment_body_1138" style="margin: 8px 0px;"><p>太强了，收获很大，必须赞一下！</p>
</div><div class=""></div></div><span class="operation">回复</span><div class="c" id="comment_textarea_1138" style="display: none;"><div class="anonymous"><input type="text" placeholder="[ 游客 ] 昵称" value=""><input type="text" placeholder="[ 游客 ] email" value=""><a href="javascript:;">--&gt; 使用 GitHub 登录</a></div><div class="preview" id="1e9e262c" style="display: none;"><div class="bg"><span class="txt"> 评论预览 </span></div><div class="marked"></div></div><div class="ant-spin-nested-loading"><div class="ant-spin-container"><div style="position: relative;"><textarea type="text" class="ant-input comment-textarea" placeholder="请使用 markdown 语法编辑，读者可开启预览功能"></textarea><span class="togglePreview"> 开启预览</span><span class="cancel">取消</span><button type="button" class="ant-btn submit"><span>提 交</span></button></div></div></div></div></div></div></div><div class="comment-item"><div style="display: none;"><div class="animationload"><div class="osahanloading"></div></div></div><div class="media"><div class="media-left" style="cursor: pointer;"><img src="./Spring IOC 容器源码分析_files/37100104" class="media-object img-circle"><i class="vertical-line"></i></div><div class="media-body" id="comment_head_1139"><h5 class="media-heading">DINGYU222 <span style="font-weight: normal;"> 2019-04-07 14:24:27 </span></h5><div class="comment-content-wrapper"><div class="" id="comment_body_1139" style="margin: 8px 0px;"><p>博主写的真的好 能不能转载？ 会加上<strong>标注和原文地址！</strong></p>
</div><div class=""></div></div><span class="operation">回复</span><div class="comment-item" style="display: block;"><div style="display: none;"><div class="animationload"><div class="osahanloading"></div></div></div><div class="media"><div class="media-left"><img src="./Spring IOC 容器源码分析_files/14758664" class="media-object img-circle"><i class="vertical-line"></i></div><div class="media-body" id="comment_head_1140"><h5 class="media-heading">HongJie <span style="font-weight: normal;"> 2019-04-08 10:09:52 </span></h5><div class="comment-content-wrapper"><div class="" id="comment_body_1140" style="margin: 8px 0px;"><p>可以的，欢迎转载</p>
</div><div class=""></div></div><span class="operation">回复</span><div class="c" id="comment_textarea_1140" style="display: none;"><div class="anonymous"><input type="text" placeholder="[ 游客 ] 昵称" value=""><input type="text" placeholder="[ 游客 ] email" value=""><a href="javascript:;">--&gt; 使用 GitHub 登录</a></div><div class="preview" id="e4d0685" style="display: none;"><div class="bg"><span class="txt"> 评论预览 </span></div><div class="marked"></div></div><div class="ant-spin-nested-loading"><div class="ant-spin-container"><div style="position: relative;"><textarea type="text" class="ant-input comment-textarea" placeholder="请使用 markdown 语法编辑，读者可开启预览功能"></textarea><span class="togglePreview"> 开启预览</span><span class="cancel">取消</span><button type="button" class="ant-btn submit"><span>提 交</span></button></div></div></div></div></div></div></div><div class="c" id="comment_textarea_1139" style="display: none;"><div class="anonymous"><input type="text" placeholder="[ 游客 ] 昵称" value=""><input type="text" placeholder="[ 游客 ] email" value=""><a href="javascript:;">--&gt; 使用 GitHub 登录</a></div><div class="preview" id="0d3b3935" style="display: none;"><div class="bg"><span class="txt"> 评论预览 </span></div><div class="marked"></div></div><div class="ant-spin-nested-loading"><div class="ant-spin-container"><div style="position: relative;"><textarea type="text" class="ant-input comment-textarea" placeholder="请使用 markdown 语法编辑，读者可开启预览功能"></textarea><span class="togglePreview"> 开启预览</span><span class="cancel">取消</span><button type="button" class="ant-btn submit"><span>提 交</span></button></div></div></div></div></div></div></div><div class="comment-item"><div style="display: none;"><div class="animationload"><div class="osahanloading"></div></div></div><div class="media"><div class="media-left"><img src="./Spring IOC 容器源码分析_files/11.png" class="media-object img-circle"><i class="vertical-line"></i></div><div class="media-body" id="comment_head_1142"><h5 class="media-heading">Miliving <span style="font-weight: normal;"> 2019-04-10 07:53:46 </span></h5><div class="comment-content-wrapper"><div class="" id="comment_body_1142" style="margin: 8px 0px;"><p>优秀！作者是不是通读了Spring的源码，才能写出如此佳作？</p>
</div><div class=""></div></div><span class="operation">回复</span><div class="c" id="comment_textarea_1142" style="display: none;"><div class="anonymous"><input type="text" placeholder="[ 游客 ] 昵称" value=""><input type="text" placeholder="[ 游客 ] email" value=""><a href="javascript:;">--&gt; 使用 GitHub 登录</a></div><div class="preview" id="a6621259" style="display: none;"><div class="bg"><span class="txt"> 评论预览 </span></div><div class="marked"></div></div><div class="ant-spin-nested-loading"><div class="ant-spin-container"><div style="position: relative;"><textarea type="text" class="ant-input comment-textarea" placeholder="请使用 markdown 语法编辑，读者可开启预览功能"></textarea><span class="togglePreview"> 开启预览</span><span class="cancel">取消</span><button type="button" class="ant-btn submit"><span>提 交</span></button></div></div></div></div></div></div></div><div class="c" style="display: block;"><h4>留下你的评论</h4><div class="anonymous"><input type="text" placeholder="[ 游客 ] 昵称" value=""><input type="text" placeholder="[ 游客 ] email" value=""><a href="javascript:;">--&gt; 使用 GitHub 登录</a></div><div class="preview" id="ae6a4e92" style="display: none;"><div class="bg"><span class="txt"> 评论预览 </span></div><div class="marked"></div></div><div class="ant-spin-nested-loading"><div class="ant-spin-container"><div style="position: relative;"><textarea type="text" class="ant-input comment-textarea" placeholder="请使用 markdown 语法编辑，读者可开启预览功能"></textarea><span class="togglePreview"> 开启预览</span><span class="cancel" style="display: none;">取消</span><button type="button" class="ant-btn submit"><span>提 交</span></button></div></div></div></div></div></div></div><div id="footer">Created By HongJie</div></div></section></div>
<script type="text/javascript" src="./Spring IOC 容器源码分析_files/vendor.js"></script><script type="text/javascript" src="./Spring IOC 容器源码分析_files/app.js"></script>



</body><div id="cye-workaround-body" style="position: absolute; left: 0px; top: 0px; z-index: -2147483646; background: none 0% 0% / auto repeat scroll padding-box border-box rgb(255, 255, 255); height: 81830px; width: 1106px;"></div><div id="cye-workaround-body-image" style="position: absolute; left: 0px; top: 0px; z-index: -2147483645; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0); height: 81830px; width: 1106px;"></div></html>